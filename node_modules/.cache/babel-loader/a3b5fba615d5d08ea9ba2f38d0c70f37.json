{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _weakMap = require('babel-runtime/core-js/weak-map');\n\nvar _weakMap2 = _interopRequireDefault(_weakMap);\n\nvar _util = require('util');\n\nvar _util2 = _interopRequireDefault(_util);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Factory which produces a multi-keyed container based on the provided set of\n * constructors\n * @param {mixed} containers\n * @returns {Container}\n */\n\n\nfunction make() {\n  for (var _len = arguments.length, containers = Array(_len), _key = 0; _key < _len; _key++) {\n    containers[_key] = arguments[_key];\n  }\n\n  var TopContainer = containers.shift();\n  var data = new _weakMap2.default();\n  var sizes = new _weakMap2.default();\n  var ChildContainer = containers.length > 1 ? make.apply(undefined, containers) : containers[0];\n  var name = '(' + [TopContainer.name].concat(containers.map(function (container) {\n    return container.name;\n  })).join(', ') + ')';\n  /**\n   * Container that wraps an arbitrary set of tupples to their values\n   */\n\n  var Container = function () {\n    /**\n     * @constructs Container\n     */\n    function Container() {\n      (0, _classCallCheck3.default)(this, Container);\n\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      data.set(this, new (Function.prototype.bind.apply(TopContainer, [null].concat(args)))());\n      sizes.set(this, 0);\n    }\n    /**\n     * getter for .size\n     * @returns {number}\n     */\n\n\n    (0, _createClass3.default)(Container, [{\n      key: 'add',\n\n      /**\n       * Identical to Container#set() but leads slightly more intuitive code when\n       * the container is based on a Set rather than a Map.\n       * @returns {Container}\n       */\n      value: function add() {\n        return this.set.apply(this, arguments);\n      }\n      /**\n       * Removes all items from the container\n       * @returns {undefined}\n       */\n\n    }, {\n      key: 'clear',\n      value: function clear() {\n        var ret = data.get(this).clear();\n        sizes.set(this, 0);\n        return ret;\n      }\n      /**\n       * Removes the specified item to the container\n       * @param {mixed} key\n       * @param {Array<mixed>} keys\n       * @returns {boolean}\n       */\n\n    }, {\n      key: 'delete',\n      value: function _delete(key) {\n        var mine = data.get(this);\n\n        for (var _len3 = arguments.length, keys = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n          keys[_key3 - 1] = arguments[_key3];\n        }\n\n        if (!keys.length) {\n          return mine.delete(key);\n        }\n\n        var next = mine.get(key);\n\n        if (!next) {\n          return false;\n        }\n\n        var ret = next.delete.apply(next, keys);\n\n        if (ret) {\n          sizes.set(this, sizes.get(this) - 1);\n        }\n\n        if (next.size === 0) {\n          mine.delete(key);\n        }\n\n        return ret;\n      }\n      /**\n       * Retrieves the specified item from the container\n       * @param {mixed} key\n       * @param {Array<mixed>} keys\n       * @returns {mixed}\n       */\n\n    }, {\n      key: 'get',\n      value: function get(key) {\n        var mine = data.get(this);\n\n        if (!mine.get) {\n          return mine;\n        }\n\n        for (var _len4 = arguments.length, keys = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n          keys[_key4 - 1] = arguments[_key4];\n        }\n\n        if (!keys.length) {\n          return mine.get(key);\n        }\n\n        var next = mine.get(key);\n\n        if (!next) {\n          return undefined;\n        }\n\n        if (!next.get) {\n          return next;\n        }\n\n        return next.get.apply(next, keys);\n      }\n      /**\n       * Indicates whether the container holds the specified item\n       * @param {mixed} key\n       * @param {Array<mixed>} keys\n       * @returns {Boolean}\n       */\n\n    }, {\n      key: 'has',\n      value: function has() {\n        return typeof this.get.apply(this, arguments) !== 'undefined';\n      }\n      /**\n       * Stores the specified item in the container\n       * @param {mixed} key\n       * @param {Array<mixed>} args\n       * @param {mixed} value\n       * @returns {Container}\n       */\n\n    }, {\n      key: 'set',\n      value: function set() {\n        var overwrite = false;\n\n        for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n          args[_key5] = arguments[_key5];\n        }\n\n        if (this.has.apply(this, args)) {\n          overwrite = true;\n        }\n\n        var mine = data.get(this);\n        var key = args.shift();\n\n        if (!mine.get) {\n          insert.apply(undefined, [mine, key].concat(args));\n          return this;\n        }\n\n        var next = mine.get(key);\n\n        if (!next) {\n          if (!ChildContainer) {\n            insert.apply(undefined, [mine, key].concat(args));\n            return this;\n          }\n\n          next = new ChildContainer();\n          insert(mine, key, next);\n        }\n\n        insert.apply(undefined, [next].concat(args));\n\n        if (!overwrite) {\n          sizes.set(this, sizes.get(this) + 1);\n        }\n\n        return this;\n      }\n      /**\n       * @private\n       * @returns {string}\n       */\n\n    }, {\n      key: 'inspect',\n      value: function inspect() {\n        return 'Container' + name + ' {\\n  ' + _util2.default.inspect(data.get(this), {\n          depth: null\n        }) + '\\n}';\n      }\n    }, {\n      key: 'size',\n      get: function get() {\n        return sizes.get(this);\n      }\n    }]);\n    return Container;\n  }();\n\n  return Container;\n}\n/**\n * Inserts into an arbitrary container\n * @param {Map|WeakMap|Set|WeakSet} container\n * @param {Array<mixed>} args\n * @private\n * @returns {undefined}\n */\n\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nfunction insert(container) {\n  for (var _len6 = arguments.length, args = Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n    args[_key6 - 1] = arguments[_key6];\n  }\n\n  if (container.add) {\n    container.add.apply(container, args);\n    return;\n  }\n\n  if (container.set) {\n    container.set.apply(container, args);\n    return;\n  }\n\n  if (container.push) {\n    container.push.apply(container, args);\n    return;\n  }\n\n  throw new TypeError('Could not determine how to insert into the specified container');\n}\n\nexports.default = make;","map":null,"metadata":{},"sourceType":"script"}