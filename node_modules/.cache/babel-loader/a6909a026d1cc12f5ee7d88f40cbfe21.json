{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _stream = require('stream');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Reforms the interesting data from an RTCStatsReport into something grokkable\n */\n\n\nvar StatsFilter = function (_Transform) {\n  (0, _inherits3.default)(StatsFilter, _Transform);\n  /**\n   * Tells the Stream we're operating in objectMode\n   * @private\n   */\n\n  function StatsFilter() {\n    (0, _classCallCheck3.default)(this, StatsFilter);\n    return (0, _possibleConstructorReturn3.default)(this, (StatsFilter.__proto__ || (0, _getPrototypeOf2.default)(StatsFilter)).call(this, {\n      objectMode: true\n    }));\n  }\n  /**\n   * Filters out just the interesting part of a RTCStatsReport\n   * @param {RTCStatsReport} report\n   * @param {*} encoding\n   * @param {Function} callback\n   * @private\n   * @returns {undefined}\n   */\n\n\n  (0, _createClass3.default)(StatsFilter, [{\n    key: '_transform',\n    value: function _transform(report, encoding, callback) {\n      if (!report) {\n        callback();\n        return;\n      }\n\n      var incomingAudio = {\n        local: null,\n        remote: null\n      };\n      var incomingVideo = {\n        local: null,\n        remote: null\n      };\n      var outgoingAudio = {\n        local: null,\n        remote: null\n      };\n      var outgoingVideo = {\n        local: null,\n        remote: null\n      };\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = (0, _getIterator3.default)(report.values()), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var item = _step.value;\n\n          if (['outbound-rtp', 'outboundrtp'].includes(item.type) && !item.isRemote) {\n            if (item.mediaType === 'audio') {\n              outgoingAudio.local = item;\n              outgoingAudio.remote = report.get(item.remoteId);\n            }\n\n            if (item.mediaType === 'video') {\n              outgoingVideo.local = item;\n              outgoingVideo.remote = report.get(item.remoteId);\n            }\n          }\n\n          if (['inbound-rtp', 'inboundrtp'].includes(item.type) && !item.isRemote) {\n            if (item.mediaType === 'audio') {\n              incomingAudio.local = item;\n              incomingAudio.remote = report.get(item.remoteId);\n            }\n\n            if (item.mediaType === 'video') {\n              incomingVideo.local = item;\n              incomingVideo.remote = report.get(item.remoteId);\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this.push({\n        incomingAudio: incomingAudio,\n        incomingVideo: incomingVideo,\n        outgoingAudio: outgoingAudio,\n        outgoingVideo: outgoingVideo,\n        report: report\n      });\n      callback();\n    }\n  }]);\n  return StatsFilter;\n}(_stream.Transform);\n\nexports.default = StatsFilter;","map":null,"metadata":{},"sourceType":"script"}