{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.detectFileType = exports.processImage = undefined;\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nexports.drawImage = drawImage;\nexports.updateImageOrientation = updateImageOrientation;\nexports.readExifData = readExifData;\nexports.orient = orient;\n\nvar _processImage = require('./process-image');\n\nObject.defineProperty(exports, 'processImage', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_processImage).default;\n  }\n});\n\nvar _detectFiletype = require('./detect-filetype');\n\nObject.defineProperty(exports, 'detectFileType', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_detectFiletype).default;\n  }\n});\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n/* eslint no-unused-vars: [\"error\", { \"vars\": \"local\" }] */\n\n/* global Uint8Array, FileReader */\n\n\nvar _require = require('exif'),\n    ExifImage = _require.ExifImage;\n/**\n* Draws the image on the canvas so that the thumbnail\n* could be generated\n* @param {Object} options(options(orientation: image exif orientation range from 1-8, img: Image object, x: start x-axis, y: start y-axis, width: width of the thumbnail, height: height of the thumbnail, deg: counterclockwise degree rotation, flip: flip Image, ctx: canvas context))\n* @returns {Object}\n*/\n\n\nfunction drawImage(options) {\n  // save current context before applying transformations\n  options.ctx.save();\n  var rad = void 0; // convert degrees to radians\n\n  if (options.flip) {\n    rad = options.deg * Math.PI / 180;\n  } else {\n    rad = 2 * Math.PI - options.deg * Math.PI / 180;\n  } // set the origin to the center of the image\n\n\n  options.ctx.translate(options.x + options.width / 2, options.y + options.height / 2); // rotate the canvas around the origin\n\n  options.ctx.rotate(rad);\n\n  if (options.flip) {\n    // flip the canvas\n    options.ctx.scale(-1, 1);\n  } // draw the image\n\n\n  options.ctx.drawImage(options.img, -options.width / 2, -options.height / 2, options.width, options.height); // restore the canvas\n\n  options.ctx.restore();\n}\n/**\n* Updates the image file with exif information, required to correctly rotate the image activity\n* @param {Object} file\n* @returns {Promise<Object>}\n*/\n\n\nfunction updateImageOrientation(file) {\n  return new _promise2.default(function (resolve) {\n    var reader = new FileReader();\n    reader.readAsArrayBuffer(file);\n\n    reader.onload = function onload() {\n      var arrayBuffer = reader.result;\n      var buf = Buffer.from(arrayBuffer);\n      resolve(buf);\n    };\n  }).then(function (buf) {\n    return readExifData(file, buf);\n  });\n}\n/**\n* Adds exif orientation information on the image file\n* @param {Object} file\n* @param {Object} buf\n* @returns {Promise<ExifImage>}\n*/\n\n\nfunction readExifData(file, buf) {\n  return new _promise2.default(function (resolve) {\n    // For avatar images the file.type is set as image/jpeg, however for images shared in an activity file.mimeType is set as image/jpeg. Handling both conditions.\n    if (file && file.image && (file.type === 'image/jpeg' || file.mimeType === 'image/jpeg')) {\n      /* eslint-disable no-new */\n      new ExifImage({\n        image: buf\n      }, function (error, exifData) {\n        if (!error && exifData) {\n          file.image.orientation = exifData.image.Orientation;\n        }\n\n        resolve(buf);\n      });\n    } else {\n      resolve(buf);\n    }\n  });\n}\n/* eslint-disable complexity */\n\n/**\n* Rotates/flips the image on the canvas as per exif information\n* @param {Object} options(orientation: image exif orientation range from 1-8, img: Image object, x: start x-axis, y: start y-axis, width: width of the thumbnail, height: height of the thumbnail, ctx: canvas context)\n* @param {Object} file\n* @returns {Object}\n*/\n\n\nfunction orient(options, file) {\n  if (file && file.image && file.image.orientation && file.image.orientation !== 1) {\n    var image = {\n      img: options.img,\n      x: options.x,\n      y: options.y,\n      width: options.width,\n      height: options.height,\n      deg: 0,\n      flip: true,\n      ctx: options.ctx\n    };\n\n    switch (options && options.orientation) {\n      case 3:\n        // rotateImage180\n        image.deg = 180;\n        image.flip = false;\n        break;\n\n      case 4:\n        // rotate180AndFlipImage\n        image.deg = 180;\n        image.flip = true;\n        break;\n\n      case 5:\n        // rotate90AndFlipImage\n        image.deg = 270;\n        image.flip = true;\n        break;\n\n      case 6:\n        // rotateImage90\n        image.deg = 270;\n        image.flip = false;\n        break;\n\n      case 7:\n        // rotateNeg90AndFlipImage\n        image.deg = 90;\n        image.flip = true;\n        break;\n\n      case 8:\n        // rotateNeg90\n        image.deg = 90;\n        image.flip = false;\n        break;\n\n      default:\n        break;\n    }\n\n    drawImage(image);\n  } else {\n    options.ctx.drawImage(options.img, options.x, options.y, options.width, options.height);\n  }\n}\n/* eslint-enable complexity */","map":null,"metadata":{},"sourceType":"script"}