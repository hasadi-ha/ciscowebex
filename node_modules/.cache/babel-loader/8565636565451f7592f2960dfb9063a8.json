{"ast":null,"code":"/*!\n * algorithms/hkdf.js - HMAC-based Extract-and-Expand Key Derivation\n *\n * Copyright (c) 2015 Cisco Systems, Inc.  See LICENSE file.\n */\n\"use strict\";\n\nvar CONSTANTS = require(\"./constants.js\"),\n    hmac = require(\"./hmac.js\");\n\nfunction hkdfDeriveFn(name) {\n  var hash = name.replace(\"HKDF-\", \"\"),\n      op = name.replace(\"HKDF-SHA-\", \"HS\"); // NOTE: no nodejs/webcrypto/fallback model, since this HKDF is\n  //       implemented using the HMAC algorithms\n\n  var fn = function (key, props) {\n    var hashLen = CONSTANTS.HASHLENGTH[hash] / 8;\n\n    if (\"string\" === typeof op) {\n      op = hmac[op].sign;\n    } // prepare options\n\n\n    props = props || {};\n    var salt = props.salt;\n\n    if (!salt || 0 === salt.length) {\n      salt = new Buffer(hashLen);\n      salt.fill(0);\n    }\n\n    var info = props.info || new Buffer(0);\n    var keyLen = props.length || hashLen;\n    var promise; // Setup Expansion\n\n    var N = Math.ceil(keyLen / hashLen),\n        okm = [],\n        idx = 0;\n\n    function expand(key, T) {\n      if (N === idx++) {\n        return Buffer.concat(okm).slice(0, keyLen);\n      }\n\n      if (!T) {\n        T = new Buffer(0);\n      }\n\n      T = Buffer.concat([T, info, new Buffer([idx])]);\n      T = op(key, T);\n      T = T.then(function (result) {\n        T = result.mac;\n        okm.push(T);\n        return expand(key, T);\n      });\n      return T;\n    } // Step 1: Extract\n\n\n    promise = op(salt, key, {\n      length: salt.length * 8\n    });\n    promise = promise.then(function (result) {\n      // Step 2: Expand\n      return expand(result.mac);\n    });\n    return promise;\n  };\n\n  return fn;\n} // Public API\n// * [name].derive\n\n\nvar hkdf = {};\n[\"HKDF-SHA-1\", \"HKDF-SHA-256\", \"HKDF-SHA-384\", \"HKDF-SHA-512\"].forEach(function (name) {\n  hkdf[name] = {\n    derive: hkdfDeriveFn(name)\n  };\n});\nmodule.exports = hkdf;","map":null,"metadata":{},"sourceType":"script"}