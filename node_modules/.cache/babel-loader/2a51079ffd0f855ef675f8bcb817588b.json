{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _cloneDeep2 = require('lodash/cloneDeep');\n\nvar _cloneDeep3 = _interopRequireDefault(_cloneDeep2);\n/**\n * Helper method to build a roomInfo object from a conversation object\n * @param {Conversation~ConversationObject} conversation\n * @returns {Promise<RoomInfoObject>}\n */\n\n\nvar buildRoomInfo = function () {\n  var _ref2 = (0, _asyncToGenerator3.default)(\n  /*#__PURE__*/\n  _regenerator2.default.mark(function _callee2(conversation) {\n    var type, title, lastActivityDate, roomInfo;\n    return _regenerator2.default.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            type = (0, _common.getHydraRoomType)(conversation.tags);\n            title = conversation.displayName ? conversation.displayName : conversation.computedTitle;\n            lastActivityDate = conversation.lastReadableActivityDate ? conversation.lastReadableActivityDate : conversation.lastRelevantActivityDate;\n            roomInfo = (0, _extends3.default)({\n              id: (0, _common.buildHydraRoomId)(conversation.id),\n              type: type\n            }, title && {\n              title: conversation.displayName\n            }, lastActivityDate && {\n              lastActivityDate: lastActivityDate\n            }, {\n              lastSeenActivityDate: conversation.lastSeenActivityDate ? conversation.lastSeenActivityDate : // If user has never been seen set the date to \"a long time ago\"\n              new Date(0).toISOString()\n            });\n            return _context2.abrupt('return', _promise2.default.resolve(roomInfo));\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2['catch'](0);\n            return _context2.abrupt('return', _promise2.default.reject(_context2.t0));\n\n          case 11:\n          case 'end':\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this, [[0, 8]]);\n  }));\n\n  return function buildRoomInfo(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n/**\n * Helper method to build a list of roomInfo object from conversation list\n * @param {Conversation~ConversationObjectList} conversations\n * @returns {Promise<RoomInfoList>}\n */\n\n\nvar buildRoomInfoList = function () {\n  var _ref3 = (0, _asyncToGenerator3.default)(\n  /*#__PURE__*/\n  _regenerator2.default.mark(function _callee3(conversations) {\n    var roomReadInfo, roomInfoPromises, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, conversation;\n\n    return _regenerator2.default.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            // Convert each Conversation into a roomInfo object\n            roomReadInfo = {\n              items: []\n            };\n            roomInfoPromises = [];\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _iteratorError = undefined;\n            _context3.prev = 5;\n\n            for (_iterator = (0, _getIterator3.default)(conversations); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              conversation = _step.value;\n              roomInfoPromises.push(buildRoomInfo(conversation));\n            }\n\n            _context3.next = 13;\n            break;\n\n          case 9:\n            _context3.prev = 9;\n            _context3.t0 = _context3['catch'](5);\n            _didIteratorError = true;\n            _iteratorError = _context3.t0;\n\n          case 13:\n            _context3.prev = 13;\n            _context3.prev = 14;\n\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n\n          case 16:\n            _context3.prev = 16;\n\n            if (!_didIteratorError) {\n              _context3.next = 19;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 19:\n            return _context3.finish(16);\n\n          case 20:\n            return _context3.finish(13);\n\n          case 21:\n            return _context3.abrupt('return', _promise2.default.all(roomInfoPromises).then(function (roomInfoList) {\n              roomReadInfo.items = roomInfoList;\n              roomReadInfo.items.sort(function (a, b) {\n                return a.lastActivityDate < b.lastActivityDate ? 1 : -1;\n              });\n              return roomReadInfo;\n            }));\n\n          case 22:\n          case 'end':\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this, [[5, 9, 13, 21], [14,, 16, 20]]);\n  }));\n\n  return function buildRoomInfoList(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar _webexCore = require('@webex/webex-core');\n\nvar _common = require('@webex/common');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nvar debug = require('debug')('memberships');\n/**\n * @typedef {Object} RoomObject\n * @property {string} id - (server generated) Unique identifier for the room\n * @property {string} title - The display name for the room. All room members\n * will see the title so make it something good\n * @property {string} teamId - (optional) The ID of the team to which the room\n * belongs\n * @property {isoDate} created - (server generated) The date and time that the\n * room was created\n */\n\n/**\n * Rooms are virtual meeting places for getting stuff done. This resource\n * represents the room itself. Check out the {@link Memberships} API to learn\n * how to add and remove people from rooms and the {@link Messages} API for\n * posting and managing content.\n * @class\n * @name Rooms\n */\n\n\nvar Rooms = _webexCore.SparkPlugin.extend({\n  /**\n   * Connect to the web socket to listen to incoming messages.\n   * @returns {Promise}\n   */\n  listen: function listen() {\n    var _this = this;\n\n    return (0, _common.createEventEnvelope)(this.spark, _common.SDK_EVENT.EXTERNAL.RESOURCE.ROOMS).then(function (envelope) {\n      _this.eventEnvelope = envelope;\n      return _this.spark.internal.mercury.connect().then(function () {\n        _this.listenTo(_this.spark.internal.mercury, _common.SDK_EVENT.INTERNAL.TEAMS_ACTIVITY, function (event) {\n          return _this.onWebexApiEvent(event);\n        });\n      });\n    });\n  },\n\n  /**\n   * Trigger a membership related events.\n   * @param {Object} event\n   * @returns {undefined} -- nothing //linter requires return in JSDoc\n   */\n  onWebexApiEvent: function onWebexApiEvent(event) {\n    var activity = event.data.activity;\n    /* eslint-disable no-case-declarations */\n\n    switch (activity.verb) {\n      case _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.CREATE:\n        var roomCreatedEvent = this.getRoomEvent(activity, _common.SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED);\n\n        if (roomCreatedEvent) {\n          debug('room \"created\" payload:             ' + (0, _stringify2.default)(roomCreatedEvent));\n          this.trigger(_common.SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED, roomCreatedEvent);\n        }\n\n        break;\n\n      case _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.UPDATE:\n        var roomUpdatedEvent = this.getRoomEvent(activity, _common.SDK_EVENT.EXTERNAL.EVENT_TYPE.UPDATED);\n\n        if (roomUpdatedEvent) {\n          debug('room \"updated\" payload:             ' + (0, _stringify2.default)(roomUpdatedEvent));\n          this.trigger(_common.SDK_EVENT.EXTERNAL.EVENT_TYPE.UPDATED, roomUpdatedEvent);\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  },\n\n  /**\n   * Constructs the data object for an event on the rooms resource,\n   * adhering to Hydra's Webehook data structure.\n   * @param {Object} activity from mercury\n   * @param {Object} event type of \"webhook\" event\n   * @returns {Object} constructed event\n   */\n  getRoomEvent: function getRoomEvent(activity, event) {\n    try {\n      var sdkEvent = (0, _cloneDeep3.default)(this.eventEnvelope);\n      var room = void 0;\n      sdkEvent.event = event;\n      sdkEvent.data.created = activity.published;\n      sdkEvent.actorId = (0, _common.buildHydraPersonId)(activity.actor.entryUUID);\n\n      if (event === _common.SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED) {\n        room = _common.SDK_EVENT.INTERNAL.ACTIVITY_FIELD.OBJECT;\n        sdkEvent.data.creatorId = (0, _common.buildHydraPersonId)(activity.actor.entryUUID);\n        sdkEvent.data.lastActivity = activity.published;\n      } else if (event === _common.SDK_EVENT.EXTERNAL.EVENT_TYPE.UPDATED) {\n        room = _common.SDK_EVENT.INTERNAL.ACTIVITY_FIELD.TARGET; // TODO - lastActivity is not in the mercury 'update' event\n        // would need to make an async call to get more conversation details\n        // or we can skip this for the SDK, since we will provide an\n        // SDK api to allow the app to query this directly if it needs\n        // sdkEvent.data.lastActivity = 'to do';\n      } else {\n        throw new Error('unexpected event type');\n      }\n\n      sdkEvent.data.id = (0, _common.buildHydraRoomId)(activity[room].id);\n      sdkEvent.data.type = (0, _common.getHydraRoomType)(activity[room].tags);\n      sdkEvent.data.isLocked = activity[room].tags.includes(_common.SDK_EVENT.INTERNAL.ACTIVITY_TAG.LOCKED);\n      return sdkEvent;\n    } catch (e) {\n      this.spark.logger.error('Unable to generate SDK event from mercury \\'socket activity for rooms:' + event + ' event: ' + e.message);\n      return null;\n    }\n  },\n\n  /**\n   * Creates a new room. The authenticated user is automatically added as a\n   * member of the room. See the {@link Memberships} API to learn how to add\n   * more people to the room.\n   * @instance\n   * @memberof Rooms\n   * @param {RoomObject} room\n   * @returns {Promise<RoomObject>}\n   * @example\n   * ciscospark.rooms.create({title: 'Create Room Example'})\n   *   .then(function(room) {\n   *     var assert = require('assert')\n   *     assert(typeof room.created === 'string');\n   *     assert(typeof room.id === 'string');\n   *     assert(room.title === 'Create Room Example');\n   *     console.log(room.title);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create: function create(room) {\n    return this.request({\n      method: 'POST',\n      service: 'hydra',\n      resource: 'rooms',\n      body: room\n    }).then(function (res) {\n      return res.body;\n    });\n  },\n\n  /**\n   * Returns a single room.\n   * @instance\n   * @memberof Rooms\n   * @param {RoomObject|string} room\n   * @param {Object} options\n   * @returns {Promise<RoomObject>}\n   * @example\n   * var room;\n   * ciscospark.rooms.create({title: 'Get Room Example'})\n   *   .then(function(r) {\n   *     room = r\n   *     return ciscospark.rooms.get(room.id)\n   *   })\n   *   .then(function(r) {\n   *     var assert = require('assert');\n   *     assert.deepEqual(r, room);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get: function get(room, options) {\n    var id = room.id || room;\n    return this.request({\n      service: 'hydra',\n      resource: 'rooms/' + id,\n      qs: options\n    }).then(function (res) {\n      return res.body.items || res.body;\n    });\n  },\n\n  /**\n   * Returns a list of rooms. In most cases the results will only contain rooms\n   * that the authentiated user is a member of.\n   * @instance\n   * @memberof Rooms\n   * @param {Object} options\n   * @param {Object} options.max Limit the maximum number of rooms in the\n   * response.\n   * @returns {Promise<Page<RoomObject>>}\n   * @example\n   * var createdRooms;\n   * Promise.all([\n   *   ciscospark.rooms.create({title: 'List Rooms Example 1'}),\n   *   ciscospark.rooms.create({title: 'List Rooms Example 2'}),\n   *   ciscospark.rooms.create({title: 'List Rooms Example 3'})\n   * ])\n   *   .then(function(r) {\n   *     createdRooms = r;\n   *     return ciscospark.rooms.list({max: 3})\n   *       .then(function(rooms) {\n   *         var assert = require('assert');\n   *         assert(rooms.length === 3);\n   *         for (var i = 0; i < rooms.items.length; i+= 1) {\n   *           assert(createdRooms.filter(function(room) {\n   *             return room.id === rooms.items[i].id;\n   *           }).length === 1);\n   *         }\n   *         return 'success';\n   *       });\n   *   });\n   *   // => success\n   */\n  list: function list(options) {\n    var _this2 = this;\n\n    return this.request({\n      service: 'hydra',\n      resource: 'rooms/',\n      qs: options\n    }).then(function (res) {\n      return new _webexCore.Page(res, _this2.spark);\n    });\n  },\n\n  /**\n   * Returns a list of rooms with details about the data of the last\n   * actvity in the room, and the date of the users last presences in\n   * the room. The list is sorted with this with most recent activity first\n   *\n   * For rooms where lastActivityDate > lastSeenDate the space\n   * can be considerd to be \"unread\"\n   *\n   * This differs from the rooms.list() function in the following ways:\n   *  -- when called with no parameters it returns an array of all\n   *     spaces, up to 1000, that the user is a member of\n   *  -- pagination is not supported. ALL rooms are returned which\n   *     can result in a large payload\n   *  -- For users with hundreds of spaces, this API can take some time to\n   *     to return, for this reason it supports an optional maxRecent parameter.\n   *     If set this will return only the specified number of spaces with activity\n   *     in the last two weeks.  Reccomended value is 30.  Max supported is 100.\n   *  -- only \"id\", \"type\", \"lastActivityDate\", and \"lastSeenDate\" are\n   *     guaranteed to be available for each room in the list\n   *  -- \"title\" is usually returned, but not guaranteed\n   *\n   * In general this function should be used only when the client needs to\n   * access read status info, for example on startup.\n   * After startup, clients should track message and membership:seen events\n   * to maintain read status client side.\n   *\n   * Since this API can take some time to return up to 1000 spaces, it is\n   * recommended that custom clients call this first with the maxRecent parameter\n   * set to 30, so that they can display some of the more recents spaces.  Calling\n   * this API a second time with no parameters will return all the spaces.\n   *\n   * Not all spaces may be returned, for example when users in more than 1000\n   * spaces, or when a new spaces is added after this function is called,\n   * but before it returns. Custom clients should be prepared to gracefully\n   * andle cases where an event occurs in a space not returned by this call,\n   * by querying rooms.getWithReadStatus() with the id of the room in question\n   *\n   * This function may be deprecated when this info is provided in the membership\n   * objects returned in the list function.\n   * @instance\n   * @param {int} maxRecent\n   * @memberof Rooms\n   * @returns {Promise<RoomInfoObjectList>}\n   */\n  listWithReadStatus: function () {\n    var _ref = (0, _asyncToGenerator3.default)(\n    /*#__PURE__*/\n    _regenerator2.default.mark(function _callee() {\n      var _this3 = this;\n\n      var maxRecent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var now, options;\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              now = new Date();\n              options = {\n                activitiesLimit: 0,\n                computeTitleIfEmpty: true,\n                conversationsLimit: 1000,\n                isActive: true\n              };\n\n              if (!(maxRecent > 0)) {\n                _context.next = 7;\n                break;\n              }\n\n              options.conversationsLimit = maxRecent;\n              options.sinceDate = now.setDate(now.getDate() - 14);\n              _context.next = 9;\n              break;\n\n            case 7:\n              if (!(maxRecent < 0 || maxRecent > 100)) {\n                _context.next = 9;\n                break;\n              }\n\n              return _context.abrupt('return', _promise2.default.reject(new Error('rooms.listWithReadStatus: ' + 'optional maxRecent parameter must be an integer between 1 and 100')));\n\n            case 9:\n              return _context.abrupt('return', (0, _common.ensureConvoAvailability)(this.spark).then(function () {\n                return _this3.spark.internal.conversation.list(options);\n              }).then(function (conversations) {\n                return buildRoomInfoList(conversations);\n              }));\n\n            case 10:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function listWithReadStatus() {\n      return _ref.apply(this, arguments);\n    }\n\n    return listWithReadStatus;\n  }(),\n\n  /**\n   * Returns a single room object with details about the data of the last\n   * actvity in the room, and the date of the users last presence in\n   * the room.\n   *\n   * For rooms where lastActivityDate > lastSeenDate the room\n   * can be considerd to be \"unread\"\n   *\n   * This differs from the rooms.get() function in the following ways:\n   *  -- it takes a single roomId parameter to fetch\n   *  -- no other options are considered\n   *  -- only \"id\", \"type\", \"lastActivityDate\", and \"lastSeenDate\" are\n   *     guaranteed to be available in the return object\n   *  -- \"title\" is usually returned, but not guaranteed\n   *\n   * In general clients should use the listWithReadStatus() method on startup\n   * to get the initial roomStatus and then update their client side copy by\n   * responding to message, membership and room events.\n    * This function allows a custom client to be \"nimble\" if it is responding\n   * to an event with a roomId that was not in the original fetch.  The\n   * anticipated behavior is that getWithReadStats is called \"just in time\",\n   * with the resulting room object being added to the list of cached room\n   * objects on the client side.\n   *\n   * This function may be deprecated when this info is provided in the room\n   * object returned in the get function.\n   * @instance\n   * @memberof Rooms\n   * @param {string} roomId\n   * @returns {Promise<RoomInfoObject>}\n   */\n  getWithReadStatus: function getWithReadStatus(roomId) {\n    var _this4 = this;\n\n    var conversation = {\n      id: (0, _common.deconstructHydraId)(roomId).id\n    };\n    return (0, _common.ensureConvoAvailability)(this.spark).then(function () {\n      return _this4.spark.internal.conversation.get(conversation, {\n        computeTitleIfEmpty: true,\n        activitiesLimit: 0 // don't send the whole history of activity\n\n      }).then(function (convo) {\n        return buildRoomInfo(convo);\n      });\n    });\n  },\n\n  /**\n   * Deletes a single room.\n   * @instance\n   * @memberof Rooms\n   * @param {RoomObject|string} room\n   * @returns {Promise}\n   * @example\n   * var room;\n   * ciscospark.rooms.create({title: 'Remove Room Example'})\n   *  .then(function(r) {\n   *    room = r;\n   *    return ciscospark.rooms.remove(room.id);\n   *  })\n   *  .then(function() {\n   *    return ciscospark.rooms.get(room.id);\n   *  })\n   *  .then(function() {\n   *    var assert = require('assert');\n   *    assert(false, 'the previous get should have failed');\n   *  })\n   *  .catch(function(reason) {\n   *    var assert = require('assert');\n   *    assert.equal(reason.statusCode, 404);\n   *    return 'success'\n   *  });\n   *  // => success\n   */\n  remove: function remove(room) {\n    var id = room.id || room;\n    return this.request({\n      method: 'DELETE',\n      service: 'hydra',\n      resource: 'rooms/' + id\n    }).then(function (res) {\n      // Firefox has some issues with 204s and/or DELETE. This should move to\n      // http-core\n      if (res.statusCode === 204) {\n        return undefined;\n      }\n\n      return res.body;\n    });\n  },\n\n  /**\n   * Used to update a single room's properties.\n   * @instance\n   * @memberof Rooms\n   * @param {RoomObject} room\n   * @returns {Promise<RoomObject>}\n   * @example\n   * var room;\n   * ciscospark.rooms.update({title: 'Update Room Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     room.title = 'Update Room Example (Updated Title)';\n   *     return ciscospark.rooms.update(room);\n   *   })\n   *   .then(function() {\n   *     return ciscospark.rooms.get(room.id);\n   *   })\n   *   .then(function(room) {\n   *    var assert = require('assert');\n   *     assert.equal(room.title, 'Update Room Example (Updated Title)');\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  update: function update(room) {\n    var id = room.id;\n    return this.request({\n      method: 'PUT',\n      service: 'hydra',\n      resource: 'rooms/' + id,\n      body: room\n    }).then(function (res) {\n      return res.body;\n    });\n  },\n  version: '1.59.0'\n});\n\nexports.default = Rooms;","map":null,"metadata":{},"sourceType":"script"}