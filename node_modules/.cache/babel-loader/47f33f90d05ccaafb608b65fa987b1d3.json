{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _set2 = require('lodash/set');\n\nvar _set3 = _interopRequireDefault(_set2);\n\nvar _httpCore = require('@webex/http-core');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Adds 'cisco-device-url' header, as appropriate, to requests\n */\n\n\nvar DeviceUrlInterceptor = function (_Interceptor) {\n  (0, _inherits3.default)(DeviceUrlInterceptor, _Interceptor);\n\n  function DeviceUrlInterceptor() {\n    (0, _classCallCheck3.default)(this, DeviceUrlInterceptor);\n    return (0, _possibleConstructorReturn3.default)(this, (DeviceUrlInterceptor.__proto__ || (0, _getPrototypeOf2.default)(DeviceUrlInterceptor)).apply(this, arguments));\n  }\n\n  (0, _createClass3.default)(DeviceUrlInterceptor, [{\n    key: 'onRequest',\n\n    /**\n    * @see Interceptor#onRequest\n    * @param {Object} options\n    * @returns {Object}\n    */\n    value: function onRequest(options) {\n      var _this2 = this;\n\n      if (!this.spark.internal.device.url || options.headers && 'cisco-device-url' in options.headers && !options.headers['cisco-device-url']) {\n        return _promise2.default.resolve(options);\n      }\n\n      return _promise2.default.resolve(options.service || this.spark.internal.device.determineService(options.uri)).then(function (service) {\n        if (service && service !== 'oauth' && service !== 'saml' && service !== 'idbroker') {\n          (0, _set3.default)(options, 'headers[\\'cisco-device-url\\']', _this2.spark.internal.device.url);\n        }\n\n        return options;\n      }).catch(function (err) {\n        if (err.message.match(/does not reflect a known service/)) {\n          return options;\n        }\n\n        throw err;\n      });\n    }\n  }], [{\n    key: 'create',\n\n    /**\n    * @returns {DeviceUrlInterceptor}\n    */\n    value: function create() {\n      /* eslint no-invalid-this: [0] */\n      return new DeviceUrlInterceptor({\n        spark: this\n      });\n    }\n  }]);\n  return DeviceUrlInterceptor;\n}(_httpCore.Interceptor);\n/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nexports.default = DeviceUrlInterceptor;","map":null,"metadata":{},"sourceType":"script"}