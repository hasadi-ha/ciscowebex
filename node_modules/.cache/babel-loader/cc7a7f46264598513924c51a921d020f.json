{"ast":null,"code":"/*!\n * util/utf8.js - Implementation of UTF-8 Encoder/Decoder\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\"use strict\";\n\nvar partialRight = require(\"lodash.partialright\"),\n    merge = require(\"lodash.merge\");\n\nvar typedArrayCtors = function () {\n  var ctors = [];\n\n  if (\"undefined\" !== typeof Uint8ClampedArray) {\n    ctors.push(Uint8ClampedArray);\n  }\n\n  if (\"undefined\" !== typeof Uint8Array) {\n    ctors.push(Uint8Array);\n  }\n\n  if (\"undefined\" !== typeof Uint16Array) {\n    ctors.push(Uint16Array);\n  }\n\n  if (\"undefined\" !== typeof Uint32Array) {\n    ctors.push(Uint32Array);\n  }\n\n  if (\"undefined\" !== typeof Float32Array) {\n    ctors.push(Float32Array);\n  }\n\n  if (\"undefined\" !== typeof Float64Array) {\n    ctors.push(Float64Array);\n  }\n\n  return ctors;\n}();\n\nfunction findTypedArrayFor(ta) {\n  var ctor;\n\n  for (var idx = 0; !ctor && typedArrayCtors.length > idx; idx++) {\n    if (ta instanceof typedArrayCtors[idx]) {\n      ctor = typedArrayCtors[idx];\n    }\n  }\n\n  return ctor;\n}\n\nfunction mergeBuffer(a, b) {\n  // TODO: should this be a copy, or the reference itself?\n  if (Buffer.isBuffer(b)) {\n    b = new Buffer(b);\n  } else {\n    var Ctor = findTypedArrayFor(b);\n    b = Ctor ? new Ctor(b, b.byteOffset, b.byteLength) : undefined;\n  } // TODO: QUESTION: create a merged <whatever-a-is>??\n  // for now, a is b\n\n\n  a = b;\n  return b;\n}\n\nmodule.exports = partialRight(merge, mergeBuffer);","map":null,"metadata":{},"sourceType":"script"}