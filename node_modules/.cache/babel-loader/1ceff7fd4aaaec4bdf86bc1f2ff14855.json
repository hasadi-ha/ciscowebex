{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _isNan = require('babel-runtime/core-js/number/is-nan');\n\nvar _isNan2 = _interopRequireDefault(_isNan);\n\nvar _apply = require('babel-runtime/core-js/reflect/apply');\n\nvar _apply2 = _interopRequireDefault(_apply);\n\nvar _isObject2 = require('lodash/isObject');\n\nvar _isObject3 = _interopRequireDefault(_isObject2);\n\nvar _defaults2 = require('lodash/defaults');\n\nvar _defaults3 = _interopRequireDefault(_defaults2);\n\nvar _ampersandState = require('ampersand-state');\n\nvar _ampersandState2 = _interopRequireDefault(_ampersandState);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar FeatureModel = _ampersandState2.default.extend({\n  props: {\n    key: 'string',\n    lastModified: 'date',\n    mutable: 'boolean',\n    type: 'string',\n    val: 'string',\n    value: 'any'\n  },\n  constructor: function constructor(attrs, options) {\n    options = options || {};\n    (0, _defaults3.default)(options, {\n      parse: true\n    });\n    return (0, _apply2.default)(_ampersandState2.default.prototype.constructor, this, [attrs, options]);\n  },\n  idAttribute: 'key',\n  parse: function parse(attrs) {\n    if (!attrs) {\n      return {};\n    }\n\n    var num = Number(attrs.val);\n\n    if (attrs.val && !(0, _isNan2.default)(num)) {\n      // Handle numbers.\n      attrs.value = num;\n      attrs.type = 'number';\n    } // Handle booleans.\n    else if (attrs.val === 'true') {\n        attrs.value = true;\n        attrs.type = 'boolean';\n      } else if (attrs.val === 'false') {\n        attrs.value = false;\n        attrs.type = 'boolean';\n      } // It must be a string, so return it.\n      else {\n          attrs.value = attrs.val;\n          attrs.type = 'string';\n        }\n\n    return attrs;\n  },\n  serialize: function serialize() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var attrs = (0, _apply2.default)(_ampersandState2.default.prototype.serialize, this, args);\n\n    if (attrs.lastModified) {\n      attrs.lastModified = new Date(attrs.lastModified).toISOString();\n    }\n\n    return attrs;\n  },\n  // Override set to make sure we always run features through parse()\n  // See https://github.com/AmpersandJS/ampersand-state/issues/146 for related\n  // bug\n  set: function set(key, value, options) {\n    var attrs = void 0; // Handle both `\"key\", value` and `{key: value}` -style arguments.\n    // The next block is a direct copy from ampersand-state, so no need to test\n    // both scenarios.\n\n    /* istanbul ignore next */\n\n    if ((0, _isObject3.default)(key) || key === null) {\n      attrs = key;\n      options = value;\n    } else {\n      attrs = {};\n      attrs[key] = value;\n    }\n\n    attrs = this.parse(attrs, options);\n    return (0, _apply2.default)(_ampersandState2.default.prototype.set, this, [attrs, options]);\n  }\n});\n/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nexports.default = FeatureModel;","map":null,"metadata":{},"sourceType":"script"}