{"ast":null,"code":"var assign = require('lodash/assign'); /// Following code is largely pasted from Backbone.js\n// Helper function to correctly set up the prototype chain, for subclasses.\n// Similar to `goog.inherits`, but uses a hash of prototype properties and\n// class properties to be extended.\n\n\nvar extend = function (protoProps) {\n  var parent = this;\n  var child;\n  var args = [].slice.call(arguments); // The constructor function for the new subclass is either defined by you\n  // (the \"constructor\" property in your `extend` definition), or defaulted\n  // by us to simply call the parent's constructor.\n\n  if (protoProps && protoProps.hasOwnProperty('constructor')) {\n    child = protoProps.constructor;\n  } else {\n    child = function () {\n      return parent.apply(this, arguments);\n    };\n  } // Add static properties to the constructor function from parent\n\n\n  assign(child, parent); // Set the prototype chain to inherit from `parent`, without calling\n  // `parent`'s constructor function.\n\n  var Surrogate = function () {\n    this.constructor = child;\n  };\n\n  Surrogate.prototype = parent.prototype;\n  child.prototype = new Surrogate(); // Mix in all prototype properties to the subclass if supplied.\n\n  if (protoProps) {\n    args.unshift(child.prototype);\n    assign.apply(null, args);\n  } // Set a convenience property in case the parent's prototype is needed\n  // later.\n\n\n  child.__super__ = parent.prototype;\n  return child;\n}; // Expose the extend function\n\n\nmodule.exports = extend;","map":null,"metadata":{},"sourceType":"script"}