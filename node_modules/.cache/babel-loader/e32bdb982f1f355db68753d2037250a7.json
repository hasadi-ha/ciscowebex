{"ast":null,"code":"/**!\n * lib/index.js -- SCR Implementation\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\"use strict\";\n\nvar clone = require(\"lodash.clone\"),\n    jose = require(\"node-jose\");\n\nfunction SCRObject(cfg) {\n  cfg.loc = cfg.loc || undefined;\n  cfg.tag = cfg.tag || undefined;\n  Object.defineProperty(this, \"enc\", {\n    get: function () {\n      return cfg.enc;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"key\", {\n    get: function () {\n      return cfg.key;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"iv\", {\n    get: function () {\n      return cfg.iv;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"aad\", {\n    get: function () {\n      return cfg.aad;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"loc\", {\n    get: function () {\n      return cfg.loc;\n    },\n    set: function (loc) {\n      cfg.loc = loc;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"tag\", {\n    get: function () {\n      return cfg.tag;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"toJSON\", {\n    value: function () {\n      var key = cfg.key.get(\"k\", true);\n      var data = {};\n      data.enc = cfg.enc;\n      data.key = jose.util.base64url.encode(key);\n      data.iv = jose.util.base64url.encode(cfg.iv);\n      data.aad = cfg.aad;\n\n      if (cfg.loc) {\n        data.loc = cfg.loc;\n      }\n\n      if (cfg.tag) {\n        data.tag = jose.util.base64url.encode(cfg.tag);\n      }\n\n      return data;\n    }\n  });\n  Object.defineProperty(this, \"toJWE\", {\n    value: function (jwk) {\n      var self = this,\n          promise;\n      promise = jose.JWK.asKey(jwk);\n      promise = promise.then(function (jwk) {\n        var rcpt = {\n          header: {\n            alg: \"dir\"\n          },\n          key: jwk,\n          reference: false\n        };\n        var opts = {\n          compact: true,\n          contentAlg: cfg.enc\n        };\n        var data = self.toJSON();\n        data = JSON.stringify(data);\n        return jose.JWE.createEncrypt(opts, rcpt).final(data, \"utf8\");\n      });\n      return promise;\n    }\n  });\n  Object.defineProperty(this, \"encrypt\", {\n    value: function (pdata) {\n      var props = {\n        iv: cfg.iv,\n        adata: new Buffer(cfg.aad, \"utf8\")\n      }; // condition the data before encrypting\n\n      pdata = jose.util.asBuffer(pdata);\n      return cfg.key.encrypt(cfg.enc, pdata, props).then(function (result) {\n        var cdata = result.data;\n        cfg.tag = result.tag;\n        return cdata;\n      });\n    }\n  });\n  Object.defineProperty(this, \"decrypt\", {\n    value: function (cdata) {\n      var props = {\n        iv: cfg.iv,\n        adata: new Buffer(cfg.aad, \"utf8\"),\n        mac: cfg.tag\n      }; // condition data before decrypting\n\n      cdata = jose.util.asBuffer(cdata);\n      return cfg.key.decrypt(cfg.enc, cdata, props).then(function (pdata) {\n        return pdata;\n      });\n    }\n  });\n}\n\nvar SCR = {\n  create: function () {\n    // TODO: make this more configurable\n    // TODO: abstract away forge??\n    var iv = jose.util.randomBytes(12);\n    var aad = new Date().toISOString();\n    var keystore = jose.JWK.createKeyStore();\n    var promise = keystore.generate(\"oct\", 256);\n    promise = promise.then(function (key) {\n      return new SCRObject({\n        enc: \"A256GCM\",\n        key: key,\n        iv: iv,\n        aad: aad\n      });\n    });\n    return promise;\n  },\n  fromJWE: function (jwk, jwe) {\n    var promise;\n    promise = jose.JWK.asKey(jwk);\n    promise = promise.then(function (jwk) {\n      return jose.JWE.createDecrypt(jwk).decrypt(jwe);\n    });\n    promise = promise.then(function (result) {\n      result = result.plaintext.toString(\"utf8\");\n      result = JSON.parse(result);\n      return SCR.fromJSON(result);\n    });\n    return promise;\n  },\n  fromJSON: function (json) {\n    // create a copy to mitigate tampering\n    var cfg = clone(json);\n    var promise;\n\n    if (json.key) {\n      promise = jose.JWK.asKey({\n        kty: \"oct\",\n        k: json.key\n      });\n    } else {\n      promise = Promise.resolve();\n    }\n\n    promise = promise.then(function (key) {\n      if (key) {\n        cfg.key = key;\n      }\n\n      if (\"iv\" in cfg) {\n        cfg.iv = Buffer.isBuffer(cfg.iv) ? cfg.iv : jose.util.base64url.decode(cfg.iv);\n      }\n\n      if (\"tag\" in cfg) {\n        cfg.tag = Buffer.isBuffer(cfg.tag) ? cfg.tag : jose.util.base64url.decode(cfg.tag);\n      }\n\n      return new SCRObject(cfg);\n    });\n    return promise;\n  }\n};\nmodule.exports = SCR;","map":null,"metadata":{},"sourceType":"script"}