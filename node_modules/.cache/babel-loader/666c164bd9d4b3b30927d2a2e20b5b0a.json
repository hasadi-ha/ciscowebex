{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _defineProperty = require('babel-runtime/core-js/reflect/define-property');\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _union2 = require('lodash/union');\n\nvar _union3 = _interopRequireDefault(_union2);\n\nvar _merge2 = require('lodash/merge');\n\nvar _merge3 = _interopRequireDefault(_merge2);\n\nvar _isFunction2 = require('lodash/isFunction');\n\nvar _isFunction3 = _interopRequireDefault(_isFunction2);\n\nvar _isArray2 = require('lodash/isArray');\n\nvar _isArray3 = _interopRequireDefault(_isArray2);\n\nvar _has2 = require('lodash/has');\n\nvar _has3 = _interopRequireDefault(_has2);\n\nvar _get2 = require('lodash/get');\n\nvar _get3 = _interopRequireDefault(_get2);\n\nexports.default = mixinSparkCorePlugins;\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Mixes a plugin system into an AmpState object (specifically, into SparkCore)\n * @param {AmpState} State\n * @param {Object} config\n * @param {Object} interceptors\n * @returns {AmpState}\n */\n\n/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nfunction mixinSparkCorePlugins(State, config, interceptors) {\n  // eslint-disable-next-line complexity\n  State.registerPlugin = function registerPlugin(name, constructor) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (State.prototype._children[name] && !options.replace) {\n      return;\n    }\n\n    State.prototype._children[name] = constructor;\n\n    if (options.proxies) {\n      options.proxies.forEach(function (key) {\n        createDerivedProperty(State.prototype, key, {\n          deps: [name + '.' + key],\n          fn: function fn() {\n            return this[name][key];\n          }\n        });\n      });\n    }\n\n    if (options.interceptors) {\n      (0, _keys2.default)(options.interceptors).forEach(function (key) {\n        interceptors[key] = options.interceptors[key];\n      });\n    }\n\n    if (options.config) {\n      (0, _merge3.default)(config, options.config);\n    }\n\n    if ((0, _has3.default)(options, 'payloadTransformer.predicates')) {\n      config.payloadTransformer.predicates = config.payloadTransformer.predicates.concat((0, _get3.default)(options, 'payloadTransformer.predicates'));\n    }\n\n    if ((0, _has3.default)(options, 'payloadTransformer.transforms')) {\n      config.payloadTransformer.transforms = config.payloadTransformer.transforms.concat((0, _get3.default)(options, 'payloadTransformer.transforms'));\n    }\n\n    if (options.onBeforeLogout) {\n      config.onBeforeLogout = config.onBeforeLogout || [];\n      var onBeforeLogout = (0, _isArray3.default)(options.onBeforeLogout) ? options.onBeforeLogout : [options.onBeforeLogout];\n      onBeforeLogout.forEach(function (fn) {\n        return config.onBeforeLogout.push({\n          plugin: name,\n          fn: fn\n        });\n      });\n    } // Only mess with the plugin's derived properties if it's an amp-state plugin\n\n\n    if (constructor.prototype._definition && constructor.prototype._definition.ready) {\n      var _State$prototype$_der = State.prototype._derived.ready,\n          fn = _State$prototype$_der.fn,\n          depList = _State$prototype$_der.depList;\n      var def = {\n        deps: depList.concat(name + '.ready'),\n        fn: fn\n      };\n      createDerivedProperty(State.prototype, 'ready', def);\n    }\n  };\n\n  return State;\n}\n/**\n * Extracted from ampersand-state\n * @param {Object} modelProto\n * @param {string} name\n * @param {Object} definition\n * @private\n * @returns {undefined}\n */\n\n\nfunction createDerivedProperty(modelProto, name, definition) {\n  var def = modelProto._derived[name] = {\n    fn: (0, _isFunction3.default)(definition) ? definition : definition.fn,\n    cache: definition.cache !== false,\n    depList: definition.deps || []\n  }; // add to our shared dependency list\n\n  def.depList.forEach(function (dep) {\n    modelProto._deps[dep] = (0, _union3.default)(modelProto._deps[dep] || [], [name]);\n  }); // defined a top-level getter for derived names\n\n  (0, _defineProperty2.default)(modelProto, name, {\n    get: function get() {\n      return this._getDerivedProperty(name);\n    },\n    set: function set() {\n      throw new TypeError('`' + name + '` is a derived property, it can\\'t be set directly.');\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"script"}