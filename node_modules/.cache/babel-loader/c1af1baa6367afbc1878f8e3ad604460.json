{"ast":null,"code":"/*!\n * algorithms/ec-util.js - Elliptic Curve Utility Functions\n *\n * Copyright (c) 2015 Cisco Systems, Inc.  See LICENSE file.\n */\n\"use strict\";\n\nvar clone = require(\"lodash.clone\"),\n    ecc = require(\"../deps/ecc\"),\n    forge = require(\"../deps/forge.js\"),\n    util = require(\"../util\");\n\nvar EC_KEYSIZES = {\n  \"P-256\": 256,\n  \"P-384\": 384,\n  \"P-521\": 521\n};\n\nfunction convertToForge(key, isPublic) {\n  var parts = isPublic ? [\"x\", \"y\"] : [\"d\"];\n  parts = parts.map(function (f) {\n    return new forge.jsbn.BigInteger(key[f].toString(\"hex\"), 16);\n  }); // prefix with curve\n\n  parts = [key.crv].concat(parts);\n  var fn = isPublic ? ecc.asPublicKey : ecc.asPrivateKey;\n  return fn.apply(ecc, parts);\n}\n\nfunction convertToJWK(key, isPublic) {\n  var result = clone(key);\n  var parts = isPublic ? [\"x\", \"y\"] : [\"x\", \"y\", \"d\"];\n  parts.forEach(function (f) {\n    result[f] = util.base64url.encode(result[f]);\n  }); // remove potentially troublesome properties\n\n  delete result.key_ops;\n  delete result.use;\n  delete result.alg;\n\n  if (isPublic) {\n    delete result.d;\n  }\n\n  return result;\n}\n\nfunction convertToObj(key, isPublic) {\n  var result = clone(key);\n  var parts = isPublic ? [\"x\", \"y\"] : [\"d\"];\n  parts.forEach(function (f) {\n    // assume string if base64url-encoded\n    result[f] = util.asBuffer(result[f], \"base64url\");\n  });\n  return result;\n}\n\nvar UNCOMPRESSED = new Buffer([0x04]);\n\nfunction convertToBuffer(key, isPublic) {\n  key = convertToObj(key, isPublic);\n  var result = isPublic ? Buffer.concat([UNCOMPRESSED, key.x, key.y]) : key.d;\n  return result;\n}\n\nfunction curveSize(crv) {\n  return EC_KEYSIZES[crv || \"\"] || NaN;\n}\n\nmodule.exports = {\n  convertToForge: convertToForge,\n  convertToJWK: convertToJWK,\n  convertToObj: convertToObj,\n  convertToBuffer: convertToBuffer,\n  curveSize: curveSize\n};","map":null,"metadata":{},"sourceType":"script"}