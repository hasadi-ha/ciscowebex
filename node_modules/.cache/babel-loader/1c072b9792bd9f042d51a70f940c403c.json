{"ast":null,"code":"/*!\n * algorithms/rsassa.js - RSA Signatures\n *\n * Copyright (c) 2015 Cisco Systems, Inc.  See LICENSE file.\n */\n\"use strict\";\n\nvar forge = require(\"../deps/forge.js\"),\n    helpers = require(\"./helpers.js\"),\n    DataBuffer = require(\"../util/databuffer.js\"),\n    rsaUtil = require(\"./rsa-util.js\"); // ### RSAES-PKCS1-v1_5\n// ### RSAES-OAEP\n\n\nfunction rsaesEncryptFn(name) {\n  var alg = {\n    name: name\n  };\n\n  if (\"RSA-OAEP-256\" === name) {\n    alg.name = \"RSA-OAEP\";\n    alg.hash = {\n      name: \"SHA-256\"\n    };\n  } else if (\"RSA-OAEP\" === name) {\n    alg.hash = {\n      name: \"SHA-1\"\n    };\n  } else {\n    alg.name = \"RSAES-PKCS1-v1_5\";\n  } // ### Fallback Implementation -- uses forge\n\n\n  var fallback = function (key, pdata) {\n    // convert pdata to byte string\n    pdata = new DataBuffer(pdata).bytes(); // encrypt it\n\n    var pki = rsaUtil.convertToForge(key, true),\n        params = {};\n\n    if (\"RSA-OAEP\" === alg.name) {\n      params.md = alg.hash.name.toLowerCase().replace(/\\-/g, \"\");\n      params.md = forge.md[params.md].create();\n    }\n\n    var cdata = pki.encrypt(pdata, alg.name.toUpperCase(), params); // convert cdata to Buffer\n\n    cdata = new DataBuffer(cdata).native();\n    return Promise.resolve({\n      data: cdata\n    });\n  }; // ### WebCryptoAPI Implementation\n\n\n  var webcrypto;\n\n  if (\"RSAES-PKCS1-v1_5\" !== alg.name) {\n    webcrypto = function (key, pdata) {\n      key = rsaUtil.convertToJWK(key, true);\n      var promise;\n      promise = helpers.subtleCrypto.importKey(\"jwk\", key, alg, true, [\"encrypt\"]);\n      promise = promise.then(function (key) {\n        return helpers.subtleCrypto.encrypt(alg, key, pdata);\n      });\n      promise = promise.then(function (result) {\n        var cdata = new Buffer(result);\n        return {\n          data: cdata\n        };\n      });\n      return promise;\n    };\n  } else {\n    webcrypto = null;\n  }\n\n  return helpers.setupFallback(null, webcrypto, fallback);\n}\n\nfunction rsaesDecryptFn(name) {\n  var alg = {\n    name: name\n  };\n\n  if (\"RSA-OAEP-256\" === name) {\n    alg.name = \"RSA-OAEP\";\n    alg.hash = {\n      name: \"SHA-256\"\n    };\n  } else if (\"RSA-OAEP\" === name) {\n    alg.hash = {\n      name: \"SHA-1\"\n    };\n  } else {\n    alg.name = \"RSAES-PKCS1-v1_5\";\n  } // ### Fallback Implementation -- uses forge\n\n\n  var fallback = function (key, cdata) {\n    // convert cdata to byte string\n    cdata = new DataBuffer(cdata).bytes(); // decrypt it\n\n    var pki = rsaUtil.convertToForge(key, false),\n        params = {};\n\n    if (\"RSA-OAEP\" === alg.name) {\n      params.md = alg.hash.name.toLowerCase().replace(/\\-/g, \"\");\n      params.md = forge.md[params.md].create();\n    }\n\n    var pdata = pki.decrypt(cdata, alg.name.toUpperCase(), params); // convert pdata to Buffer\n\n    pdata = new DataBuffer(pdata).native();\n    return Promise.resolve(pdata);\n  }; // ### WebCryptoAPI Implementation\n\n\n  var webcrypto;\n\n  if (\"RSAES-PKCS1-v1_5\" !== alg.name) {\n    webcrypto = function (key, pdata) {\n      key = rsaUtil.convertToJWK(key, false);\n      var promise;\n      promise = helpers.subtleCrypto.importKey(\"jwk\", key, alg, true, [\"decrypt\"]);\n      promise = promise.then(function (key) {\n        return helpers.subtleCrypto.decrypt(alg, key, pdata);\n      });\n      promise = promise.then(function (result) {\n        var pdata = new Buffer(result);\n        return pdata;\n      });\n      return promise;\n    };\n  } else {\n    webcrypto = null;\n  }\n\n  var nodejs;\n\n  if (helpers.nodeCrypto && name === \"RSA-OAEP\") {\n    // node only support SHA1, plain RSA-OAEP\n    nodejs = function (key, pdata) {\n      key = rsaUtil.convertToPem(key, false);\n      return helpers.nodeCrypto.privateDecrypt(key, pdata);\n    };\n  }\n\n  return helpers.setupFallback(nodejs, webcrypto, fallback);\n} // ### Public API\n// * [name].encrypt\n// * [name].decrypt\n\n\nvar rsaes = {};\n[\"RSA-OAEP\", \"RSA-OAEP-256\", \"RSA1_5\"].forEach(function (name) {\n  rsaes[name] = {\n    encrypt: rsaesEncryptFn(name),\n    decrypt: rsaesDecryptFn(name)\n  };\n});\nmodule.exports = rsaes;","map":null,"metadata":{},"sourceType":"script"}