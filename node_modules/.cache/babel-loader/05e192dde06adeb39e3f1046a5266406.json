{"ast":null,"code":"'use strict'; // Last Updated On: 2019-01-10 5:32:55 AM UTC\n// ________________\n// DetectRTC v1.3.9\n// Open-Sourced: https://github.com/muaz-khan/DetectRTC\n// --------------------------------------------------\n// Muaz Khan     - www.MuazKhan.com\n// MIT License   - www.WebRTC-Experiment.com/licence\n// --------------------------------------------------\n\n(function () {\n  var browserFakeUserAgent = 'Fake/5.0 (FakeOS) AppleWebKit/123 (KHTML, like Gecko) Fake/12.3.4567.89 Fake/123.45';\n  var isNodejs = typeof process === 'object' && typeof process.versions === 'object' && process.versions.node &&\n  /*node-process*/\n  !process.browser;\n\n  if (isNodejs) {\n    var version = process.versions.node.toString().replace('v', '');\n    browserFakeUserAgent = 'Nodejs/' + version + ' (NodeOS) AppleWebKit/' + version + ' (KHTML, like Gecko) Nodejs/' + version + ' Nodejs/' + version;\n  }\n\n  (function (that) {\n    if (typeof window !== 'undefined') {\n      return;\n    }\n\n    if (typeof window === 'undefined' && typeof global !== 'undefined') {\n      global.navigator = {\n        userAgent: browserFakeUserAgent,\n        getUserMedia: function () {}\n      };\n      /*global window:true */\n\n      that.window = global;\n    } else if (typeof window === 'undefined') {// window = this;\n    }\n\n    if (typeof location === 'undefined') {\n      /*global location:true */\n      that.location = {\n        protocol: 'file:',\n        href: '',\n        hash: ''\n      };\n    }\n\n    if (typeof screen === 'undefined') {\n      /*global screen:true */\n      that.screen = {\n        width: 0,\n        height: 0\n      };\n    }\n  })(typeof global !== 'undefined' ? global : window);\n  /*global navigator:true */\n\n\n  var navigator = window.navigator;\n\n  if (typeof navigator !== 'undefined') {\n    if (typeof navigator.webkitGetUserMedia !== 'undefined') {\n      navigator.getUserMedia = navigator.webkitGetUserMedia;\n    }\n\n    if (typeof navigator.mozGetUserMedia !== 'undefined') {\n      navigator.getUserMedia = navigator.mozGetUserMedia;\n    }\n  } else {\n    navigator = {\n      getUserMedia: function () {},\n      userAgent: browserFakeUserAgent\n    };\n  }\n\n  var isMobileDevice = !!/Android|webOS|iPhone|iPad|iPod|BB10|BlackBerry|IEMobile|Opera Mini|Mobile|mobile/i.test(navigator.userAgent || '');\n  var isEdge = navigator.userAgent.indexOf('Edge') !== -1 && (!!navigator.msSaveOrOpenBlob || !!navigator.msSaveBlob);\n  var isOpera = !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;\n  var isFirefox = typeof window.InstallTrigger !== 'undefined';\n  var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n  var isChrome = !!window.chrome && !isOpera;\n  var isIE = typeof document !== 'undefined' && !!document.documentMode && !isEdge; // this one can also be used:\n  // https://www.websocket.org/js/stuff.js (DetectBrowser.js)\n\n  function getBrowserInfo() {\n    var nVer = navigator.appVersion;\n    var nAgt = navigator.userAgent;\n    var browserName = navigator.appName;\n    var fullVersion = '' + parseFloat(navigator.appVersion);\n    var majorVersion = parseInt(navigator.appVersion, 10);\n    var nameOffset, verOffset, ix; // both and safri and chrome has same userAgent\n\n    if (isSafari && !isChrome && nAgt.indexOf('CriOS') !== -1) {\n      isSafari = false;\n      isChrome = true;\n    } // In Opera, the true version is after 'Opera' or after 'Version'\n\n\n    if (isOpera) {\n      browserName = 'Opera';\n\n      try {\n        fullVersion = navigator.userAgent.split('OPR/')[1].split(' ')[0];\n        majorVersion = fullVersion.split('.')[0];\n      } catch (e) {\n        fullVersion = '0.0.0.0';\n        majorVersion = 0;\n      }\n    } // In MSIE version <=10, the true version is after 'MSIE' in userAgent\n    // In IE 11, look for the string after 'rv:'\n    else if (isIE) {\n        verOffset = nAgt.indexOf('rv:');\n\n        if (verOffset > 0) {\n          //IE 11\n          fullVersion = nAgt.substring(verOffset + 3);\n        } else {\n          //IE 10 or earlier\n          verOffset = nAgt.indexOf('MSIE');\n          fullVersion = nAgt.substring(verOffset + 5);\n        }\n\n        browserName = 'IE';\n      } // In Chrome, the true version is after 'Chrome' \n      else if (isChrome) {\n          verOffset = nAgt.indexOf('Chrome');\n          browserName = 'Chrome';\n          fullVersion = nAgt.substring(verOffset + 7);\n        } // In Safari, the true version is after 'Safari' or after 'Version' \n        else if (isSafari) {\n            verOffset = nAgt.indexOf('Safari');\n            browserName = 'Safari';\n            fullVersion = nAgt.substring(verOffset + 7);\n\n            if ((verOffset = nAgt.indexOf('Version')) !== -1) {\n              fullVersion = nAgt.substring(verOffset + 8);\n            }\n\n            if (navigator.userAgent.indexOf('Version/') !== -1) {\n              fullVersion = navigator.userAgent.split('Version/')[1].split(' ')[0];\n            }\n          } // In Firefox, the true version is after 'Firefox' \n          else if (isFirefox) {\n              verOffset = nAgt.indexOf('Firefox');\n              browserName = 'Firefox';\n              fullVersion = nAgt.substring(verOffset + 8);\n            } // In most other browsers, 'name/version' is at the end of userAgent \n            else if ((nameOffset = nAgt.lastIndexOf(' ') + 1) < (verOffset = nAgt.lastIndexOf('/'))) {\n                browserName = nAgt.substring(nameOffset, verOffset);\n                fullVersion = nAgt.substring(verOffset + 1);\n\n                if (browserName.toLowerCase() === browserName.toUpperCase()) {\n                  browserName = navigator.appName;\n                }\n              }\n\n    if (isEdge) {\n      browserName = 'Edge';\n      fullVersion = navigator.userAgent.split('Edge/')[1]; // fullVersion = parseInt(navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)[2], 10).toString();\n    } // trim the fullVersion string at semicolon/space/bracket if present\n\n\n    if ((ix = fullVersion.search(/[; \\)]/)) !== -1) {\n      fullVersion = fullVersion.substring(0, ix);\n    }\n\n    majorVersion = parseInt('' + fullVersion, 10);\n\n    if (isNaN(majorVersion)) {\n      fullVersion = '' + parseFloat(navigator.appVersion);\n      majorVersion = parseInt(navigator.appVersion, 10);\n    }\n\n    return {\n      fullVersion: fullVersion,\n      version: majorVersion,\n      name: browserName,\n      isPrivateBrowsing: false\n    };\n  } // via: https://gist.github.com/cou929/7973956\n\n\n  function retry(isDone, next) {\n    var currentTrial = 0,\n        maxRetry = 50,\n        interval = 10,\n        isTimeout = false;\n    var id = window.setInterval(function () {\n      if (isDone()) {\n        window.clearInterval(id);\n        next(isTimeout);\n      }\n\n      if (currentTrial++ > maxRetry) {\n        window.clearInterval(id);\n        isTimeout = true;\n        next(isTimeout);\n      }\n    }, 10);\n  }\n\n  function isIE10OrLater(userAgent) {\n    var ua = userAgent.toLowerCase();\n\n    if (ua.indexOf('msie') === 0 && ua.indexOf('trident') === 0) {\n      return false;\n    }\n\n    var match = /(?:msie|rv:)\\s?([\\d\\.]+)/.exec(ua);\n\n    if (match && parseInt(match[1], 10) >= 10) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function detectPrivateMode(callback) {\n    var isPrivate;\n\n    try {\n      if (window.webkitRequestFileSystem) {\n        window.webkitRequestFileSystem(window.TEMPORARY, 1, function () {\n          isPrivate = false;\n        }, function (e) {\n          isPrivate = true;\n        });\n      } else if (window.indexedDB && /Firefox/.test(window.navigator.userAgent)) {\n        var db;\n\n        try {\n          db = window.indexedDB.open('test');\n\n          db.onerror = function () {\n            return true;\n          };\n        } catch (e) {\n          isPrivate = true;\n        }\n\n        if (typeof isPrivate === 'undefined') {\n          retry(function isDone() {\n            return db.readyState === 'done' ? true : false;\n          }, function next(isTimeout) {\n            if (!isTimeout) {\n              isPrivate = db.result ? false : true;\n            }\n          });\n        }\n      } else if (isIE10OrLater(window.navigator.userAgent)) {\n        isPrivate = false;\n\n        try {\n          if (!window.indexedDB) {\n            isPrivate = true;\n          }\n        } catch (e) {\n          isPrivate = true;\n        }\n      } else if (window.localStorage && /Safari/.test(window.navigator.userAgent)) {\n        try {\n          window.localStorage.setItem('test', 1);\n        } catch (e) {\n          isPrivate = true;\n        }\n\n        if (typeof isPrivate === 'undefined') {\n          isPrivate = false;\n          window.localStorage.removeItem('test');\n        }\n      }\n    } catch (e) {\n      isPrivate = false;\n    }\n\n    retry(function isDone() {\n      return typeof isPrivate !== 'undefined' ? true : false;\n    }, function next(isTimeout) {\n      callback(isPrivate);\n    });\n  }\n\n  var isMobile = {\n    Android: function () {\n      return navigator.userAgent.match(/Android/i);\n    },\n    BlackBerry: function () {\n      return navigator.userAgent.match(/BlackBerry|BB10/i);\n    },\n    iOS: function () {\n      return navigator.userAgent.match(/iPhone|iPad|iPod/i);\n    },\n    Opera: function () {\n      return navigator.userAgent.match(/Opera Mini/i);\n    },\n    Windows: function () {\n      return navigator.userAgent.match(/IEMobile/i);\n    },\n    any: function () {\n      return isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows();\n    },\n    getOsName: function () {\n      var osName = 'Unknown OS';\n\n      if (isMobile.Android()) {\n        osName = 'Android';\n      }\n\n      if (isMobile.BlackBerry()) {\n        osName = 'BlackBerry';\n      }\n\n      if (isMobile.iOS()) {\n        osName = 'iOS';\n      }\n\n      if (isMobile.Opera()) {\n        osName = 'Opera Mini';\n      }\n\n      if (isMobile.Windows()) {\n        osName = 'Windows';\n      }\n\n      return osName;\n    }\n  }; // via: http://jsfiddle.net/ChristianL/AVyND/\n\n  function detectDesktopOS() {\n    var unknown = '-';\n    var nVer = navigator.appVersion;\n    var nAgt = navigator.userAgent;\n    var os = unknown;\n    var clientStrings = [{\n      s: 'Windows 10',\n      r: /(Windows 10.0|Windows NT 10.0)/\n    }, {\n      s: 'Windows 8.1',\n      r: /(Windows 8.1|Windows NT 6.3)/\n    }, {\n      s: 'Windows 8',\n      r: /(Windows 8|Windows NT 6.2)/\n    }, {\n      s: 'Windows 7',\n      r: /(Windows 7|Windows NT 6.1)/\n    }, {\n      s: 'Windows Vista',\n      r: /Windows NT 6.0/\n    }, {\n      s: 'Windows Server 2003',\n      r: /Windows NT 5.2/\n    }, {\n      s: 'Windows XP',\n      r: /(Windows NT 5.1|Windows XP)/\n    }, {\n      s: 'Windows 2000',\n      r: /(Windows NT 5.0|Windows 2000)/\n    }, {\n      s: 'Windows ME',\n      r: /(Win 9x 4.90|Windows ME)/\n    }, {\n      s: 'Windows 98',\n      r: /(Windows 98|Win98)/\n    }, {\n      s: 'Windows 95',\n      r: /(Windows 95|Win95|Windows_95)/\n    }, {\n      s: 'Windows NT 4.0',\n      r: /(Windows NT 4.0|WinNT4.0|WinNT|Windows NT)/\n    }, {\n      s: 'Windows CE',\n      r: /Windows CE/\n    }, {\n      s: 'Windows 3.11',\n      r: /Win16/\n    }, {\n      s: 'Android',\n      r: /Android/\n    }, {\n      s: 'Open BSD',\n      r: /OpenBSD/\n    }, {\n      s: 'Sun OS',\n      r: /SunOS/\n    }, {\n      s: 'Linux',\n      r: /(Linux|X11)/\n    }, {\n      s: 'iOS',\n      r: /(iPhone|iPad|iPod)/\n    }, {\n      s: 'Mac OS X',\n      r: /Mac OS X/\n    }, {\n      s: 'Mac OS',\n      r: /(MacPPC|MacIntel|Mac_PowerPC|Macintosh)/\n    }, {\n      s: 'QNX',\n      r: /QNX/\n    }, {\n      s: 'UNIX',\n      r: /UNIX/\n    }, {\n      s: 'BeOS',\n      r: /BeOS/\n    }, {\n      s: 'OS/2',\n      r: /OS\\/2/\n    }, {\n      s: 'Search Bot',\n      r: /(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask Jeeves\\/Teoma|ia_archiver)/\n    }];\n\n    for (var i = 0, cs; cs = clientStrings[i]; i++) {\n      if (cs.r.test(nAgt)) {\n        os = cs.s;\n        break;\n      }\n    }\n\n    var osVersion = unknown;\n\n    if (/Windows/.test(os)) {\n      if (/Windows (.*)/.test(os)) {\n        osVersion = /Windows (.*)/.exec(os)[1];\n      }\n\n      os = 'Windows';\n    }\n\n    switch (os) {\n      case 'Mac OS X':\n        if (/Mac OS X (10[\\.\\_\\d]+)/.test(nAgt)) {\n          osVersion = /Mac OS X (10[\\.\\_\\d]+)/.exec(nAgt)[1];\n        }\n\n        break;\n\n      case 'Android':\n        if (/Android ([\\.\\_\\d]+)/.test(nAgt)) {\n          osVersion = /Android ([\\.\\_\\d]+)/.exec(nAgt)[1];\n        }\n\n        break;\n\n      case 'iOS':\n        if (/OS (\\d+)_(\\d+)_?(\\d+)?/.test(nAgt)) {\n          osVersion = /OS (\\d+)_(\\d+)_?(\\d+)?/.exec(nVer);\n          osVersion = osVersion[1] + '.' + osVersion[2] + '.' + (osVersion[3] | 0);\n        }\n\n        break;\n    }\n\n    return {\n      osName: os,\n      osVersion: osVersion\n    };\n  }\n\n  var osName = 'Unknown OS';\n  var osVersion = 'Unknown OS Version';\n\n  function getAndroidVersion(ua) {\n    ua = (ua || navigator.userAgent).toLowerCase();\n    var match = ua.match(/android\\s([0-9\\.]*)/);\n    return match ? match[1] : false;\n  }\n\n  var osInfo = detectDesktopOS();\n\n  if (osInfo && osInfo.osName && osInfo.osName != '-') {\n    osName = osInfo.osName;\n    osVersion = osInfo.osVersion;\n  } else if (isMobile.any()) {\n    osName = isMobile.getOsName();\n\n    if (osName == 'Android') {\n      osVersion = getAndroidVersion();\n    }\n  }\n\n  var isNodejs = typeof process === 'object' && typeof process.versions === 'object' && process.versions.node;\n\n  if (osName === 'Unknown OS' && isNodejs) {\n    osName = 'Nodejs';\n    osVersion = process.versions.node.toString().replace('v', '');\n  }\n\n  var isCanvasSupportsStreamCapturing = false;\n  var isVideoSupportsStreamCapturing = false;\n  ['captureStream', 'mozCaptureStream', 'webkitCaptureStream'].forEach(function (item) {\n    if (typeof document === 'undefined' || typeof document.createElement !== 'function') {\n      return;\n    }\n\n    if (!isCanvasSupportsStreamCapturing && item in document.createElement('canvas')) {\n      isCanvasSupportsStreamCapturing = true;\n    }\n\n    if (!isVideoSupportsStreamCapturing && item in document.createElement('video')) {\n      isVideoSupportsStreamCapturing = true;\n    }\n  });\n  var regexIpv4Local = /^(192\\.168\\.|169\\.254\\.|10\\.|172\\.(1[6-9]|2\\d|3[01]))/,\n      regexIpv4 = /([0-9]{1,3}(\\.[0-9]{1,3}){3})/,\n      regexIpv6 = /[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7}/; // via: https://github.com/diafygi/webrtc-ips\n\n  function DetectLocalIPAddress(callback, stream) {\n    if (!DetectRTC.isWebRTCSupported) {\n      return;\n    }\n\n    var isPublic = true,\n        isIpv4 = true;\n    getIPs(function (ip) {\n      if (!ip) {\n        callback(); // Pass nothing to tell that ICE-gathering-ended\n      } else if (ip.match(regexIpv4Local)) {\n        isPublic = false;\n        callback('Local: ' + ip, isPublic, isIpv4);\n      } else if (ip.match(regexIpv6)) {\n        //via https://ourcodeworld.com/articles/read/257/how-to-get-the-client-ip-address-with-javascript-only\n        isIpv4 = false;\n        callback('Public: ' + ip, isPublic, isIpv4);\n      } else {\n        callback('Public: ' + ip, isPublic, isIpv4);\n      }\n    }, stream);\n  }\n\n  function getIPs(callback, stream) {\n    if (typeof document === 'undefined' || typeof document.getElementById !== 'function') {\n      return;\n    }\n\n    var ipDuplicates = {};\n    var RTCPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection;\n\n    if (!RTCPeerConnection) {\n      var iframe = document.getElementById('iframe');\n\n      if (!iframe) {\n        return;\n      }\n\n      var win = iframe.contentWindow;\n      RTCPeerConnection = win.RTCPeerConnection || win.mozRTCPeerConnection || win.webkitRTCPeerConnection;\n    }\n\n    if (!RTCPeerConnection) {\n      return;\n    }\n\n    var peerConfig = null;\n\n    if (DetectRTC.browser === 'Chrome' && DetectRTC.browser.version < 58) {\n      // todo: add support for older Opera\n      peerConfig = {\n        optional: [{\n          RtpDataChannels: true\n        }]\n      };\n    }\n\n    var servers = {\n      iceServers: [{\n        urls: 'stun:stun.l.google.com:19302'\n      }]\n    };\n    var pc = new RTCPeerConnection(servers, peerConfig);\n\n    if (stream) {\n      if (pc.addStream) {\n        pc.addStream(stream);\n      } else if (pc.addTrack && stream.getTracks()[0]) {\n        pc.addTrack(stream.getTracks()[0], stream);\n      }\n    }\n\n    function handleCandidate(candidate) {\n      if (!candidate) {\n        callback(); // Pass nothing to tell that ICE-gathering-ended\n\n        return;\n      }\n\n      var match = regexIpv4.exec(candidate);\n\n      if (!match) {\n        return;\n      }\n\n      var ipAddress = match[1];\n      var isPublic = candidate.match(regexIpv4Local),\n          isIpv4 = true;\n\n      if (ipDuplicates[ipAddress] === undefined) {\n        callback(ipAddress, isPublic, isIpv4);\n      }\n\n      ipDuplicates[ipAddress] = true;\n    } // listen for candidate events\n\n\n    pc.onicecandidate = function (event) {\n      if (event.candidate && event.candidate.candidate) {\n        handleCandidate(event.candidate.candidate);\n      } else {\n        handleCandidate(); // Pass nothing to tell that ICE-gathering-ended\n      }\n    }; // create data channel\n\n\n    if (!stream) {\n      try {\n        pc.createDataChannel('sctp', {});\n      } catch (e) {}\n    } // create an offer sdp\n\n\n    if (DetectRTC.isPromisesSupported) {\n      pc.createOffer().then(function (result) {\n        pc.setLocalDescription(result).then(afterCreateOffer);\n      });\n    } else {\n      pc.createOffer(function (result) {\n        pc.setLocalDescription(result, afterCreateOffer, function () {});\n      }, function () {});\n    }\n\n    function afterCreateOffer() {\n      var lines = pc.localDescription.sdp.split('\\n');\n      lines.forEach(function (line) {\n        if (line && line.indexOf('a=candidate:') === 0) {\n          handleCandidate(line);\n        }\n      });\n    }\n  }\n\n  var MediaDevices = [];\n  var audioInputDevices = [];\n  var audioOutputDevices = [];\n  var videoInputDevices = [];\n\n  if (navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {\n    // Firefox 38+ seems having support of enumerateDevices\n    // Thanks @xdumaine/enumerateDevices\n    navigator.enumerateDevices = function (callback) {\n      var enumerateDevices = navigator.mediaDevices.enumerateDevices();\n\n      if (enumerateDevices && enumerateDevices.then) {\n        navigator.mediaDevices.enumerateDevices().then(callback).catch(function () {\n          callback([]);\n        });\n      } else {\n        callback([]);\n      }\n    };\n  } // Media Devices detection\n\n\n  var canEnumerate = false;\n  /*global MediaStreamTrack:true */\n\n  if (typeof MediaStreamTrack !== 'undefined' && 'getSources' in MediaStreamTrack) {\n    canEnumerate = true;\n  } else if (navigator.mediaDevices && !!navigator.mediaDevices.enumerateDevices) {\n    canEnumerate = true;\n  }\n\n  var hasMicrophone = false;\n  var hasSpeakers = false;\n  var hasWebcam = false;\n  var isWebsiteHasMicrophonePermissions = false;\n  var isWebsiteHasWebcamPermissions = false; // http://dev.w3.org/2011/webrtc/editor/getusermedia.html#mediadevices\n\n  function checkDeviceSupport(callback) {\n    if (!canEnumerate) {\n      if (callback) {\n        callback();\n      }\n\n      return;\n    }\n\n    if (!navigator.enumerateDevices && window.MediaStreamTrack && window.MediaStreamTrack.getSources) {\n      navigator.enumerateDevices = window.MediaStreamTrack.getSources.bind(window.MediaStreamTrack);\n    }\n\n    if (!navigator.enumerateDevices && navigator.enumerateDevices) {\n      navigator.enumerateDevices = navigator.enumerateDevices.bind(navigator);\n    }\n\n    if (!navigator.enumerateDevices) {\n      if (callback) {\n        callback();\n      }\n\n      return;\n    }\n\n    MediaDevices = [];\n    audioInputDevices = [];\n    audioOutputDevices = [];\n    videoInputDevices = [];\n    hasMicrophone = false;\n    hasSpeakers = false;\n    hasWebcam = false;\n    isWebsiteHasMicrophonePermissions = false;\n    isWebsiteHasWebcamPermissions = false; // to prevent duplication\n\n    var alreadyUsedDevices = {};\n    navigator.enumerateDevices(function (devices) {\n      devices.forEach(function (_device) {\n        var device = {};\n\n        for (var d in _device) {\n          try {\n            if (typeof _device[d] !== 'function') {\n              device[d] = _device[d];\n            }\n          } catch (e) {}\n        }\n\n        if (alreadyUsedDevices[device.deviceId + device.label + device.kind]) {\n          return;\n        } // if it is MediaStreamTrack.getSources\n\n\n        if (device.kind === 'audio') {\n          device.kind = 'audioinput';\n        }\n\n        if (device.kind === 'video') {\n          device.kind = 'videoinput';\n        }\n\n        if (!device.deviceId) {\n          device.deviceId = device.id;\n        }\n\n        if (!device.id) {\n          device.id = device.deviceId;\n        }\n\n        if (!device.label) {\n          device.isCustomLabel = true;\n\n          if (device.kind === 'videoinput') {\n            device.label = 'Camera ' + (videoInputDevices.length + 1);\n          } else if (device.kind === 'audioinput') {\n            device.label = 'Microphone ' + (audioInputDevices.length + 1);\n          } else if (device.kind === 'audiooutput') {\n            device.label = 'Speaker ' + (audioOutputDevices.length + 1);\n          } else {\n            device.label = 'Please invoke getUserMedia once.';\n          }\n\n          if (typeof DetectRTC !== 'undefined' && DetectRTC.browser.isChrome && DetectRTC.browser.version >= 46 && !/^(https:|chrome-extension:)$/g.test(location.protocol || '')) {\n            if (typeof document !== 'undefined' && typeof document.domain === 'string' && document.domain.search && document.domain.search(/localhost|127.0./g) === -1) {\n              device.label = 'HTTPs is required to get label of this ' + device.kind + ' device.';\n            }\n          }\n        } else {\n          // Firefox on Android still returns empty label\n          if (device.kind === 'videoinput' && !isWebsiteHasWebcamPermissions) {\n            isWebsiteHasWebcamPermissions = true;\n          }\n\n          if (device.kind === 'audioinput' && !isWebsiteHasMicrophonePermissions) {\n            isWebsiteHasMicrophonePermissions = true;\n          }\n        }\n\n        if (device.kind === 'audioinput') {\n          hasMicrophone = true;\n\n          if (audioInputDevices.indexOf(device) === -1) {\n            audioInputDevices.push(device);\n          }\n        }\n\n        if (device.kind === 'audiooutput') {\n          hasSpeakers = true;\n\n          if (audioOutputDevices.indexOf(device) === -1) {\n            audioOutputDevices.push(device);\n          }\n        }\n\n        if (device.kind === 'videoinput') {\n          hasWebcam = true;\n\n          if (videoInputDevices.indexOf(device) === -1) {\n            videoInputDevices.push(device);\n          }\n        } // there is no 'videoouput' in the spec.\n\n\n        MediaDevices.push(device);\n        alreadyUsedDevices[device.deviceId + device.label + device.kind] = device;\n      });\n\n      if (typeof DetectRTC !== 'undefined') {\n        // to sync latest outputs\n        DetectRTC.MediaDevices = MediaDevices;\n        DetectRTC.hasMicrophone = hasMicrophone;\n        DetectRTC.hasSpeakers = hasSpeakers;\n        DetectRTC.hasWebcam = hasWebcam;\n        DetectRTC.isWebsiteHasWebcamPermissions = isWebsiteHasWebcamPermissions;\n        DetectRTC.isWebsiteHasMicrophonePermissions = isWebsiteHasMicrophonePermissions;\n        DetectRTC.audioInputDevices = audioInputDevices;\n        DetectRTC.audioOutputDevices = audioOutputDevices;\n        DetectRTC.videoInputDevices = videoInputDevices;\n      }\n\n      if (callback) {\n        callback();\n      }\n    });\n  }\n\n  var DetectRTC = window.DetectRTC || {}; // ----------\n  // DetectRTC.browser.name || DetectRTC.browser.version || DetectRTC.browser.fullVersion\n\n  DetectRTC.browser = getBrowserInfo();\n  detectPrivateMode(function (isPrivateBrowsing) {\n    DetectRTC.browser.isPrivateBrowsing = !!isPrivateBrowsing;\n  }); // DetectRTC.isChrome || DetectRTC.isFirefox || DetectRTC.isEdge\n\n  DetectRTC.browser['is' + DetectRTC.browser.name] = true; // -----------\n\n  DetectRTC.osName = osName;\n  DetectRTC.osVersion = osVersion;\n  var isNodeWebkit = typeof process === 'object' && typeof process.versions === 'object' && process.versions['node-webkit']; // --------- Detect if system supports WebRTC 1.0 or WebRTC 1.1.\n\n  var isWebRTCSupported = false;\n  ['RTCPeerConnection', 'webkitRTCPeerConnection', 'mozRTCPeerConnection', 'RTCIceGatherer'].forEach(function (item) {\n    if (isWebRTCSupported) {\n      return;\n    }\n\n    if (item in window) {\n      isWebRTCSupported = true;\n    }\n  });\n  DetectRTC.isWebRTCSupported = isWebRTCSupported; //-------\n\n  DetectRTC.isORTCSupported = typeof RTCIceGatherer !== 'undefined'; // --------- Detect if system supports screen capturing API\n\n  var isScreenCapturingSupported = false;\n\n  if (DetectRTC.browser.isChrome && DetectRTC.browser.version >= 35) {\n    isScreenCapturingSupported = true;\n  } else if (DetectRTC.browser.isFirefox && DetectRTC.browser.version >= 34) {\n    isScreenCapturingSupported = true;\n  } else if (DetectRTC.browser.isEdge && DetectRTC.browser.version >= 17) {\n    isScreenCapturingSupported = true; // navigator.getDisplayMedia\n  } else if (DetectRTC.osName === 'Android' && DetectRTC.browser.isChrome) {\n    isScreenCapturingSupported = true;\n  }\n\n  if (!/^(https:|chrome-extension:)$/g.test(location.protocol || '')) {\n    var isNonLocalHost = typeof document !== 'undefined' && typeof document.domain === 'string' && document.domain.search && document.domain.search(/localhost|127.0./g) === -1;\n\n    if (isNonLocalHost && (DetectRTC.browser.isChrome || DetectRTC.browser.isEdge || DetectRTC.browser.isOpera)) {\n      isScreenCapturingSupported = false;\n    } else if (DetectRTC.browser.isFirefox) {\n      isScreenCapturingSupported = false;\n    }\n  }\n\n  DetectRTC.isScreenCapturingSupported = isScreenCapturingSupported; // --------- Detect if WebAudio API are supported\n\n  var webAudio = {\n    isSupported: false,\n    isCreateMediaStreamSourceSupported: false\n  };\n  ['AudioContext', 'webkitAudioContext', 'mozAudioContext', 'msAudioContext'].forEach(function (item) {\n    if (webAudio.isSupported) {\n      return;\n    }\n\n    if (item in window) {\n      webAudio.isSupported = true;\n\n      if (window[item] && 'createMediaStreamSource' in window[item].prototype) {\n        webAudio.isCreateMediaStreamSourceSupported = true;\n      }\n    }\n  });\n  DetectRTC.isAudioContextSupported = webAudio.isSupported;\n  DetectRTC.isCreateMediaStreamSourceSupported = webAudio.isCreateMediaStreamSourceSupported; // ---------- Detect if SCTP/RTP channels are supported.\n\n  var isRtpDataChannelsSupported = false;\n\n  if (DetectRTC.browser.isChrome && DetectRTC.browser.version > 31) {\n    isRtpDataChannelsSupported = true;\n  }\n\n  DetectRTC.isRtpDataChannelsSupported = isRtpDataChannelsSupported;\n  var isSCTPSupportd = false;\n\n  if (DetectRTC.browser.isFirefox && DetectRTC.browser.version > 28) {\n    isSCTPSupportd = true;\n  } else if (DetectRTC.browser.isChrome && DetectRTC.browser.version > 25) {\n    isSCTPSupportd = true;\n  } else if (DetectRTC.browser.isOpera && DetectRTC.browser.version >= 11) {\n    isSCTPSupportd = true;\n  }\n\n  DetectRTC.isSctpDataChannelsSupported = isSCTPSupportd; // ---------\n\n  DetectRTC.isMobileDevice = isMobileDevice; // \"isMobileDevice\" boolean is defined in \"getBrowserInfo.js\"\n  // ------\n\n  var isGetUserMediaSupported = false;\n\n  if (navigator.getUserMedia) {\n    isGetUserMediaSupported = true;\n  } else if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    isGetUserMediaSupported = true;\n  }\n\n  if (DetectRTC.browser.isChrome && DetectRTC.browser.version >= 46 && !/^(https:|chrome-extension:)$/g.test(location.protocol || '')) {\n    if (typeof document !== 'undefined' && typeof document.domain === 'string' && document.domain.search && document.domain.search(/localhost|127.0./g) === -1) {\n      isGetUserMediaSupported = 'Requires HTTPs';\n    }\n  }\n\n  if (DetectRTC.osName === 'Nodejs') {\n    isGetUserMediaSupported = false;\n  }\n\n  DetectRTC.isGetUserMediaSupported = isGetUserMediaSupported;\n  var displayResolution = '';\n\n  if (screen.width) {\n    var width = screen.width ? screen.width : '';\n    var height = screen.height ? screen.height : '';\n    displayResolution += '' + width + ' x ' + height;\n  }\n\n  DetectRTC.displayResolution = displayResolution;\n\n  function getAspectRatio(w, h) {\n    function gcd(a, b) {\n      return b == 0 ? a : gcd(b, a % b);\n    }\n\n    var r = gcd(w, h);\n    return w / r / (h / r);\n  }\n\n  DetectRTC.displayAspectRatio = getAspectRatio(screen.width, screen.height).toFixed(2); // ----------\n\n  DetectRTC.isCanvasSupportsStreamCapturing = isCanvasSupportsStreamCapturing;\n  DetectRTC.isVideoSupportsStreamCapturing = isVideoSupportsStreamCapturing;\n\n  if (DetectRTC.browser.name == 'Chrome' && DetectRTC.browser.version >= 53) {\n    if (!DetectRTC.isCanvasSupportsStreamCapturing) {\n      DetectRTC.isCanvasSupportsStreamCapturing = 'Requires chrome flag: enable-experimental-web-platform-features';\n    }\n\n    if (!DetectRTC.isVideoSupportsStreamCapturing) {\n      DetectRTC.isVideoSupportsStreamCapturing = 'Requires chrome flag: enable-experimental-web-platform-features';\n    }\n  } // ------\n\n\n  DetectRTC.DetectLocalIPAddress = DetectLocalIPAddress;\n  DetectRTC.isWebSocketsSupported = 'WebSocket' in window && 2 === window.WebSocket.CLOSING;\n  DetectRTC.isWebSocketsBlocked = !DetectRTC.isWebSocketsSupported;\n\n  if (DetectRTC.osName === 'Nodejs') {\n    DetectRTC.isWebSocketsSupported = true;\n    DetectRTC.isWebSocketsBlocked = false;\n  }\n\n  DetectRTC.checkWebSocketsSupport = function (callback) {\n    callback = callback || function () {};\n\n    try {\n      var starttime;\n      var websocket = new WebSocket('wss://echo.websocket.org:443/');\n\n      websocket.onopen = function () {\n        DetectRTC.isWebSocketsBlocked = false;\n        starttime = new Date().getTime();\n        websocket.send('ping');\n      };\n\n      websocket.onmessage = function () {\n        DetectRTC.WebsocketLatency = new Date().getTime() - starttime + 'ms';\n        callback();\n        websocket.close();\n        websocket = null;\n      };\n\n      websocket.onerror = function () {\n        DetectRTC.isWebSocketsBlocked = true;\n        callback();\n      };\n    } catch (e) {\n      DetectRTC.isWebSocketsBlocked = true;\n      callback();\n    }\n  }; // -------\n\n\n  DetectRTC.load = function (callback) {\n    callback = callback || function () {};\n\n    checkDeviceSupport(callback);\n  }; // check for microphone/camera support!\n\n\n  if (typeof checkDeviceSupport === 'function') {// checkDeviceSupport();\n  }\n\n  if (typeof MediaDevices !== 'undefined') {\n    DetectRTC.MediaDevices = MediaDevices;\n  } else {\n    DetectRTC.MediaDevices = [];\n  }\n\n  DetectRTC.hasMicrophone = hasMicrophone;\n  DetectRTC.hasSpeakers = hasSpeakers;\n  DetectRTC.hasWebcam = hasWebcam;\n  DetectRTC.isWebsiteHasWebcamPermissions = isWebsiteHasWebcamPermissions;\n  DetectRTC.isWebsiteHasMicrophonePermissions = isWebsiteHasMicrophonePermissions;\n  DetectRTC.audioInputDevices = audioInputDevices;\n  DetectRTC.audioOutputDevices = audioOutputDevices;\n  DetectRTC.videoInputDevices = videoInputDevices; // ------\n\n  var isSetSinkIdSupported = false;\n\n  if (typeof document !== 'undefined' && typeof document.createElement === 'function' && 'setSinkId' in document.createElement('video')) {\n    isSetSinkIdSupported = true;\n  }\n\n  DetectRTC.isSetSinkIdSupported = isSetSinkIdSupported; // -----\n\n  var isRTPSenderReplaceTracksSupported = false;\n\n  if (DetectRTC.browser.isFirefox && typeof mozRTCPeerConnection !== 'undefined'\n  /*&& DetectRTC.browser.version > 39*/\n  ) {\n      /*global mozRTCPeerConnection:true */\n      if ('getSenders' in mozRTCPeerConnection.prototype) {\n        isRTPSenderReplaceTracksSupported = true;\n      }\n    } else if (DetectRTC.browser.isChrome && typeof webkitRTCPeerConnection !== 'undefined') {\n    /*global webkitRTCPeerConnection:true */\n    if ('getSenders' in webkitRTCPeerConnection.prototype) {\n      isRTPSenderReplaceTracksSupported = true;\n    }\n  }\n\n  DetectRTC.isRTPSenderReplaceTracksSupported = isRTPSenderReplaceTracksSupported; //------\n\n  var isRemoteStreamProcessingSupported = false;\n\n  if (DetectRTC.browser.isFirefox && DetectRTC.browser.version > 38) {\n    isRemoteStreamProcessingSupported = true;\n  }\n\n  DetectRTC.isRemoteStreamProcessingSupported = isRemoteStreamProcessingSupported; //-------\n\n  var isApplyConstraintsSupported = false;\n  /*global MediaStreamTrack:true */\n\n  if (typeof MediaStreamTrack !== 'undefined' && 'applyConstraints' in MediaStreamTrack.prototype) {\n    isApplyConstraintsSupported = true;\n  }\n\n  DetectRTC.isApplyConstraintsSupported = isApplyConstraintsSupported; //-------\n\n  var isMultiMonitorScreenCapturingSupported = false;\n\n  if (DetectRTC.browser.isFirefox && DetectRTC.browser.version >= 43) {\n    // version 43 merely supports platforms for multi-monitors\n    // version 44 will support exact multi-monitor selection i.e. you can select any monitor for screen capturing.\n    isMultiMonitorScreenCapturingSupported = true;\n  }\n\n  DetectRTC.isMultiMonitorScreenCapturingSupported = isMultiMonitorScreenCapturingSupported;\n  DetectRTC.isPromisesSupported = !!('Promise' in window); // version is generated by \"grunt\"\n\n  DetectRTC.version = '1.3.9';\n\n  if (typeof DetectRTC === 'undefined') {\n    window.DetectRTC = {};\n  }\n\n  var MediaStream = window.MediaStream;\n\n  if (typeof MediaStream === 'undefined' && typeof webkitMediaStream !== 'undefined') {\n    MediaStream = webkitMediaStream;\n  }\n\n  if (typeof MediaStream !== 'undefined' && typeof MediaStream === 'function') {\n    DetectRTC.MediaStream = Object.keys(MediaStream.prototype);\n  } else DetectRTC.MediaStream = false;\n\n  if (typeof MediaStreamTrack !== 'undefined') {\n    DetectRTC.MediaStreamTrack = Object.keys(MediaStreamTrack.prototype);\n  } else DetectRTC.MediaStreamTrack = false;\n\n  var RTCPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection;\n\n  if (typeof RTCPeerConnection !== 'undefined') {\n    DetectRTC.RTCPeerConnection = Object.keys(RTCPeerConnection.prototype);\n  } else DetectRTC.RTCPeerConnection = false;\n\n  window.DetectRTC = DetectRTC;\n\n  if (typeof module !== 'undefined'\n  /* && !!module.exports*/\n  ) {\n      module.exports = DetectRTC;\n    }\n\n  if (typeof define === 'function' && define.amd) {\n    define('DetectRTC', [], function () {\n      return DetectRTC;\n    });\n  }\n})();","map":null,"metadata":{},"sourceType":"script"}