{"ast":null,"code":"/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\n\nvar utils = require('../utils');\n\nmodule.exports = {\n  shimLocalStreamsAPI: function (window) {\n    if (typeof window !== 'object' || !window.RTCPeerConnection) {\n      return;\n    }\n\n    if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n      window.RTCPeerConnection.prototype.getLocalStreams = function () {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n\n        return this._localStreams;\n      };\n    }\n\n    if (!('getStreamById' in window.RTCPeerConnection.prototype)) {\n      window.RTCPeerConnection.prototype.getStreamById = function (id) {\n        var result = null;\n\n        if (this._localStreams) {\n          this._localStreams.forEach(function (stream) {\n            if (stream.id === id) {\n              result = stream;\n            }\n          });\n        }\n\n        if (this._remoteStreams) {\n          this._remoteStreams.forEach(function (stream) {\n            if (stream.id === id) {\n              result = stream;\n            }\n          });\n        }\n\n        return result;\n      };\n    }\n\n    if (!('addStream' in window.RTCPeerConnection.prototype)) {\n      var _addTrack = window.RTCPeerConnection.prototype.addTrack;\n\n      window.RTCPeerConnection.prototype.addStream = function (stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n\n        if (this._localStreams.indexOf(stream) === -1) {\n          this._localStreams.push(stream);\n        }\n\n        var pc = this;\n        stream.getTracks().forEach(function (track) {\n          _addTrack.call(pc, track, stream);\n        });\n      };\n\n      window.RTCPeerConnection.prototype.addTrack = function (track, stream) {\n        if (stream) {\n          if (!this._localStreams) {\n            this._localStreams = [stream];\n          } else if (this._localStreams.indexOf(stream) === -1) {\n            this._localStreams.push(stream);\n          }\n        }\n\n        return _addTrack.call(this, track, stream);\n      };\n    }\n\n    if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n      window.RTCPeerConnection.prototype.removeStream = function (stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n\n        var index = this._localStreams.indexOf(stream);\n\n        if (index === -1) {\n          return;\n        }\n\n        this._localStreams.splice(index, 1);\n\n        var pc = this;\n        var tracks = stream.getTracks();\n        this.getSenders().forEach(function (sender) {\n          if (tracks.indexOf(sender.track) !== -1) {\n            pc.removeTrack(sender);\n          }\n        });\n      };\n    }\n  },\n  shimRemoteStreamsAPI: function (window) {\n    if (typeof window !== 'object' || !window.RTCPeerConnection) {\n      return;\n    }\n\n    if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n      window.RTCPeerConnection.prototype.getRemoteStreams = function () {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n    }\n\n    if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n      Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n        get: function () {\n          return this._onaddstream;\n        },\n        set: function (f) {\n          if (this._onaddstream) {\n            this.removeEventListener('addstream', this._onaddstream);\n          }\n\n          this.addEventListener('addstream', this._onaddstream = f);\n        }\n      });\n      var origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;\n\n      window.RTCPeerConnection.prototype.setRemoteDescription = function () {\n        var pc = this;\n\n        if (!this._onaddstreampoly) {\n          this.addEventListener('track', this._onaddstreampoly = function (e) {\n            e.streams.forEach(function (stream) {\n              if (!pc._remoteStreams) {\n                pc._remoteStreams = [];\n              }\n\n              if (pc._remoteStreams.indexOf(stream) >= 0) {\n                return;\n              }\n\n              pc._remoteStreams.push(stream);\n\n              var event = new Event('addstream');\n              event.stream = stream;\n              pc.dispatchEvent(event);\n            });\n          });\n        }\n\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n    }\n  },\n  shimCallbacksAPI: function (window) {\n    if (typeof window !== 'object' || !window.RTCPeerConnection) {\n      return;\n    }\n\n    var prototype = window.RTCPeerConnection.prototype;\n    var createOffer = prototype.createOffer;\n    var createAnswer = prototype.createAnswer;\n    var setLocalDescription = prototype.setLocalDescription;\n    var setRemoteDescription = prototype.setRemoteDescription;\n    var addIceCandidate = prototype.addIceCandidate;\n\n    prototype.createOffer = function (successCallback, failureCallback) {\n      var options = arguments.length >= 2 ? arguments[2] : arguments[0];\n      var promise = createOffer.apply(this, [options]);\n\n      if (!failureCallback) {\n        return promise;\n      }\n\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n    prototype.createAnswer = function (successCallback, failureCallback) {\n      var options = arguments.length >= 2 ? arguments[2] : arguments[0];\n      var promise = createAnswer.apply(this, [options]);\n\n      if (!failureCallback) {\n        return promise;\n      }\n\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n    var withCallback = function (description, successCallback, failureCallback) {\n      var promise = setLocalDescription.apply(this, [description]);\n\n      if (!failureCallback) {\n        return promise;\n      }\n\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n    prototype.setLocalDescription = withCallback;\n\n    withCallback = function (description, successCallback, failureCallback) {\n      var promise = setRemoteDescription.apply(this, [description]);\n\n      if (!failureCallback) {\n        return promise;\n      }\n\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n    prototype.setRemoteDescription = withCallback;\n\n    withCallback = function (candidate, successCallback, failureCallback) {\n      var promise = addIceCandidate.apply(this, [candidate]);\n\n      if (!failureCallback) {\n        return promise;\n      }\n\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n    prototype.addIceCandidate = withCallback;\n  },\n  shimGetUserMedia: function (window) {\n    var navigator = window && window.navigator;\n\n    if (!navigator.getUserMedia) {\n      if (navigator.webkitGetUserMedia) {\n        navigator.getUserMedia = navigator.webkitGetUserMedia.bind(navigator);\n      } else if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n        navigator.getUserMedia = function (constraints, cb, errcb) {\n          navigator.mediaDevices.getUserMedia(constraints).then(cb, errcb);\n        }.bind(navigator);\n      }\n    }\n  },\n  shimRTCIceServerUrls: function (window) {\n    // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n    var OrigPeerConnection = window.RTCPeerConnection;\n\n    window.RTCPeerConnection = function (pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        var newIceServers = [];\n\n        for (var i = 0; i < pcConfig.iceServers.length; i++) {\n          var server = pcConfig.iceServers[i];\n\n          if (!server.hasOwnProperty('urls') && server.hasOwnProperty('url')) {\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n\n        pcConfig.iceServers = newIceServers;\n      }\n\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n\n    window.RTCPeerConnection.prototype = OrigPeerConnection.prototype; // wrap static methods. Currently just generateCertificate.\n\n    if ('generateCertificate' in window.RTCPeerConnection) {\n      Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n        get: function () {\n          return OrigPeerConnection.generateCertificate;\n        }\n      });\n    }\n  },\n  shimTrackEventTransceiver: function (window) {\n    // Add event.transceiver member over deprecated event.receiver\n    if (typeof window === 'object' && window.RTCPeerConnection && 'receiver' in window.RTCTrackEvent.prototype && // can't check 'transceiver' in window.RTCTrackEvent.prototype, as it is\n    // defined for some reason even when window.RTCTransceiver is not.\n    !window.RTCTransceiver) {\n      Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n        get: function () {\n          return {\n            receiver: this.receiver\n          };\n        }\n      });\n    }\n  },\n  shimCreateOfferLegacy: function (window) {\n    var origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n\n    window.RTCPeerConnection.prototype.createOffer = function (offerOptions) {\n      var pc = this;\n\n      if (offerOptions) {\n        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveAudio = !!offerOptions.offerToReceiveAudio;\n        }\n\n        var audioTransceiver = pc.getTransceivers().find(function (transceiver) {\n          return transceiver.sender.track && transceiver.sender.track.kind === 'audio';\n        });\n\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('sendonly');\n            } else {\n              audioTransceiver.direction = 'sendonly';\n            }\n          } else if (audioTransceiver.direction === 'recvonly') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('inactive');\n            } else {\n              audioTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveAudio === true && !audioTransceiver) {\n          pc.addTransceiver('audio');\n        }\n\n        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveVideo = !!offerOptions.offerToReceiveVideo;\n        }\n\n        var videoTransceiver = pc.getTransceivers().find(function (transceiver) {\n          return transceiver.sender.track && transceiver.sender.track.kind === 'video';\n        });\n\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            videoTransceiver.setDirection('sendonly');\n          } else if (videoTransceiver.direction === 'recvonly') {\n            videoTransceiver.setDirection('inactive');\n          }\n        } else if (offerOptions.offerToReceiveVideo === true && !videoTransceiver) {\n          pc.addTransceiver('video');\n        }\n      }\n\n      return origCreateOffer.apply(pc, arguments);\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"script"}