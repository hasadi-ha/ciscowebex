{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.constructHydraId = constructHydraId;\nexports.deconstructHydraId = deconstructHydraId;\nexports.buildHydraMessageId = buildHydraMessageId;\nexports.buildHydraPersonId = buildHydraPersonId;\nexports.buildHydraRoomId = buildHydraRoomId;\nexports.buildHydraOrgId = buildHydraOrgId;\nexports.buildHydraMembershipId = buildHydraMembershipId;\nexports.getHydraRoomType = getHydraRoomType;\nexports.getHydraFiles = getHydraFiles;\n\nvar _base = require('./base64');\n\nvar _constants = require('./constants');\n\nvar hydraBaseResource = 'ciscospark://us';\nvar hydraBaseUrl = 'https://api.ciscospark.com/v1';\n/**\n * Constructs a Hydra ID for a given UUID and type.\n *\n * @export\n * @param {string} type one of PEOPLE, TEAM, ROOM\n * @param {any} id\n * @returns {string}\n */\n\nfunction constructHydraId(type, id) {\n  return (0, _base.encode)(hydraBaseResource + '/' + type.toUpperCase() + '/' + id);\n}\n/**\n * Deconstructs a Hydra ID and provides the UUID.\n *\n * @export\n * @param {String} id\n * @returns {String}\n */\n\n\nfunction deconstructHydraId(id) {\n  var payload = (0, _base.decode)(id).split('/');\n  return {\n    id: payload.pop(),\n    type: payload.pop()\n  };\n}\n/**\n * Constructs a Hydra ID for a message based on internal UUID\n *\n * @export\n * @param {any} uuid\n * @returns {string}\n */\n\n\nfunction buildHydraMessageId(uuid) {\n  return constructHydraId(_constants.hydraTypes.MESSAGE, uuid);\n}\n/**\n * Constructs a Hydra ID for a person based on internal UUID\n *\n * @export\n * @param {any} uuid\n * @returns {string}\n */\n\n\nfunction buildHydraPersonId(uuid) {\n  return constructHydraId(_constants.hydraTypes.PEOPLE, uuid);\n}\n/**\n * Constructs a Hydra ID for a room based on internal UUID\n *\n * @export\n * @param {any} uuid\n * @returns {string}\n */\n\n\nfunction buildHydraRoomId(uuid) {\n  return constructHydraId(_constants.hydraTypes.ROOM, uuid);\n}\n/**\n * Constructs a Hydra ID for an organization based on internal UUID\n *\n * @export\n * @param {any} uuid\n * @returns {string}\n */\n\n\nfunction buildHydraOrgId(uuid) {\n  return constructHydraId(_constants.hydraTypes.ORGANIZATION, uuid);\n}\n/**\n * Constructs a Hydra ID for an membership based on an\n * internal UUID for the person, and the space\n *\n * @export\n * @param {any} personUUID\n * @param {any} spaceUUID\n * @returns {string}\n */\n\n\nfunction buildHydraMembershipId(personUUID, spaceUUID) {\n  return constructHydraId(_constants.hydraTypes.MEMBERSHIP, personUUID + ':' + spaceUUID);\n}\n/**\n * Returns a Hydra roomType based on conversation tags\n *\n * @export\n * @param {arra} tags\n * @param {any} spaceUUID\n * @returns {string}\n */\n\n\nfunction getHydraRoomType(tags) {\n  if (tags.includes(_constants.SDK_EVENT.INTERNAL.ACTIVITY_TAG.ONE_ON_ONE)) {\n    return _constants.SDK_EVENT.EXTERNAL.SPACE_TYPE.DIRECT;\n  }\n\n  return _constants.SDK_EVENT.EXTERNAL.SPACE_TYPE.GROUP;\n}\n/**\n * Returns file URLs for the activity, adhering to Hydra details,\n * e.g., https://api.ciscospark.com/v1/contents/Y2lzY29zcGF...\n * @see https://developer.webex.com/docs/api/v1/messages/get-message-details\n * @param {Object} activity from mercury\n * @returns {Array} file URLs\n */\n\n\nfunction getHydraFiles(activity) {\n  var hydraFiles = [];\n  var files = activity.object.files;\n\n  if (files) {\n    var items = files.items; // Note: Generated ID is dependent on file order.\n\n    for (var i = 0; i < items.length; i += 1) {\n      var contentId = constructHydraId(_constants.hydraTypes.CONTENT, activity.id + '/' + i);\n      hydraFiles.push(hydraBaseUrl + '/contents/' + contentId);\n    }\n  }\n\n  return hydraFiles;\n}","map":null,"metadata":{},"sourceType":"script"}