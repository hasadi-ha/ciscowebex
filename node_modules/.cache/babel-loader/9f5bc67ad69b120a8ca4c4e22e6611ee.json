{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _webexCore = require('@webex/webex-core');\n\nvar precedence = {\n  error: ['log'],\n  warn: ['error', 'log'],\n  info: ['log'],\n  debug: ['info', 'log'],\n  trace: ['debug', 'info', 'log']\n};\n/**\n * Assigns the specified console method to Logger; uses `precedence` to fallback\n * to other console methods if the current environment doesn't provide the\n * specified level.\n * @param {string} level\n * @returns {Function}\n */\n\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nfunction wrapConsoleMethod(level) {\n  /* eslint no-console: [0] */\n  var impls = precedence[level];\n\n  if (impls) {\n    impls = impls.slice();\n\n    while (!console[level]) {\n      level = impls.pop();\n    }\n  }\n\n  return function wrappedConsoleMethod() {\n    var _console;\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    /* eslint no-invalid-this: [0] */\n\n    /* istanbul ignore if */\n\n\n    if (process.env.NODE_ENV === 'test' && this.webex && this.webex.internal.device && this.webex.internal.device.url) {\n      args.unshift(this.webex.internal.device.url.slice(-3));\n    }\n\n    (_console = console)[level].apply(_console, args);\n  };\n}\n\nvar Logger = _webexCore.WebexPlugin.extend({\n  namespace: 'Logger',\n  error: wrapConsoleMethod('error'),\n  warn: wrapConsoleMethod('warn'),\n  log: wrapConsoleMethod('log'),\n  info: wrapConsoleMethod('info'),\n  debug: wrapConsoleMethod('debug'),\n  trace: wrapConsoleMethod('trace'),\n  version: '1.69.1'\n});\n\n(0, _webexCore.registerPlugin)('logger', Logger);\nexports.default = Logger;","map":null,"metadata":{},"sourceType":"script"}