{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ampersandState = require('ampersand-state');\n\nvar _ampersandState2 = _interopRequireDefault(_ampersandState);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar IDBROKER_BASE_URL = process.env.IDBROKER_BASE_URL || 'https://idbroker.webex.com'; // Objects to hold current idbroker and identity base host names\n// while keeping around what the default was\n\nvar idbrokerConfig = _ampersandState2.default.extend({\n  props: {\n    url: ['string', false, IDBROKER_BASE_URL],\n    defaultUrl: ['string', false, IDBROKER_BASE_URL]\n  }\n});\n\nvar identityConfig = _ampersandState2.default.extend({\n  props: {\n    url: ['string', false, process.env.IDENTITY_BASE_URL],\n    defaultUrl: ['string', false, process.env.IDENTITY_BASE_URL]\n  }\n}); // The credentials config which includes the CI server info and derived\n// URL properties from them for the various CI services.  The URL's\n// will be updated when the CI changes.\n\n\nvar CredentialsConfig = _ampersandState2.default.extend({\n  // we need to allow extra props for dynamic props like jwtRefreshCallback\n  extraProperties: 'allow',\n  // CI info as children so Ampersand updates cache and derived props\n  // The defaults for these are set when put in the config object below\n  children: {\n    /**\n      * The idbroker base host name\n      * @type {string}\n      */\n    idbroker: idbrokerConfig,\n\n    /**\n      * The identity base host name\n      * @type {string}\n      */\n    identity: identityConfig\n  },\n  props: {\n    /**\n      * This is the authorization url displayed on the\n      * {@link developer portal|https://developer.webex.com}\n      * @type {string}\n      */\n    authorizationString: ['string', false, process.env.WEBEX_AUTHORIZATION_STRING || process.env.AUTHORIZATION_STRING],\n\n    /**\n      * {@see https://tools.ietf.org/html/rfc6749#section-4.1.4}\n      * @type {string}\n      */\n    client_id: ['string', false, process.env.WEBEX_CLIENT_ID || process.env.COMMON_IDENTITY_CLIENT_ID || process.env.CLIENT_ID],\n\n    /**\n      * {@see https://tools.ietf.org/html/rfc6749#section-4.1.4}\n      * @type {string}\n      */\n    client_secret: ['string', false, process.env.WEBEX_CLIENT_SECRET || process.env.COMMON_IDENTITY_CLIENT_SECRET || process.env.CLIENT_SECRET],\n\n    /**\n      * {@see https://tools.ietf.org/html/rfc6749#section-4.1.4}\n      * @type {string}\n      */\n    redirect_uri: ['string', false, process.env.WEBEX_REDIRECT_URI || process.env.COMMON_IDENTITY_REDIRECT_URI || process.env.REDIRECT_URI],\n\n    /**\n      * {@see https://tools.ietf.org/html/rfc6749#section-4.1.4}\n      * @type {string}\n      */\n    scope: ['string', false, process.env.WEBEX_SCOPE || process.env.WEBEX_SCOPES || process.env.COMMON_IDENTITY_SCOPE || process.env.SCOPE],\n\n    /**\n      * Controls the UI of the CI login page.\n      * @private\n      * @type {string}\n      */\n    cisService: ['string', false, 'webex']\n  },\n  derived: {\n    /**\n      * User activation URL\n      * {@link config.credentials.activationUrl}\n      * @type {string}\n      */\n    activationUrl: {\n      deps: ['idbroker.url'],\n      fn: function fn() {\n        return (this.idbroker.url || 'https://idbroker.webex.com') + '/idb/token/v1/actions/UserActivation/invoke';\n      }\n    },\n\n    /**\n      * Authorization URL which prompts for user's password. Inferred from\n      * {@link config.credentials.authorizationString}\n      * @type {string}\n      */\n    authorizeUrl: {\n      deps: ['idbroker.url'],\n      fn: function fn() {\n        return process.env.AUTHORIZE_URL || this.idbroker.url + '/idb/oauth2/v1/authorize';\n      }\n    },\n    // TODO does hydra also have an access_token endpoint?\n\n    /**\n      * Token URL used for token refresh and auth code exchange\n      * @type {string}\n      */\n    tokenUrl: {\n      deps: ['idbroker.url'],\n      fn: function fn() {\n        return process.env.TOKEN_URL || this.idbroker.url + '/idb/oauth2/v1/access_token';\n      }\n    },\n\n    /**\n      * URL to revoke token\n      * @type {string}\n      */\n    revokeUrl: {\n      deps: ['idbroker.url'],\n      fn: function fn() {\n        return process.env.REVOKE_URL || this.idbroker.url + '/idb/oauth2/v1/revoke';\n      }\n    },\n\n    /**\n      * URL to load when the app logs out\n      * @type {string}\n      */\n    logoutUrl: {\n      deps: ['idbroker.url'],\n      fn: function fn() {\n        return this.idbroker.url + '/idb/oauth2/v1/logout';\n      }\n    },\n\n    /**\n      * Set password URL\n      * @type {string}\n      */\n    setPasswordUrl: {\n      deps: ['identity.url'],\n      fn: function fn() {\n        return (this.identity.url || 'https://identity.webex.com') + '/identity/scim/v1/Users';\n      }\n    }\n  }\n});\n\nexports.default = CredentialsConfig;","map":null,"metadata":{},"sourceType":"script"}