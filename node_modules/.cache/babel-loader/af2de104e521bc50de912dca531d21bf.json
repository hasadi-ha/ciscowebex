{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _apply = require('babel-runtime/core-js/reflect/apply');\n\nvar _apply2 = _interopRequireDefault(_apply);\n\nvar _isArray2 = require('lodash/isArray');\n\nvar _isArray3 = _interopRequireDefault(_isArray2);\n\nexports.proxyEvents = proxyEvents;\nexports.transferEvents = transferEvents;\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Proxies the event binding methods of emitter onto proxy\n * @param {EventEmitter|EventEmitterProxy} emitter\n * @param {mixed} proxy (probably a promise)\n * @returns {EventEmitter} Returns the source emitter to ease use in promise chains\n */\n\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nfunction proxyEvents(emitter, proxy) {\n  ['on', 'once'].forEach(function (key) {\n    proxy[key] = function () {\n      emitter[key].apply(emitter, arguments);\n      return proxy;\n    };\n  });\n  return emitter;\n}\n/**\n * Given a list of events, fires them on drain when they're emitted from source\n * @param {Array|string} events\n * @param {EventEmitter} source\n * @param {EventEmitter} drain\n * @returns {undefined}\n */\n\n\nfunction transferEvents(events, source, drain) {\n  events = (0, _isArray3.default)(events) ? events : [events];\n  events.forEach(function (event) {\n    if (source.on) {\n      source.on(event, function () {\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return emit.apply(undefined, [drain, event].concat(args));\n      });\n    }\n  });\n}\n/**\n * Emits an event\n * @param {EventEmitter} target The EventEmitter from which to emit an event\n * @returns {mixed}\n */\n\n\nfunction emit(target) {\n  var method = target.trigger || target.emit;\n  /* istanbul ignore if */\n\n  if (!method) {\n    throw new Error('count not determine emit method');\n  }\n\n  for (var _len2 = arguments.length, rest = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    rest[_key2 - 1] = arguments[_key2];\n  }\n\n  return (0, _apply2.default)(method, target, rest);\n}","map":null,"metadata":{},"sourceType":"script"}