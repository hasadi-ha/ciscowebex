{"ast":null,"code":"/**!\n * lib/response.js -- KMS (Generic) Response\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\"use strict\";\n\nvar clone = require(\"lodash.clone\"),\n    jose = require(\"node-jose\");\n\nfunction KMSResponse(wrapped) {\n  wrapped = wrapped || \"\";\n  var body = {};\n  Object.defineProperty(this, \"wrapped\", {\n    get: function () {\n      return wrapped;\n    },\n    set: function (w) {\n      // clear existing body before saving wrapped\n      body = {};\n      wrapped = String(w || \"\");\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"body\", {\n    get: function () {\n      return body;\n    },\n    set: function (b) {\n      body = b && clone(b) || {};\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"status\", {\n    get: function () {\n      return body.status || 0;\n    },\n    set: function (s) {\n      s = parseInt(s);\n\n      if (!isNaN(s)) {\n        body.status = s;\n      }\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"reason\", {\n    get: function () {\n      return body.reason || \"\";\n    },\n    set: function (r) {\n      body.reason = String(r || \"\");\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"requestId\", {\n    get: function () {\n      return body.requestId || \"\";\n    },\n    set: function (id) {\n      body.requestId = String(id || \"\");\n    },\n    enumerable: true\n  });\n}\n\nKMSResponse.prototype.unwrap = function (ctx, opts) {\n  opts = opts || {};\n  var keystore = jose.JWK.createKeyStore(),\n      waiting = [],\n      key; // add ephemeral key (if any)\n\n  key = ctx.ephemeralKey && ctx.ephemeralKey.jwk;\n\n  if (key) {\n    waiting.push(keystore.add(key));\n  } // add server key (if any)\n\n\n  key = ctx.serverInfo && ctx.serverInfo.key;\n\n  if (key) {\n    waiting.push(keystore.add(key));\n  }\n\n  var self = this;\n  var promise = Promise.all(waiting);\n  promise = promise.then(function () {\n    var wrapped = self.wrapped; // count the dots\n\n    switch ((wrapped.match(/\\./g) || []).length) {\n      case 2:\n        // signed\n        return jose.JWS.createVerify(keystore).verify(wrapped);\n\n      case 4:\n        // encrypted\n        return jose.JWE.createDecrypt(keystore).decrypt(wrapped);\n\n      default:\n        // bogus\n        return Promise.reject(new Error(\"invalid wrapped\"));\n    }\n  });\n  promise = promise.then(function (result) {\n    // parse result to JSON\n    result = (result.plaintext || result.payload).toString(\"utf8\");\n    result = JSON.parse(result); // save it before returning it\n\n    self.body = result;\n    return result;\n  });\n  return promise;\n};\n\nmodule.exports = KMSResponse;","map":null,"metadata":{},"sourceType":"script"}