{"ast":null,"code":"/*!\n * deps/forge.js - Forge Package Customization\n *\n * Copyright (c) 2015 Cisco Systems, Inc.  See LICENSE file.\n */\n\"use strict\";\n\nvar forge = require(\"node-forge/lib/forge\");\n\nrequire(\"node-forge/lib/aes\");\n\nrequire(\"node-forge/lib/asn1\");\n\nrequire(\"node-forge/lib/cipher\");\n\nrequire(\"node-forge/lib/hmac\");\n\nrequire(\"node-forge/lib/mgf1\");\n\nrequire(\"node-forge/lib/pbkdf2\");\n\nrequire(\"node-forge/lib/pem\");\n\nrequire(\"node-forge/lib/pkcs1\");\n\nrequire(\"node-forge/lib/pkcs7\");\n\nrequire(\"node-forge/lib/pki\");\n\nrequire(\"node-forge/lib/prime\");\n\nrequire(\"node-forge/lib/prng\");\n\nrequire(\"node-forge/lib/pss\");\n\nrequire(\"node-forge/lib/random\");\n\nrequire(\"node-forge/lib/sha1\");\n\nrequire(\"node-forge/lib/sha256\");\n\nrequire(\"node-forge/lib/sha512\");\n\nrequire(\"node-forge/lib/util\"); // Define AES \"raw\" cipher mode\n\n\nfunction modeRaw(options) {\n  options = options || {};\n  this.name = \"\";\n  this.cipher = options.cipher;\n  this.blockSize = options.blockSize || 16;\n  this._blocks = this.blockSize / 4;\n  this._inBlock = new Array(this._blocks);\n  this._outBlock = new Array(this._blocks);\n}\n\nmodeRaw.prototype.start = function () {};\n\nmodeRaw.prototype.encrypt = function (input, output, finish) {\n  if (input.length() < this.blockSize && !(finish && input.length() > 0)) {\n    return true;\n  }\n\n  var i; // get next block\n\n  for (i = 0; i < this._blocks; ++i) {\n    this._inBlock[i] = input.getInt32();\n  } // encrypt block\n\n\n  this.cipher.encrypt(this._inBlock, this._outBlock); // write output\n\n  for (i = 0; i < this._blocks; ++i) {\n    output.putInt32(this._outBlock[i]);\n  }\n};\n\nmodeRaw.prototype.decrypt = function (input, output, finish) {\n  if (input.length() < this.blockSize && !(finish && input.length() > 0)) {\n    return true;\n  }\n\n  var i; // get next block\n\n  for (i = 0; i < this._blocks; ++i) {\n    this._inBlock[i] = input.getInt32();\n  } // decrypt block\n\n\n  this.cipher.decrypt(this._inBlock, this._outBlock); // write output\n\n  for (i = 0; i < this._blocks; ++i) {\n    output.putInt32(this._outBlock[i]);\n  }\n};\n\n(function () {\n  var name = \"AES\",\n      mode = modeRaw,\n      factory;\n\n  factory = function () {\n    return new forge.aes.Algorithm(name, mode);\n  };\n\n  forge.cipher.registerAlgorithm(name, factory);\n})(); // Prevent nextTick from being used when possible\n\n\nif (\"function\" === typeof setImmediate) {\n  forge.util.setImmediate = forge.util.nextTick = function (callback) {\n    setImmediate(callback);\n  };\n}\n\nmodule.exports = forge;","map":null,"metadata":{},"sourceType":"script"}