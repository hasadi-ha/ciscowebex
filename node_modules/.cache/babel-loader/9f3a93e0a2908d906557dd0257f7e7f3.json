{"ast":null,"code":"/*!\n * jwk/keystore.js - JWK KeyStore Implementation\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\"use strict\";\n\nvar clone = require(\"lodash.clone\"),\n    merge = require(\"../util/merge\"),\n    forge = require(\"../deps/forge\"),\n    util = require(\"../util\");\n\nvar JWK = {\n  BaseKey: require(\"./basekey.js\"),\n  helpers: require(\"./helpers.js\")\n};\n/**\n * @class JWK.KeyStoreRegistry\n * @classdesc\n * A registry of JWK.Key types that can be used.\n *\n * @description\n * **NOTE:** This constructor cannot be called directly. Instead use the\n * global {JWK.registry}\n */\n\nvar JWKRegistry = function () {\n  var types = {};\n  Object.defineProperty(this, \"register\", {\n    value: function (factory) {\n      if (!factory || \"string\" !== typeof factory.kty || !factory.kty) {\n        throw new Error(\"invalid Key factory\");\n      }\n\n      var kty = factory.kty;\n      types[kty] = factory;\n      return this;\n    }\n  });\n  Object.defineProperty(this, \"unregister\", {\n    value: function (factory) {\n      if (!factory || \"string\" !== typeof factory.kty || !factory.kty) {\n        throw new Error(\"invalid Key factory\");\n      }\n\n      var kty = factory.kty;\n\n      if (factory === types[kty]) {\n        delete types[kty];\n      }\n\n      return this;\n    }\n  });\n  Object.defineProperty(this, \"get\", {\n    value: function (kty) {\n      return types[kty || \"\"] || undefined;\n    }\n  });\n  Object.defineProperty(this, \"all\", {\n    value: function () {\n      return Object.keys(types).map(function (t) {\n        return types[t];\n      });\n    }\n  });\n}; // Globals\n\n\nvar GLOBAL_REGISTRY = new JWKRegistry(); // importer\n\nfunction processCert(input) {\n  // convert certIssuer to readable attributes\n  [\"certIssuer\", \"certSubject\"].forEach(function (field) {\n    /* eslint new-cap: [0] */\n    var attrs = forge.pki.RDNAttributesAsArray(input[field]);\n    var result = input[field] = {};\n    attrs.forEach(function (a) {\n      result[a.name || a.type] = a.value;\n    });\n  });\n  return input;\n}\n\nfunction fromPEM(input) {\n  var result = {};\n  var pems = forge.pem.decode(input);\n  var found = pems.some(function (p) {\n    switch (p.type) {\n      case \"CERTIFICATE\":\n        result.form = \"pkix\";\n        break;\n\n      case \"PUBLIC KEY\":\n        result.form = \"spki\";\n        break;\n\n      case \"PRIVATE KEY\":\n        result.form = \"pkcs8\";\n        break;\n\n      case \"EC PRIVATE KEY\":\n      /* eslint no-fallthrough: [0] */\n\n      case \"RSA PRIVATE KEY\":\n        result.form = \"private\";\n        break;\n\n      default:\n        return false;\n    }\n\n    result.body = p.body;\n    return true;\n  });\n\n  if (!found) {\n    throw new Error(\"supported PEM type not found\");\n  }\n\n  return result;\n}\n\nfunction importFrom(registry, input) {\n  // form can be one of:\n  //  'private' | 'pkcs8' | 'public' | 'spki' | 'pkix' | 'x509'\n  var capture = {},\n      errors = [],\n      result; // conver from DER to ASN1\n\n  var form = input.form,\n      der = input.body,\n      thumbprint = null;\n  input = forge.asn1.fromDer(der);\n\n  switch (form) {\n    case \"private\":\n      registry.all().some(function (factory) {\n        if (result) {\n          return false;\n        }\n\n        if (!factory.validators) {\n          return false;\n        }\n\n        var oid = factory.validators.oid,\n            validator = factory.validators.privateKey;\n\n        if (!validator) {\n          return false;\n        }\n\n        capture = {};\n        errors = [];\n        result = forge.asn1.validate(input, validator, capture, errors);\n\n        if (result) {\n          capture.keyOid = forge.asn1.oidToDer(oid);\n          capture.parsed = true;\n        }\n\n        return result;\n      });\n      capture.type = \"private\";\n      break;\n\n    case \"pkcs8\":\n      result = forge.asn1.validate(input, JWK.helpers.validators.privateKey, capture, errors);\n      capture.type = \"private\";\n      break;\n\n    case \"public\": // eslint no-fallthrough: [0] */\n\n    case \"spki\":\n      result = forge.asn1.validate(input, JWK.helpers.validators.publicKey, capture, errors);\n      capture.type = \"public\";\n      break;\n\n    case \"pkix\":\n    /* eslint no-fallthrough: [0] */\n\n    case \"x509\":\n      result = forge.asn1.validate(input, JWK.helpers.validators.certificate, capture, errors);\n\n      if (result) {\n        capture = processCert(capture);\n        var md = forge.md.sha1.create();\n        md.update(der);\n        thumbprint = util.base64url.encode(new Buffer(md.digest().toHex(), \"hex\"));\n      }\n\n      capture.type = \"public\";\n      break;\n  }\n\n  if (!result) {\n    return null;\n  } // convert oids\n\n\n  if (capture.keyOid) {\n    capture.keyOid = forge.asn1.derToOid(capture.keyOid);\n  } // find and invoke the importer\n\n\n  result = null;\n  GLOBAL_REGISTRY.all().forEach(function (factory) {\n    if (result) {\n      return;\n    }\n\n    if (!factory) {\n      return;\n    }\n\n    if (\"function\" !== typeof factory.import) {\n      return;\n    }\n\n    result = factory.import(capture);\n  });\n\n  if (result && capture.certSubject && capture.certSubject.commonName) {\n    result.kid = capture.certSubject.commonName;\n  }\n\n  if (result && thumbprint) {\n    result.x5t = thumbprint;\n  }\n\n  return result;\n}\n/**\n * @class JWK.KeyStore\n * @classdesc\n * Represents a collection of Keys.\n *\n * @description\n * **NOTE:** This constructor cannot be called directly. Instead call {@link\n * JWK.createKeyStore}.\n */\n\n\nvar JWKStore = function (registry, parent) {\n  var keysets = {};\n  /**\n   * @method JWK.KeyStore#generate\n   * @description\n   * Generates a new random Key into this KeyStore.\n   *\n   * The type of {size} depends on the value of {kty}:\n   *\n   * + **`EC`**: String naming the curve to use, which can be one of:\n   *   `\"P-256\"`, `\"P-384\"`, or `\"P-521\"` (default is **`\"P-256\"`**).\n   * + **`RSA`**: Number describing the size of the key, in bits (default is\n   *   **`2048`**).\n   * + **`oct`**: Number describing the size of the key, in bits (default is\n   *   **`256`**).\n   *\n   * Any properties in {props} are applied before the key is generated,\n   * and are expected to be data types acceptable in JSON.  This allows the\n   * generated key to have a specific key identifier, or to specify its\n   * acceptable usage.\n   *\n   * The returned Promise, when fulfilled, returns the generated Key.\n   *\n   * @param {String} kty The type of generated key\n   * @param {String|Number} [size] The size of the generated key\n   * @param {Object} [props] Additional properties to apply to the generated\n   *        key.\n   * @returns {Promise} The promise for the generated Key\n   * @throws {Error} If {kty} is not supported\n   */\n\n  Object.defineProperty(this, \"generate\", {\n    value: function (kty, size, props) {\n      var keytype = registry.get(kty);\n\n      if (!keytype) {\n        return Promise.reject(new Error(\"unsupported key type\"));\n      }\n\n      props = clone(props || {});\n      props.kty = kty;\n      var self = this,\n          promise = keytype.generate(size);\n      return promise.then(function (jwk) {\n        jwk = merge(props, jwk, {\n          kty: kty\n        });\n        return self.add(jwk);\n      });\n    }\n  });\n  /**\n   * @method JWK.KeyStore#add\n   * @description\n   * Adds a Key to this KeyStore. If {jwk} is a string, it is first\n   * parsed into a plain JSON object. If {jwk} is already an instance\n   * of JWK.Key, its (public) JSON representation is first obtained\n   * then applied to a new JWK.Key object within this KeyStore.\n   *\n   * @param {String|Object} jwk The JSON Web Key (JWK)\n   * @param {String} [form] The format of a String key to expect\n   * @param {Object} [extras] extra jwk fields inserted when importing from a non json string (eg \"pem\")\n   * @returns {Promise} The promise for the added key\n   */\n\n  Object.defineProperty(this, \"add\", {\n    value: function (jwk, form, extras) {\n      extras = extras || {};\n      var factors;\n\n      if (Buffer.isBuffer(jwk) || typeof jwk === \"string\") {\n        // form can be 'json', 'pkcs8', 'spki', 'pkix', 'x509', 'pem'\n        form = (form || \"json\").toLowerCase();\n\n        if (\"json\" === form) {\n          jwk = JSON.parse(jwk.toString(\"utf8\"));\n        } else {\n          try {\n            if (\"pem\" === form) {\n              // convert *first* PEM -> DER\n              factors = fromPEM(jwk);\n            } else {\n              factors = {\n                body: jwk.toString(\"binary\"),\n                form: form\n              };\n            }\n\n            jwk = importFrom(registry, factors);\n\n            if (!jwk) {\n              throw new Error(\"no importer for key\");\n            }\n\n            Object.keys(extras).forEach(function (field) {\n              jwk[field] = extras[field];\n            });\n          } catch (err) {\n            return Promise.reject(err);\n          }\n        }\n      } else if (JWKStore.isKey(jwk)) {\n        // assume a complete duplicate is desired\n        jwk = jwk.toJSON(true);\n      } else {\n        jwk = clone(jwk);\n      }\n\n      var keytype = registry.get(jwk.kty);\n\n      if (!keytype) {\n        return Promise.reject(new Error(\"unsupported key type\"));\n      }\n\n      var self = this,\n          promise = keytype.prepare(jwk);\n      return promise.then(function (cfg) {\n        return new JWK.BaseKey(jwk.kty, self, jwk, cfg);\n      }).then(function (jwk) {\n        var kid = jwk.kid || \"\";\n        var keys = keysets[kid] = keysets[kid] || [];\n        keys.push(jwk);\n        return jwk;\n      });\n    }\n  });\n  /**\n   * @method JWK.KeyStore#remove\n   * @description\n   * Removes a Key from this KeyStore.\n   *\n   * **NOTE:** The removed Key's {keystore} property is not changed.\n   *\n   * @param {JWK.Key} jwk The key to remove.\n   */\n\n  Object.defineProperty(this, \"remove\", {\n    value: function (jwk) {\n      if (!jwk) {\n        return;\n      }\n\n      var keys = keysets[jwk.kid];\n\n      if (!keys) {\n        return;\n      }\n\n      var pos = keys.indexOf(jwk);\n\n      if (pos === -1) {\n        return;\n      }\n\n      keys.splice(pos, 1);\n\n      if (!keys.length) {\n        delete keysets[jwk.kid];\n      }\n    }\n  });\n  /**\n   * @method JWK.KeyStore#all\n   * @description\n   * Retrieves all of the contained Keys that optinally match all of the\n   * given properties.\n   *\n   * If {props} are specified, this method only returns Keys which exactly\n   * match the given properties. The properties can be any of the\n   * following:\n   *\n   * + **alg**: The algorithm for the Key.\n   * + **use**: The usage for the Key.\n   * + **kid**: The identifier for the Key.\n   *\n   * If no properties are given, this method returns all of the Keys for this\n   * KeyStore.\n   *\n   * @param {Object} [props] The properties to match against\n   * @param {Boolean} [local = false] `true` if only the Keys\n   *        directly contained by this KeyStore should be returned, or\n   *        `false` if it should return all Keys of this KeyStore and\n   *        its ancestors.\n   * @returns {JWK.Key[]} The list of matching Keys, or an empty array if no\n   *          matches are found.\n   */\n\n  Object.defineProperty(this, \"all\", {\n    value: function (props, local) {\n      props = props || {}; // workaround for issues/109\n\n      if (props.kid !== undefined && props.kid !== null && typeof props.kid !== \"string\") {\n        props.kid = String(props.kid);\n      }\n\n      var candidates = [];\n\n      var matches = function (key) {\n        // match on 'kty'\n        if (props.kty && key.kty && props.kty !== key.kty) {\n          return false;\n        } // match on 'use'\n\n\n        if (props.use && key.use && props.use !== key.use) {\n          return false;\n        } // match on 'alg'\n\n\n        if (props.alg) {\n          if (props.alg !== \"dir\" && key.alg && props.alg !== key.alg) {\n            return false;\n          }\n\n          return key.supports(props.alg);\n        } //TODO: match on 'key_ops'\n\n\n        return true;\n      };\n\n      Object.keys(keysets).forEach(function (id) {\n        if (props.kid && props.kid !== id) {\n          return;\n        }\n\n        var keys = keysets[id].filter(matches);\n\n        if (keys.length) {\n          candidates = candidates.concat(keys);\n        }\n      });\n\n      if (!local && parent) {\n        candidates = candidates.concat(parent.all(props));\n      }\n\n      return candidates;\n    }\n  });\n  /**\n   * @method JWK.KeyStore#get\n   * @description\n   * Retrieves the contained Key matching the given {kid}, and optionally\n   * all of the given properties.  This method equivalent to calling\n   * {@link JWK.Store#all}, then returning the first Key whose\n   * \"kid\" is {kid}. If {kid} is undefined, then the first Key that\n   * is returned from `all()` is returned.\n   *\n   * @param {String} [kid] The key identifier to match against.\n   * @param {Object} [props] The properties to match against.\n   * @param {Boolean} [local = false] `true` if only the Keys\n   *        directly contained by this KeyStore should be returned, or\n   *        `false` if it should return all Keys of this KeyStore and\n   *        its ancestors.\n   * @returns {JWK.Key} The Key matching {kid} and {props}, or `null`\n   *          if no match is found.\n   */\n\n  Object.defineProperty(this, \"get\", {\n    value: function (kid, props, local) {\n      // reconcile arguments\n      if (typeof kid === \"boolean\") {\n        local = kid;\n        props = kid = null;\n      } else if (typeof kid === \"object\") {\n        local = props;\n        props = kid;\n        kid = null;\n      } // fixup props\n\n\n      props = props || {};\n\n      if (kid) {\n        props.kid = kid;\n      } // workaround for issues/109\n\n\n      if (props.kid !== undefined && props.kid !== null && typeof props.kid !== \"string\") {\n        props.kid = String(props.kid);\n      }\n\n      var candidates = this.all(props, true);\n\n      if (!candidates.length && parent && !local) {\n        candidates = parent.get(props, local);\n      }\n\n      return candidates[0] || null;\n    }\n  });\n  /**\n   * @method JWK.KeyStore#temp\n   * @description\n   * Creates a temporary KeyStore based on this KeyStore.\n   *\n   * @returns {JWK.KeyStore} The temporary KeyStore.\n   */\n\n  Object.defineProperty(this, \"temp\", {\n    value: function () {\n      return new JWKStore(registry, this);\n    }\n  });\n  /**\n   * @method JWK.KeyStore#toJSON\n   * @description\n   * Generates a JSON representation of this KeyStore, which conforms\n   * to a JWK Set from {I-D.ietf-jose-json-web-key}.\n   *\n   * @param {Boolean} [isPrivate = false] `true` if the private fields\n   *        of stored keys are to be included.\n   * @returns {Object} The JSON representation of this KeyStore.\n   */\n\n  Object.defineProperty(this, \"toJSON\", {\n    value: function (isPrivate) {\n      var keys = [];\n      Object.keys(keysets).forEach(function (kid) {\n        var items = keysets[kid].map(function (k) {\n          return k.toJSON(isPrivate);\n        });\n        keys = keys.concat(items);\n      });\n      return {\n        keys: keys\n      };\n    }\n  });\n};\n/**\n * Determines if the given object is an instance of JWK.KeyStore.\n *\n * @param {Object} obj The object to test\n * @returns {Boolean} `true` if {obj} is an instance of JWK.KeyStore,\n *          and `false` otherwise.\n */\n\n\nJWKStore.isKeyStore = function (obj) {\n  if (!obj) {\n    return false;\n  }\n\n  if (\"object\" !== typeof obj) {\n    return false;\n  }\n\n  if (\"function\" !== typeof obj.get || \"function\" !== typeof obj.all || \"function\" !== typeof obj.generate || \"function\" !== typeof obj.add || \"function\" !== typeof obj.remove) {\n    return false;\n  }\n\n  return true;\n};\n/**\n * Creates a new empty KeyStore.\n *\n * @returns {JWK.KeyStore} The empty KeyStore.\n */\n\n\nJWKStore.createKeyStore = function () {\n  return new JWKStore(GLOBAL_REGISTRY);\n};\n/**\n * Coerces the given object into a KeyStore. This method uses the following\n * algorithm to coerce {ks}:\n *\n * 1. if {ks} is an instance of JWK.KeyStore, it is returned directly\n * 2. if {ks} is a string, it is parsed into a JSON value\n * 3. if {ks} is an array, it creates a new JWK.KeyStore and calls {@link\n *    JWK.KeyStore#add} for each element in the {ks} array.\n * 4. if {ks} is a JSON object, it creates a new JWK.KeyStore and calls {@link\n *    JWK.KeyStore#add} for each element in the \"keys\" property.\n *\n * @param {Object|String} ks The value to coerce into a\n *        KeyStore\n * @returns {Promise(JWK.KeyStore)} A promise for the coerced KeyStore.\n */\n\n\nJWKStore.asKeyStore = function (ks) {\n  if (JWKStore.isKeyStore(ks)) {\n    return Promise.resolve(ks);\n  }\n\n  var store = JWKStore.createKeyStore(),\n      keys;\n\n  if (typeof ks === \"string\") {\n    ks = JSON.parse(ks);\n  }\n\n  if (Array.isArray(ks)) {\n    keys = ks;\n  } else if (\"keys\" in ks) {\n    keys = ks.keys;\n  } else {\n    return Promise.reject(new Error(\"invalid keystore\"));\n  }\n\n  keys = keys.map(function (k) {\n    return store.add(k);\n  });\n  var promise = Promise.all(keys);\n  promise = promise.then(function () {\n    return store;\n  });\n  return promise;\n};\n/**\n * Determines if the given object is a JWK.Key instance.\n *\n * @param {Object} obj The object to test\n * @returns `true` if {obj} is a JWK.Key\n */\n\n\nJWKStore.isKey = function (obj) {\n  if (!obj) {\n    return false;\n  }\n\n  if (\"object\" !== typeof obj) {\n    return false;\n  }\n\n  if (!JWKStore.isKeyStore(obj.keystore)) {\n    return false;\n  }\n\n  if (\"string\" !== typeof obj.kty || \"number\" !== typeof obj.length || \"function\" !== typeof obj.algorithms || \"function\" !== typeof obj.supports || \"function\" !== typeof obj.encrypt || \"function\" !== typeof obj.decrypt || \"function\" !== typeof obj.wrap || \"function\" !== typeof obj.unwrap || \"function\" !== typeof obj.sign || \"function\" !== typeof obj.verify) {\n    return false;\n  }\n\n  return true;\n};\n/**\n * Coerces the given object into a Key. If {key} is an instance of JWK.Key,\n * it is returned directly. Otherwise, this method first creates a new\n * JWK.KeyStore and calls {@link JWK.KeyStore#add} on this new KeyStore.\n *\n * @param {Object|String} key The value to coerce into a Key\n * @param {String} [form] The format of a String Key to expect\n * @param {Object} [extras] extra jwk fields inserted when importing from a non json string (eg \"pem\")\n * @returns {Promise(JWK.Key)} A promise for the coerced Key.\n */\n\n\nJWKStore.asKey = function (key, form, extras) {\n  if (JWKStore.isKey(key)) {\n    return Promise.resolve(key);\n  }\n\n  var ks = JWKStore.createKeyStore();\n  key = ks.add(key, form, extras);\n  return key;\n};\n\nmodule.exports = {\n  KeyRegistry: JWKRegistry,\n  KeyStore: JWKStore,\n  registry: GLOBAL_REGISTRY\n};","map":null,"metadata":{},"sourceType":"script"}