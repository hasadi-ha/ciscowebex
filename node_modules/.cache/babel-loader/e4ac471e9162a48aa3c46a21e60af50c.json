{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nexports.default = detectFileType;\n\nvar _httpCore = require('@webex/http-core');\n\nvar _mimeTypes = require('mime-types');\n\nvar _mimeTypes2 = _interopRequireDefault(_mimeTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Determines the file type of the specified file\n * @param {FileLike} file\n * @param {Object} logger\n * @returns {Promise<string>}\n */\n\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nfunction detectFileType(file, logger) {\n  if (file.type) {\n    logger.info('file already has type ' + file.type + '. using existing file.type.');\n    return _promise2.default.resolve(file.type);\n  }\n\n  if (file.mimeType) {\n    logger.info('file already has mimeType ' + file.type + '. using existing file.mimeType.');\n    return _promise2.default.resolve(file.mimeType);\n  } // This kinda belongs in http core, but since we have no guarantee that\n  // buffers are expected to have names there, it'll stay here for now.\n\n\n  return (0, _httpCore.detect)(file).then(function (type) {\n    if (type === 'application/x-msi' || type === 'application/octet-stream') {\n      logger.info('detected filetype to be ' + type + '. Falling back to mime.lookup');\n      return _mimeTypes2.default.lookup(file.name);\n    }\n\n    logger.info('detected filetype to be ' + type + '. returning it');\n    return type;\n  });\n}","map":null,"metadata":{},"sourceType":"script"}