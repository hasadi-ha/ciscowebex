{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _map = require('babel-runtime/core-js/map');\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _weakMap = require('babel-runtime/core-js/weak-map');\n\nvar _weakMap2 = _interopRequireDefault(_weakMap);\n\nvar _common = require('@webex/common');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar usersByEmail = new _weakMap2.default();\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nvar usersById = new _weakMap2.default();\n/**\n * @class\n */\n\nvar UserUUIDStore = function () {\n  /**\n   * @constructs {UserUUIDStore}\n   */\n  function UserUUIDStore() {\n    (0, _classCallCheck3.default)(this, UserUUIDStore);\n    usersByEmail.set(this, new _map2.default());\n    usersById.set(this, new _map2.default());\n  }\n  /**\n   * Adds a user object to the store\n   * @param {Object} user\n   * @param {string} user.id\n   * @param {string} user.emailAddress\n   * @returns {Promise}\n   */\n\n\n  (0, _createClass3.default)(UserUUIDStore, [{\n    key: 'add',\n    value: function add(user) {\n      var _this = this;\n\n      if (!user.id) {\n        return _promise2.default.reject(new Error('`user.id` is required'));\n      }\n\n      if (!user.emailAddress) {\n        return _promise2.default.reject(new Error('`user.emailAddress` is required'));\n      }\n\n      if (!_common.patterns.uuid.test(user.id)) {\n        return _promise2.default.reject(new Error('`user.id` does not appear to be a uuid'));\n      }\n\n      if (!_common.patterns.email.test(user.emailAddress)) {\n        return _promise2.default.reject(new Error('`user.emailAddress` does not appear to be an email address'));\n      }\n\n      var p1 = this.getById(user.id).then(function (u) {\n        return usersById.get(_this).set(user.id, (0, _assign2.default)({}, u, user));\n      }).catch(function () {\n        return usersById.get(_this).set(user.id, (0, _assign2.default)({}, user));\n      });\n      var p2 = this.getByEmail(user.emailAddress).then(function (u) {\n        return usersByEmail.get(_this).set(user.emailAddress, (0, _assign2.default)({}, u, user));\n      }).catch(function () {\n        return usersByEmail.get(_this).set(user.emailAddress, (0, _assign2.default)({}, user));\n      });\n      return _promise2.default.all([p1, p2]);\n    }\n    /**\n     * Retrievves the specified user object from the store\n     * @param {string} id\n     * @returns {Promise<Object>}\n     */\n\n  }, {\n    key: 'get',\n    value: function get(id) {\n      if (_common.patterns.uuid.test(id)) {\n        return this.getById(id);\n      }\n\n      if (_common.patterns.email.test(id)) {\n        return this.getByEmail(id);\n      }\n\n      return _promise2.default.reject(new Error('`id` does not appear to be a valid user identifier'));\n    }\n    /**\n     * Retrieves the specified user object by id from the store\n     * @param {Object} id\n     * @returns {Promise<Object>}\n     */\n\n  }, {\n    key: 'getById',\n    value: function getById(id) {\n      var ret = usersById.get(this).get(id);\n\n      if (ret) {\n        return _promise2.default.resolve(ret);\n      }\n\n      return _promise2.default.reject(new Error('No user found by specified id'));\n    }\n    /**\n     * Retrieves the specified user object by id from the store\n     * @param {Object} email\n     * @returns {Promise<Object>}\n     */\n\n  }, {\n    key: 'getByEmail',\n    value: function getByEmail(email) {\n      var ret = usersByEmail.get(this).get(email);\n\n      if (ret) {\n        return _promise2.default.resolve(ret);\n      }\n\n      return _promise2.default.reject(new Error('No user found by specified email address'));\n    }\n  }]);\n  return UserUUIDStore;\n}();\n\nexports.default = UserUUIDStore;","map":null,"metadata":{},"sourceType":"script"}