{"ast":null,"code":"/*!\n * algorithms/index.js - Cryptographic Algorithms Entry Point\n *\n * Copyright (c) 2015 Cisco Systems, Inc.  See LICENSE file.\n */\n\"use strict\"; // setup implementations\n\nvar implementations = [require(\"./aes-cbc-hmac-sha2.js\"), require(\"./aes-gcm.js\"), require(\"./aes-kw.js\"), require(\"./concat.js\"), require(\"./dir.js\"), require(\"./ecdh.js\"), require(\"./ecdsa.js\"), require(\"./hkdf.js\"), require(\"./hmac.js\"), require(\"./pbes2.js\"), require(\"./rsaes.js\"), require(\"./rsassa.js\"), require(\"./sha.js\")];\nvar ALGS_DIGEST = {};\nvar ALGS_DERIVE = {};\nvar ALGS_SIGN = {},\n    ALGS_VRFY = {};\nvar ALGS_ENC = {},\n    ALGS_DEC = {};\nimplementations.forEach(function (mod) {\n  Object.keys(mod).forEach(function (alg) {\n    var op = mod[alg];\n\n    if (\"function\" === typeof op.encrypt) {\n      ALGS_ENC[alg] = op.encrypt;\n    }\n\n    if (\"function\" === typeof op.decrypt) {\n      ALGS_DEC[alg] = op.decrypt;\n    }\n\n    if (\"function\" === typeof op.sign) {\n      ALGS_SIGN[alg] = op.sign;\n    }\n\n    if (\"function\" === typeof op.verify) {\n      ALGS_VRFY[alg] = op.verify;\n    }\n\n    if (\"function\" === typeof op.digest) {\n      ALGS_DIGEST[alg] = op.digest;\n    }\n\n    if (\"function\" === typeof op.derive) {\n      ALGS_DERIVE[alg] = op.derive;\n    }\n  });\n}); // public API\n\nexports.digest = function (alg, data, props) {\n  var op = ALGS_DIGEST[alg];\n\n  if (!op) {\n    return Promise.reject(new Error(\"unsupported algorithm: \" + alg));\n  }\n\n  return op(data, props);\n};\n\nexports.derive = function (alg, key, props) {\n  var op = ALGS_DERIVE[alg];\n\n  if (!op) {\n    return Promise.reject(new Error(\"unsupported algorithm: \" + alg));\n  }\n\n  return op(key, props);\n};\n\nexports.sign = function (alg, key, pdata, props) {\n  var op = ALGS_SIGN[alg];\n\n  if (!op) {\n    return Promise.reject(new Error(\"unsupported algorithm: \" + alg));\n  }\n\n  return op(key, pdata, props || {});\n};\n\nexports.verify = function (alg, key, pdata, mac, props) {\n  var op = ALGS_VRFY[alg];\n\n  if (!op) {\n    return Promise.reject(new Error(\"unsupported algorithm: \" + alg));\n  }\n\n  return op(key, pdata, mac, props || {});\n};\n\nexports.encrypt = function (alg, key, pdata, props) {\n  var op = ALGS_ENC[alg];\n\n  if (!op) {\n    return Promise.reject(new Error(\"unsupported algorithm: \" + alg));\n  }\n\n  return op(key, pdata, props || {});\n};\n\nexports.decrypt = function (alg, key, cdata, props) {\n  var op = ALGS_DEC[alg];\n\n  if (!op) {\n    return Promise.reject(new Error(\"unsupported algorithm: \" + alg));\n  }\n\n  return op(key, cdata, props || {});\n};","map":null,"metadata":{},"sourceType":"script"}