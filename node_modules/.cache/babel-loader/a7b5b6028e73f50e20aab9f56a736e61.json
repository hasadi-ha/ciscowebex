{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _deleteProperty = require('babel-runtime/core-js/reflect/delete-property');\n\nvar _deleteProperty2 = _interopRequireDefault(_deleteProperty);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _weakMap = require('babel-runtime/core-js/weak-map');\n\nvar _weakMap2 = _interopRequireDefault(_weakMap);\n\nvar _webexCore = require('@webex/webex-core');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar namespaces = new _weakMap2.default();\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n/* eslint-env browser */\n\nvar loggers = new _weakMap2.default();\n/**\n * localStorage adapter for webex-core storage layer\n */\n\nvar StorageAdapterLocalStorage = function () {\n  /**\n   * @constructs {StorageAdapterLocalStorage}\n   * @param {string} basekey localStorage key underwhich all namespaces will be\n   * stored\n   */\n  function StorageAdapterLocalStorage(basekey) {\n    (0, _classCallCheck3.default)(this, StorageAdapterLocalStorage);\n    /**\n     * localStorage binding\n     */\n\n    this.Bound = function () {\n      /**\n       * @constructs {Bound}\n       * @param {string} namespace\n       * @param {Object} options\n       */\n      function _class(namespace, options) {\n        (0, _classCallCheck3.default)(this, _class);\n        namespaces.set(this, namespace);\n        loggers.set(this, options.logger);\n      }\n      /**\n       * @private\n       * @returns {rawData}\n       */\n\n\n      (0, _createClass3.default)(_class, [{\n        key: '_getRawData',\n        value: function _getRawData() {\n          var rawData = localStorage.getItem(basekey);\n          return rawData ? JSON.parse(rawData) : {};\n        }\n        /**\n         * @private\n         * @returns {mixed}\n         */\n\n      }, {\n        key: '_load',\n        value: function _load() {\n          var allData = this._getRawData();\n\n          return allData[namespaces.get(this)] || {};\n        }\n        /**\n         * @param {Object} data\n         * @private\n         * @returns {undefined}\n         */\n\n      }, {\n        key: '_save',\n        value: function _save(data) {\n          var allData = this._getRawData();\n\n          allData[namespaces.get(this)] = data;\n          localStorage.setItem(basekey, (0, _stringify2.default)(allData));\n        }\n        /**\n         * Clears the localStorage\n         * @param {string} key\n         * @returns {Promise}\n         */\n\n      }, {\n        key: 'clear',\n        value: function clear() {\n          loggers.get(this).info('local-storage-store-adapter: clearing localStorage');\n          return _promise2.default.resolve(localStorage.removeItem(basekey));\n        }\n        /**\n         * Removes the specified key\n         * @param {string} key\n         * @returns {Promise}\n         */\n\n      }, {\n        key: 'del',\n        value: function del(key) {\n          var _this = this;\n\n          return new _promise2.default(function (resolve) {\n            loggers.get(_this).info('local-storage-store-adapter: deleting `' + key + '`');\n\n            var data = _this._load();\n\n            (0, _deleteProperty2.default)(data, key);\n\n            _this._save(data);\n\n            resolve();\n          });\n        }\n        /**\n         * Retrieves the data at the specified key\n         * @param {string} key\n         * @returns {Promise<mixed>}\n         */\n\n      }, {\n        key: 'get',\n        value: function get(key) {\n          var _this2 = this;\n\n          return new _promise2.default(function (resolve, reject) {\n            loggers.get(_this2).info('local-storage-store-adapter: reading `' + key + '`');\n\n            var data = _this2._load();\n\n            var value = data[key];\n\n            if (typeof value !== 'undefined') {\n              return resolve(value);\n            }\n\n            return reject(new _webexCore.NotFoundError('No value found for ' + key));\n          });\n        }\n        /**\n         * Stores the specified value at the specified key\n         * @param {string} key\n         * @param {mixed} value\n         * @returns {Promise}\n         */\n\n      }, {\n        key: 'put',\n        value: function put(key, value) {\n          var _this3 = this;\n\n          return new _promise2.default(function (resolve) {\n            loggers.get(_this3).info('local-storage-store-adapter: writing `' + key + '`');\n\n            var data = _this3._load();\n\n            data[key] = value;\n\n            _this3._save(data);\n\n            resolve();\n          });\n        }\n      }]);\n      return _class;\n    }();\n  }\n  /**\n   * Returns an adapter bound to the specified namespace\n   * @param {string} namespace\n   * @param {Object} options\n   * @returns {Promise<Bound>}\n   */\n\n\n  (0, _createClass3.default)(StorageAdapterLocalStorage, [{\n    key: 'bind',\n    value: function bind(namespace, options) {\n      options = options || {};\n\n      if (!namespace) {\n        return _promise2.default.reject(new Error('`namespace` is required'));\n      }\n\n      if (!options.logger) {\n        return _promise2.default.reject(new Error('`options.logger` is required'));\n      }\n\n      options.logger.info('local-storage-store-adapter: returning binding');\n      return _promise2.default.resolve(new this.Bound(namespace, options));\n    }\n  }]);\n  return StorageAdapterLocalStorage;\n}();\n\nexports.default = StorageAdapterLocalStorage;","map":null,"metadata":{},"sourceType":"script"}