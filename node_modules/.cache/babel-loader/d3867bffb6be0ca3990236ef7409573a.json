{"ast":null,"code":"var slice = Array.prototype.slice; // our constructor\n\nfunction KeyTreeStore(options) {\n  options = options || {};\n\n  if (typeof options !== 'object') {\n    throw new TypeError('Options must be an object');\n  }\n\n  var DEFAULT_SEPARATOR = '.';\n  this.storage = {};\n  this.separator = options.separator || DEFAULT_SEPARATOR;\n} // add an object to the store\n\n\nKeyTreeStore.prototype.add = function (keypath, obj) {\n  var arr = this.storage[keypath] || (this.storage[keypath] = []);\n  arr.push(obj);\n}; // remove an object\n\n\nKeyTreeStore.prototype.remove = function (obj) {\n  var path, arr;\n\n  for (path in this.storage) {\n    arr = this.storage[path];\n    arr.some(function (item, index) {\n      if (item === obj) {\n        arr.splice(index, 1);\n        return true;\n      }\n    });\n  }\n}; // get array of all all relevant functions, without keys\n\n\nKeyTreeStore.prototype.get = function (keypath) {\n  var res = [];\n  var key;\n\n  for (key in this.storage) {\n    if (!keypath || keypath === key || key.indexOf(keypath + this.separator) === 0) {\n      res = res.concat(this.storage[key]);\n    }\n  }\n\n  return res;\n}; // get all results that match keypath but still grouped by key\n\n\nKeyTreeStore.prototype.getGrouped = function (keypath) {\n  var res = {};\n  var key;\n\n  for (key in this.storage) {\n    if (!keypath || keypath === key || key.indexOf(keypath + this.separator) === 0) {\n      res[key] = slice.call(this.storage[key]);\n    }\n  }\n\n  return res;\n}; // get all results that match keypath but still grouped by key\n\n\nKeyTreeStore.prototype.getAll = function (keypath) {\n  var res = {};\n  var key;\n\n  for (key in this.storage) {\n    if (keypath === key || key.indexOf(keypath + this.separator) === 0) {\n      res[key] = slice.call(this.storage[key]);\n    }\n  }\n\n  return res;\n}; // run all matches with optional context\n\n\nKeyTreeStore.prototype.run = function (keypath, context) {\n  var args = slice.call(arguments, 2);\n  this.get(keypath).forEach(function (fn) {\n    fn.apply(context || this, args);\n  });\n};\n\nmodule.exports = KeyTreeStore;","map":null,"metadata":{},"sourceType":"script"}