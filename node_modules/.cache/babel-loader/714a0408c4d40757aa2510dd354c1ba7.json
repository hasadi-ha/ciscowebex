{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _deleteProperty = require('babel-runtime/core-js/reflect/delete-property');\n\nvar _deleteProperty2 = _interopRequireDefault(_deleteProperty);\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _httpCore = require('@webex/http-core');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar pattern = /(?:^\\/)|(?:\\/$)/;\n/**\n * @class\n */\n\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nvar UrlInterceptor = function (_Interceptor) {\n  (0, _inherits3.default)(UrlInterceptor, _Interceptor);\n\n  function UrlInterceptor() {\n    (0, _classCallCheck3.default)(this, UrlInterceptor);\n    return (0, _possibleConstructorReturn3.default)(this, (UrlInterceptor.__proto__ || (0, _getPrototypeOf2.default)(UrlInterceptor)).apply(this, arguments));\n  }\n\n  (0, _createClass3.default)(UrlInterceptor, [{\n    key: 'onRequest',\n\n    /**\n     * @see Interceptor#onRequest\n     * @param {Object} options\n     * @returns {Object}\n     */\n    value: function onRequest(options) {\n      if (!options.uri) {\n        this.checkOptions(options);\n        this.normalizeOptions(options);\n        return this.webex.internal.device.getServiceUrl(options.service).then(function (uri) {\n          if (!uri) {\n            return _promise2.default.reject(new Error('`' + options.service + '` is not a known service'));\n          } // strip leading and trailing slashes before assembling the full uri\n\n\n          if (options.resource) {\n            uri = uri.replace(pattern, '') + '/' + options.resource.replace(pattern, '');\n          }\n\n          options.uri = uri;\n          return options;\n        });\n      }\n\n      return options;\n    }\n    /**\n     * Verify that all required parameters have been specified.\n     * @param {Object} options\n     * @returns {Object}\n     */\n\n  }, {\n    key: 'checkOptions',\n    value: function checkOptions(options) {\n      if (!options.api && !options.service) {\n        throw new Error('A `service` or `uri` parameter is required');\n      }\n\n      if (!options.resource) {\n        throw new Error('A `resource` parameter is required');\n      }\n    }\n    /**\n     * accept api or service and rename to service\n     * @param {Object} options\n     * @private\n     * @returns {Object}\n     */\n\n  }, {\n    key: 'normalizeOptions',\n    value: function normalizeOptions(options) {\n      if (options.service) {\n        return;\n      }\n\n      (0, _assign2.default)(options, {\n        service: options.service || options.api\n      });\n      (0, _deleteProperty2.default)(options, 'api');\n    }\n  }], [{\n    key: 'create',\n\n    /**\n     * @returns {UrlInterceptor}\n     */\n    value: function create() {\n      /* eslint no-invalid-this: [0] */\n      return new UrlInterceptor({\n        webex: this\n      });\n    }\n  }]);\n  return UrlInterceptor;\n}(_httpCore.Interceptor);\n\nexports.default = UrlInterceptor;","map":null,"metadata":{},"sourceType":"script"}