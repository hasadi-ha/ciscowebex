{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _batcher = require('./batcher');\n\nvar _batcher2 = _interopRequireDefault(_batcher);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar CallDiagnosticEventsBatcher = _batcher2.default.extend({\n  namespace: 'Metrics',\n  prepareItem: function prepareItem(item) {\n    // networkType should be a enum value: `wifi`, `ethernet`, `cellular`, or `unknown`.\n    // Browsers cannot provide such information right now. However, it is a required field.\n    var origin = {\n      buildType: process.env.NODE_ENV === 'production' ? 'prod' : 'test',\n      networkType: 'unknown'\n    };\n    item.eventPayload.origin = (0, _assign2.default)(origin, item.eventPayload.origin);\n    return _promise2.default.resolve(item);\n  },\n  prepareRequest: function prepareRequest(queue) {\n    // Add sent timestamp\n    queue.forEach(function (item) {\n      item.eventPayload.originTime.sent = new Date().toISOString();\n    });\n    return _promise2.default.resolve(queue);\n  },\n  submitHttpRequest: function submitHttpRequest(payload) {\n    return this.webex.request({\n      method: 'POST',\n      service: 'metrics',\n      resource: 'clientmetrics',\n      body: {\n        metrics: payload\n      }\n    });\n  }\n});\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nexports.default = CallDiagnosticEventsBatcher;","map":null,"metadata":{},"sourceType":"script"}