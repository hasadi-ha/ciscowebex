{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _deleteProperty = require('babel-runtime/core-js/reflect/delete-property');\n\nvar _deleteProperty2 = _interopRequireDefault(_deleteProperty);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _clone2 = require('lodash/clone');\n\nvar _clone3 = _interopRequireDefault(_clone2);\n\nvar _httpCore = require('@webex/http-core');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar requestHeaderName = 'cisco-no-http-redirect';\n/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nvar responseHeaderName = 'cisco-location';\nvar LOCUS_REDIRECT_ERROR = 2000002;\n/**\n * @class\n */\n\nvar RedirectInterceptor = function (_Interceptor) {\n  (0, _inherits3.default)(RedirectInterceptor, _Interceptor);\n\n  function RedirectInterceptor() {\n    (0, _classCallCheck3.default)(this, RedirectInterceptor);\n    return (0, _possibleConstructorReturn3.default)(this, (RedirectInterceptor.__proto__ || (0, _getPrototypeOf2.default)(RedirectInterceptor)).apply(this, arguments));\n  }\n\n  (0, _createClass3.default)(RedirectInterceptor, [{\n    key: 'onRequest',\n\n    /**\n     * @see Interceptor#onRequest\n     * @param {Object} options\n     * @returns {Object}\n     */\n    value: function onRequest(options) {\n      if (options.uri.includes(this.spark.config.credentials.samlUrl) || options.uri.includes(this.spark.config.credentials.tokenUrl) || options.uri.includes(this.spark.config.credentials.authorizeUrl)) {\n        return options;\n      } // If cisco-no-http-redirect is already set, don't overwrite it\n\n\n      if (requestHeaderName in options.headers) {\n        // If cisco-no-http-redirect is set to null, false, or undefined, delete\n        // it to prevent a CORS preflight.\n        if (!options.headers[requestHeaderName]) {\n          (0, _deleteProperty2.default)(options.headers, requestHeaderName);\n        }\n\n        return options;\n      }\n\n      options.headers[requestHeaderName] = true;\n      options.$redirectCount = options.$redirectCount || 0;\n      return options;\n    }\n    /**\n     * @see Interceptor#onResponse\n     * @param {Object} options\n     * @param {HttpResponse} response\n     * @returns {Object}\n     */\n\n  }, {\n    key: 'onResponse',\n    value: function onResponse(options, response) {\n      /* eslint-disable no-else-return */\n      if (response.headers && response.headers[responseHeaderName]) {\n        options = (0, _clone3.default)(options);\n        options.uri = response.headers[responseHeaderName];\n        options.$redirectCount += 1;\n\n        if (options.$redirectCount > this.spark.config.maxAppLevelRedirects) {\n          return _promise2.default.reject(new Error('Maximum redirects exceeded'));\n        }\n\n        return this.spark.request(options);\n      } else if (response.headers && response.body && response.body.errorCode === LOCUS_REDIRECT_ERROR && response.body.location) {\n        options = (0, _clone3.default)(options);\n\n        if (response.options && response.options.qs) {\n          // for POST requests\n          var newUrl = response.body.location.split('?');\n          options.uri = newUrl[0]; // params are already present in the qs\n        } else {\n          // for GET requests\n          options.uri = response.body.location;\n        }\n\n        options.$redirectCount += 1;\n\n        if (options.$redirectCount > this.spark.config.maxLocusRedirects) {\n          return _promise2.default.reject(new Error('Maximum redirects exceeded'));\n        }\n\n        return this.spark.request(options);\n      }\n      /* eslint-enable no-else-return */\n\n\n      return response;\n    }\n  }], [{\n    key: 'create',\n\n    /**\n     * @returns {RedirectInterceptor}\n     */\n    value: function create() {\n      return new RedirectInterceptor({\n        spark: this\n      });\n    }\n  }]);\n  return RedirectInterceptor;\n}(_httpCore.Interceptor);\n\nexports.default = RedirectInterceptor;","map":null,"metadata":{},"sourceType":"script"}