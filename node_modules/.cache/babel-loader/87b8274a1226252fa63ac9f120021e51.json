{"ast":null,"code":"/**!\n * lib/keyobject.js -- KMS Key Representation\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\"use strict\";\n\nvar jose = require(\"node-jose\"),\n    uuid = require(\"uuid\");\n\nvar KMS = {\n  KeyObject: require(\"./keyobject\")\n};\n\nfunction KMSContext() {\n  var sharedKey = null,\n      clientInfo = {},\n      serverInfo = {};\n  Object.defineProperty(this, \"ephemeralKey\", {\n    get: function () {\n      // TODO: honor expiration\n      return sharedKey;\n    },\n    set: function (key) {\n      sharedKey = key ? KMS.KeyObject.fromObject(key) : null;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"clientInfo\", {\n    get: function () {\n      return clientInfo;\n    },\n    set: function (info) {\n      // TODO: validate client info\n      clientInfo = info || {};\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"serverInfo\", {\n    get: function () {\n      return serverInfo;\n    },\n    set: function (info) {\n      // TODO: validate server info\n      serverInfo = info || {};\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"requestId\", {\n    value: function () {\n      return uuid();\n    }\n  });\n}\n\nKMSContext.prototype.createECDHKey = function () {\n  var clientInfo = this.clientInfo;\n  var ks = jose.JWK.createKeyStore(); // TODO: make this more configurable\n\n  var keyType = \"EC\",\n      keyOrder = \"P-256\",\n      expiresIn = 3600000;\n  var promise = ks.generate(keyType, keyOrder);\n  promise = promise.then(function (k) {\n    var ts = new Date();\n    var rep = {\n      uri: \"-internal/\" + k.kid,\n      jwk: k.toJSON(true),\n      userId: clientInfo && clientInfo.credential && clientInfo.credential.userId || \"\",\n      clientId: clientInfo && clientInfo.clientId || \"\",\n      createDate: ts,\n      expirationDate: new Date(ts.getTime() + expiresIn)\n    };\n    return new KMS.KeyObject(rep);\n  });\n  return promise;\n};\n\nKMSContext.prototype.deriveEphemeralKey = function (remote) {\n  var local = this.ephemeralKey;\n\n  if (!local || !local.jwk || \"EC\" !== local.jwk.kty) {\n    return Promise.reject(new Error(\"invalid local ECDH key\"));\n  }\n\n  remote = KMS.KeyObject.fromObject(remote);\n  var promise;\n  promise = Promise.all([local.asKey(), remote.asKey()]);\n  promise = promise.then(function (keys) {\n    var lkey = keys[0],\n        rkey = keys[1];\n    var props = {\n      public: rkey.toObject()\n    };\n    var k = lkey.toObject(true);\n    return jose.JWA.derive(\"ECDH-HKDF\", k, props);\n  });\n  promise = promise.then(function (result) {\n    var uri = remote.uri,\n        created = remote.createDate,\n        expires = remote.expirationDate;\n    var shared = {\n      uri: uri,\n      createDate: created,\n      expirationDate: expires,\n      jwk: {\n        kty: \"oct\",\n        kid: uri,\n        alg: \"A256GCM\",\n        k: jose.util.base64url.encode(result)\n      }\n    };\n    return new KMS.KeyObject(shared);\n  });\n  return promise;\n};\n\nmodule.exports = KMSContext;","map":null,"metadata":{},"sourceType":"script"}