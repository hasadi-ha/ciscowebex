{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _apply = require('babel-runtime/core-js/reflect/apply');\n\nvar _apply2 = _interopRequireDefault(_apply);\n\nvar _ampersandCollection = require('ampersand-collection');\n\nvar _ampersandCollection2 = _interopRequireDefault(_ampersandCollection);\n\nvar _call = require('./call');\n\nvar _call2 = _interopRequireDefault(_call);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nvar Calls = _ampersandCollection2.default.extend({\n  model: _call2.default,\n  mainIndex: 'internalCallId',\n  indexes: ['correlationId'],\n\n  /**\n   * Initializer\n   * @private\n   * @param {Object} attrs\n   * @param {Object} options\n   * @returns {undefined}\n   */\n  initialize: function initialize() {\n    var _this = this;\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    (0, _apply2.default)(_ampersandCollection2.default.prototype.initialize, this, args);\n    this.on('add', function (call) {\n      _this.listenTo(call, 'change:state', function () {\n        if (call.config.enableExperimentalGroupCallingSupport) {\n          if (call.state === 'inactive') {\n            _this.remove(call);\n          }\n        } else if (call.status === 'disconnected') {\n          _this.remove(call);\n        }\n      });\n    });\n  },\n\n  /**\n   * Indicates if this collection already contains the specified locus\n   * @param {Types~Locus} locus\n   * @returns {boolean}\n   */\n  has: function has(locus) {\n    var found = this.get(locus.url + '_' + locus.fullState.lastActive);\n\n    if (found) {\n      return true;\n    }\n\n    if (locus.replaces) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = (0, _getIterator3.default)(locus.replaces), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var replaced = _step.value;\n\n          if (this.get(replaced.locusUrl + '_' + replaced.lastActive)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n});\n\nexports.default = Calls;","map":null,"metadata":{},"sourceType":"script"}