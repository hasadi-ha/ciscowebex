{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _pick2 = require('lodash/pick');\n\nvar _pick3 = _interopRequireDefault(_pick2);\n\nexports.default = processImage;\n\nvar _index = require('./index');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/* eslint-env browser */\n\n/**\n * Determins the dimensions of an image\n * @param {Object} constraints\n * @param {Number} constraints.width\n * @param {Number} constraints.height\n * @param {Number} maxWidth\n * @param {Number} maxHeight\n * @returns {Object}\n */\n\n\nfunction computeDimensions(_ref, maxWidth, maxHeight) {\n  var width = _ref.width,\n      height = _ref.height;\n\n  if (height > width) {\n    if (height > maxHeight) {\n      width = width * maxHeight / height;\n      height = maxHeight;\n    }\n\n    if (width > maxWidth) {\n      height = height * maxWidth / width;\n      width = maxWidth;\n    }\n  } else {\n    if (width > maxWidth) {\n      height = height * maxWidth / width;\n      width = maxWidth;\n    }\n\n    if (height > maxHeight) {\n      width = width * maxHeight / height;\n      height = maxHeight;\n    }\n  }\n\n  return {\n    height: height,\n    width: width\n  };\n}\n/**\n * Measures an image file and produces a thumbnail for it\n * @param {Object} options\n * @param {Blob|ArrayBuffer} options.file\n * @param {Number} options.thumbnailMaxWidth\n * @param {Number} options.thumbnailMaxHeight\n * @param {Boolean} options.enableThumbnails\n * @param {Object} options.logger\n * @param {Boolean} options.isAvatar\n * @returns {Promise<Array>} Buffer, Dimensions, thumbnailDimensions\n */\n\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nfunction processImage(_ref2) {\n  var file = _ref2.file,\n      type = _ref2.type,\n      thumbnailMaxWidth = _ref2.thumbnailMaxWidth,\n      thumbnailMaxHeight = _ref2.thumbnailMaxHeight,\n      enableThumbnails = _ref2.enableThumbnails,\n      logger = _ref2.logger,\n      isAvatar = _ref2.isAvatar;\n\n  if (!type || !type.startsWith('image')) {\n    return _promise2.default.resolve();\n  }\n\n  file = file instanceof Blob ? file : new Blob([file]);\n  return new _promise2.default(function (resolve, reject) {\n    var img = new Image();\n\n    img.onload = function onload() {\n      resolve(img);\n    };\n\n    img.onerror = reject;\n    img.src = URL.createObjectURL(file);\n  }).then(function (img) {\n    var fileDimensions = (0, _pick3.default)(img, 'height', 'width');\n\n    if (isAvatar) {\n      // only if image is a profile avatar\n      logger.info('dimensions will be set for avatar image');\n      var size = fileDimensions.height > fileDimensions.width ? fileDimensions.height : fileDimensions.width;\n      fileDimensions.height = size;\n      fileDimensions.width = size;\n    }\n\n    if (!enableThumbnails) {\n      logger.info('thumbnails not enabled');\n      return [null, fileDimensions, null];\n    }\n\n    var thumbnailDimensions = computeDimensions(fileDimensions, thumbnailMaxWidth, thumbnailMaxHeight);\n    var canvas = document.createElement('canvas');\n    canvas.width = thumbnailDimensions.width;\n    canvas.height = thumbnailDimensions.height;\n    var ctx = canvas.getContext('2d');\n    (0, _index.orient)({\n      orientation: file && file.image ? file.image.orientation : '',\n      img: img,\n      x: 0,\n      y: 0,\n      width: thumbnailDimensions.width,\n      height: thumbnailDimensions.height,\n      ctx: ctx\n    }, file);\n    var parts = canvas.toDataURL('image/png').split(','); // Thumbnail uploads were failing with common/base64 decoding\n\n    var byteString = atob(parts[1]);\n    var buffer = new ArrayBuffer(byteString.length);\n    var view = new DataView(buffer);\n\n    for (var i = 0; i < byteString.length; i += 1) {\n      view.setUint8(i, byteString.charCodeAt(i));\n    }\n\n    return [buffer, fileDimensions, thumbnailDimensions];\n  });\n}","map":null,"metadata":{},"sourceType":"script"}