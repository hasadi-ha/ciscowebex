{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _map = require('babel-runtime/core-js/map');\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _errors = require('./errors');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Binds a namespace\n * @param {string} namespace\n * @param {Object} options\n * @param {Object} options.data\n * @private\n * @returns {Promise<Object>}\n */\n\n\nfunction _bind(namespace) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options = options || {};\n\n  if (!namespace) {\n    return _promise2.default.reject(new Error('`namespace` is required'));\n  }\n\n  if (!options.logger) {\n    return _promise2.default.reject(new Error('`options.logger` is required'));\n  }\n\n  var _options = options,\n      logger = _options.logger;\n  var map = new _map2.default();\n\n  if (options.data) {\n    (0, _keys2.default)(options.data).forEach(function (key) {\n      map.set(key, options.data[key]);\n    });\n  }\n\n  logger.debug('memory-store-adapter: returning binding');\n  return _promise2.default.resolve({\n    clear: function clear() {\n      logger.debug('memory-store-adapter: clearing the binding');\n      return _promise2.default.resolve(map.clear());\n    },\n    del: function del(key) {\n      logger.debug('memory-store-adapter: deleting `' + key + '`');\n      return _promise2.default.resolve(map.delete(key));\n    },\n    get: function get(key) {\n      logger.debug('memory-store-adapter: reading `' + key + '`');\n      var res = map.get(key);\n\n      if (typeof res === 'undefined') {\n        return _promise2.default.reject(new _errors.NotFoundError());\n      }\n\n      return _promise2.default.resolve(res);\n    },\n    put: function put(key, value) {\n      logger.debug('memory-store-adapter: writing `' + key + '`');\n      return _promise2.default.resolve(map.set(key, value));\n    }\n  });\n}\n/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nexports.default = {\n  bind: _bind,\n  preload: function preload(data) {\n    return {\n      bind: function bind(namespace) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        if (data[namespace]) {\n          options.data = data[namespace];\n        }\n\n        return _bind(namespace, options);\n      }\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"script"}