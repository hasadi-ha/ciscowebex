{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _apply = require('babel-runtime/core-js/reflect/apply');\n\nvar _apply2 = _interopRequireDefault(_apply);\n\nexports.default = debounce;\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n/**\n * Behaves like debounce, but additionally executes after a number of calls are\n * attempted, rather than just time\n * @param {Function} fn\n * @param {Number} wait\n * @param {Object} options\n * @returns {Function}\n */\n\n\nfunction debounce(fn, wait, options) {\n  /* eslint no-invalid-this: [0] */\n  if (!fn) {\n    throw new Error('`fn` must be a function');\n  }\n\n  if (!wait) {\n    throw new Error('`wait` is required');\n  }\n\n  options = options || {};\n\n  if (!options.maxWait) {\n    throw new Error('`options.maxWait` is required');\n  }\n\n  if (!options.maxCalls) {\n    throw new Error('`options.maxCalls` is required');\n  }\n\n  var _options = options,\n      maxCalls = _options.maxCalls,\n      maxWait = _options.maxWait;\n  var count = 0;\n  var maxWaitTimer = void 0,\n      waitTimer = void 0;\n  return function wrapper() {\n    count += 1;\n    clearTimeout(waitTimer);\n    waitTimer = setTimeout(function () {\n      return exec();\n    }, wait);\n\n    if (!maxWaitTimer) {\n      maxWaitTimer = setTimeout(function () {\n        return exec();\n      }, maxWait);\n    }\n\n    if (count >= maxCalls) {\n      (0, _apply2.default)(exec, this, []);\n    }\n  };\n  /**\n   * @private\n   * @returns {undefined}\n   */\n\n  function exec() {\n    clearTimeout(waitTimer);\n    waitTimer = null;\n    clearTimeout(maxWaitTimer);\n    maxWaitTimer = null;\n    count = 0;\n    (0, _apply2.default)(fn, this, []);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}