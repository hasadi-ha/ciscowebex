{"ast":null,"code":"/*!\n * urlsafe-base64\n */\n\n/**\n * Module Dependencies\n */\n// None yet!\n\n/**\n * Library version.\n */\nexports.version = '1.0.0';\n/**\n * .encode\n *\n * return an encoded Buffer as URL Safe Base64\n *\n * Note: This function encodes to the RFC 4648 Spec where '+' is encoded\n *       as '-' and '/' is encoded as '_'. The padding character '=' is\n *       removed.\n *\n * @param {Buffer} buffer\n * @return {String}\n * @api public\n */\n\nexports.encode = function encode(buffer) {\n  return buffer.toString('base64').replace(/\\+/g, '-') // Convert '+' to '-'\n  .replace(/\\//g, '_') // Convert '/' to '_'\n  .replace(/=+$/, ''); // Remove ending '='\n};\n/**\n * .decode\n *\n * return an decoded URL Safe Base64 as Buffer\n *\n * @param {String}\n * @return {Buffer}\n * @api public\n */\n\n\nexports.decode = function decode(base64) {\n  // Add removed at end '='\n  base64 += Array(5 - base64.length % 4).join('=');\n  base64 = base64.replace(/\\-/g, '+') // Convert '-' to '+'\n  .replace(/\\_/g, '/'); // Convert '_' to '/'\n\n  return new Buffer(base64, 'base64');\n};\n/**\n * .validate\n *\n * Validates a string if it is URL Safe Base64 encoded.\n *\n * @param {String}\n * @return {Boolean}\n * @api public\n */\n\n\nexports.validate = function validate(base64) {\n  return /^[A-Za-z0-9\\-_]+$/.test(base64);\n};","map":null,"metadata":{},"sourceType":"script"}