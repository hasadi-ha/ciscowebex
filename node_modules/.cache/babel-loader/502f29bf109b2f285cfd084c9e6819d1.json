{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _ampersandCollection = require('ampersand-collection');\n\nvar _ampersandCollection2 = _interopRequireDefault(_ampersandCollection);\n\nvar _serviceModel = require('./service-model');\n\nvar _serviceModel2 = _interopRequireDefault(_serviceModel);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Collection of catalog services parsed from wdm registration.serviceHostMap.serviceLinks and\n * registration.serviceHostMap.hostCatalog\n * @class\n */\n\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nvar ServiceCollection = _ampersandCollection2.default.extend({\n  mainIndex: 'service',\n  model: _serviceModel2.default,\n\n  /**\n   * Mark the current host as failed and grab another url for connection\n   * @param {string} uri Mark the host of this url as fail\n   * @returns {string} new Url for connection\n   */\n  markFailedAndCycleUrl: function markFailedAndCycleUrl(uri) {\n    if (!uri) {\n      return _promise2.default.reject(new Error('`uri` is a required parameter'));\n    }\n\n    return this.inferServiceFromUrl(uri).then(function (service) {\n      service.markHostFailed(uri);\n      return service.cycleNextHost().then(function () {\n        return service.url;\n      });\n    });\n  },\n\n  /**\n   * Reset the available hosts if we are done trying all the host URLs\n   * @param {string} uri to fetch the available hosts\n   * @returns {string} new Url for connection\n   */\n  resetAllAndRetry: function resetAllAndRetry(uri) {\n    if (!uri) {\n      return _promise2.default.reject(new Error('`uri` is a required parameter'));\n    }\n\n    return this.inferServiceFromUrl(uri).then(function (service) {\n      service.resetAllHosts();\n      return service.url;\n    });\n  },\n\n  /**\n   * Find out what service this url belongs to (by looking at the host name)\n   * @param {string} uri\n   * @returns {Promise<ServiceModel>}\n   */\n  inferServiceFromUrl: function inferServiceFromUrl(uri) {\n    var services = this.filter(function (service) {\n      return service.doesUrlBelongToService(uri);\n    });\n\n    if (services.length >= 1) {\n      return _promise2.default.resolve(services[0]);\n    }\n\n    return _promise2.default.reject(new Error('Unable to infer service for this url ' + uri));\n  },\n\n  /**\n   * Find out what service this url belongs to, this returns the service name\n   * instead of the service object\n   * @param {string} uri Mark the host of this url as fail\n   * @returns {Promise<ServiceModel.Service>}\n   */\n  inferServiceNameFromUrl: function inferServiceNameFromUrl(uri) {\n    return this.inferServiceFromUrl(uri).then(function (service) {\n      return service.service;\n    });\n  }\n});\n\nexports.default = ServiceCollection;","map":null,"metadata":{},"sourceType":"script"}