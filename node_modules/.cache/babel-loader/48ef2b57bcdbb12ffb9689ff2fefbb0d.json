{"ast":null,"code":"/*!\n * parse/compact.js - JOSE JSON Serialization Parser\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\"use strict\";\n\nvar merge = require(\"../util/merge\");\n\nvar jose = {\n  JWE: require(\"../jwe\"),\n  JWS: require(\"../jws\"),\n  util: require(\"../util\")\n};\n\nfunction parseJSON(input) {\n  var type, op, headers;\n\n  if (\"signatures\" in input || \"signature\" in input) {\n    // JWS\n    type = \"JWS\";\n\n    op = function (ks, opts) {\n      return jose.JWS.createVerify(ks).verify(input, opts);\n    }; // headers can be (signatures[].protected, signatures[].header, signature.protected, signature.header)\n\n\n    headers = input.signatures || [{\n      protected: input.protected,\n      header: input.header,\n      signature: input.signature\n    }];\n    headers = headers.map(function (sig) {\n      var all = {};\n\n      if (sig.header) {\n        all = merge(all, sig.header);\n      }\n\n      var prot;\n\n      if (sig.protected) {\n        prot = sig.protected;\n        prot = jose.util.base64url.decode(prot, \"utf8\");\n        prot = JSON.parse(prot);\n        all = merge(all, prot);\n      }\n\n      return all;\n    });\n  } else if (\"ciphertext\" in input) {\n    // JWE\n    type = \"JWE\";\n\n    op = function (ks, opts) {\n      return jose.JWE.createDecrypt(ks).decrypt(input, opts);\n    }; // headers can be (protected, unprotected, recipients[].header)\n\n\n    var root = {};\n\n    if (input.protected) {\n      root.protected = input.protected;\n      root.protected = jose.util.base64url.decode(root.protected, \"utf8\");\n      root.protected = JSON.parse(root.protected);\n    }\n\n    if (input.unprotected) {\n      root.unprotected = input.unprotected;\n    }\n\n    headers = input.recipients || [{}];\n    headers = headers.map(function (rcpt) {\n      var all = {};\n\n      if (rcpt.header) {\n        all = merge(all, rcpt.header);\n      }\n\n      if (root.unprotected) {\n        all = merge(all, root.unprotected);\n      }\n\n      if (root.protected) {\n        all = merge(all, root.protected);\n      }\n\n      return all;\n    });\n  }\n\n  return {\n    type: type,\n    format: \"json\",\n    input: input,\n    all: headers,\n    perform: op\n  };\n}\n\nmodule.exports = parseJSON;","map":null,"metadata":{},"sourceType":"script"}