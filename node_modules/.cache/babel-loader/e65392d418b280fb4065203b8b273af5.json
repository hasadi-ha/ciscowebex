{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _cloneDeep2 = require('lodash/cloneDeep');\n\nvar _cloneDeep3 = _interopRequireDefault(_cloneDeep2);\n\nvar _common = require('@webex/common');\n\nvar _webexCore = require('@webex/webex-core');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nvar debug = require('debug')('memberships');\n/**\n * @typedef {Object} MembershipObject\n * @property {string} id - Unique identifier for the membership\n * @property {string} roomId - The room ID\n * @property {string} personId - The person ID\n * @property {email} personEmail - The email address of the person / room member\n * @property {boolean} isModerator - Indicates whether the specified person should be a room moderator\n * @property {boolean} isMonitor - Indicates whether the specified member is a room monitor\n * @property {isoDate} created - The date and time that this membership was created\n */\n\n/**\n * Memberships represent a person's relationship to a room. Use this API to list\n * members of any room that you're in or create memberships to invite someone\n * to a room. Memberships can also be updated to make someone a moderator\n * or deleted to remove them from the room.\n * @class\n * @name Memberships\n */\n\n\nvar Memberships = _webexCore.SparkPlugin.extend({\n  /**\n   * Connect to the web socket to listen to incoming messages.\n   * @returns {Promise}\n   */\n  listen: function listen() {\n    var _this = this; // Create a common envelope that we will wrap all events in\n\n\n    return (0, _common.createEventEnvelope)(this.spark, _common.SDK_EVENT.EXTERNAL.RESOURCE.MEMBERSHIPS).then(function (envelope) {\n      _this.eventEnvelope = envelope; // Register to listen to events\n\n      return _this.spark.internal.mercury.connect().then(function () {\n        _this.listenTo(_this.spark.internal.mercury, _common.SDK_EVENT.INTERNAL.TEAMS_ACTIVITY, function (event) {\n          return _this.onWebexApiEvent(event);\n        });\n      });\n    });\n  },\n\n  /**\n   * Trigger a membership related events.\n   * @param {Object} event\n   * @returns {undefined} -- nothing //linter requires return in JSDoc\n   */\n  onWebexApiEvent: function onWebexApiEvent(event) {\n    var activity = event.data.activity;\n    /* eslint-disable no-case-declarations */\n\n    switch (activity.verb) {\n      case _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.ADD:\n        var membershipCreatedEventData = this.getMembershipEvent(activity, _common.SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED);\n\n        if (membershipCreatedEventData) {\n          debug('membership \"created\" payload:             ' + (0, _stringify2.default)(membershipCreatedEventData));\n          this.trigger(_common.SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED, membershipCreatedEventData);\n        }\n\n        break;\n\n      case _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.LEAVE:\n        var membershipDeletedEventData = this.getMembershipEvent(activity, _common.SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED);\n\n        if (membershipDeletedEventData) {\n          debug('membership \"deleted\" payload:             ' + (0, _stringify2.default)(membershipDeletedEventData));\n          this.trigger(_common.SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED, membershipDeletedEventData);\n        }\n\n        break;\n\n      case _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.ADD_MODERATOR:\n      case _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.REMOVE_MODERATOR:\n      case _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.HIDE:\n        var membershipUpdatedEventData = this.getMembershipEvent(activity, _common.SDK_EVENT.EXTERNAL.EVENT_TYPE.UPDATED);\n\n        if (membershipUpdatedEventData) {\n          debug('membership \"updated\" payload:             ' + (0, _stringify2.default)(membershipUpdatedEventData));\n          this.trigger(_common.SDK_EVENT.EXTERNAL.EVENT_TYPE.UPDATED, membershipUpdatedEventData);\n        }\n\n        break;\n\n      case _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.ACKNOWLEDGE:\n        var membershipSeenEventData = this.getMembershipEvent(activity, _common.SDK_EVENT.EXTERNAL.EVENT_TYPE.SEEN);\n\n        if (membershipSeenEventData) {\n          debug('membership \"updated\" payload:             ' + (0, _stringify2.default)(membershipSeenEventData));\n          this.trigger(_common.SDK_EVENT.EXTERNAL.EVENT_TYPE.SEEN, membershipSeenEventData);\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  },\n\n  /**\n   * Constructs the data object for an event on the memberships resource,\n   * adhering to Hydra's Webehook data structure memberships.\n   * @param {Object} activity from mercury\n   * @param {Object} event type of \"webhook\" event\n   * @returns {Object} constructed event\n   */\n  getMembershipEvent: function getMembershipEvent(activity, event) {\n    try {\n      var sdkEvent = (0, _cloneDeep3.default)(this.eventEnvelope);\n      var member = void 0;\n      var space = void 0;\n      sdkEvent.event = event;\n      sdkEvent.data.created = activity.published;\n      sdkEvent.actorId = (0, _common.buildHydraPersonId)(activity.actor.entryUUID);\n\n      if (activity.verb !== _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.HIDE) {\n        sdkEvent.data.roomId = (0, _common.buildHydraRoomId)(activity.target.id);\n        sdkEvent.data.roomType = (0, _common.getHydraRoomType)(activity.target.tags);\n        sdkEvent.data.isRoomHidden = false; // any activity unhides a space.\n      } else {\n        sdkEvent.data.roomId = (0, _common.buildHydraRoomId)(activity.object.id);\n        sdkEvent.data.roomType = _common.SDK_EVENT.EXTERNAL.SPACE_TYPE.DIRECT; // currently hidden attribute is only set on 1-1\n\n        sdkEvent.data.isRoomHidden = true;\n      }\n\n      if (activity.verb !== _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.ACKNOWLEDGE) {\n        if (activity.object.roomProperties && activity.object.roomProperties.isModerator) {\n          sdkEvent.data.isModerator = true;\n        } else {\n          sdkEvent.data.isModerator = false;\n        }\n      } // This is deprecated but still sent in the webhooks\n      // We won't send it for our new SDK events\n      // sdkEvent.data.isMonitor = false;\n\n\n      if (activity.verb === _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.ACKNOWLEDGE) {\n        // For a read receipt the person is the \"actor\" or the one who did the reading\n        member = _common.SDK_EVENT.INTERNAL.ACTIVITY_FIELD.ACTOR; // The space with the read message is the \"target\"\n\n        space = _common.SDK_EVENT.INTERNAL.ACTIVITY_FIELD.TARGET; // And the \"object\" is the message that was last seen\n\n        sdkEvent.data.lastSeenId = (0, _common.buildHydraMessageId)(activity.object.id);\n      } else if (activity.verb === _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.HIDE) {\n        // For a hide activity the person is also the \"actor\"\n        member = _common.SDK_EVENT.INTERNAL.ACTIVITY_FIELD.ACTOR; // But the space is now the \"object\"\n\n        space = _common.SDK_EVENT.INTERNAL.ACTIVITY_FIELD.OBJECT;\n      } else {\n        // For most memberships events the person is the 'object\"\n        member = _common.SDK_EVENT.INTERNAL.ACTIVITY_FIELD.OBJECT; // and the space is the \"target\"\n\n        space = _common.SDK_EVENT.INTERNAL.ACTIVITY_FIELD.TARGET;\n      }\n\n      sdkEvent.data.id = (0, _common.buildHydraMembershipId)(activity[member].entryUUID, activity[space].id);\n      sdkEvent.data.personId = (0, _common.buildHydraPersonId)(activity[member].entryUUID);\n      sdkEvent.data.personEmail = activity[member].emailAddress || activity[member].entryEmail;\n      sdkEvent.data.personDisplayName = activity[member].displayName;\n      sdkEvent.data.personOrgId = (0, _common.buildHydraOrgId)(activity[member].orgId);\n      return sdkEvent;\n    } catch (e) {\n      this.spark.logger.error('Unable to generate SDK event from mercury \\'socket activity for memberships:' + event + ' event: ' + e.message);\n      return null;\n    }\n  },\n\n  /**\n   * Adds a person to a room. The person can be added by ID (`personId`) or by\n   * Email Address (`personEmail`). The person can be optionally added to the room\n   * as a moderator.\n   * @instance\n   * @memberof Memberships\n   * @param {MembershipObject} membership\n   * @returns {Promise<MembershipObject>}\n   * @example\n   * ciscospark.rooms.create({title: 'Create Membership Example'})\n   *   .then(function(room) {\n   *     return ciscospark.memberships.create({\n   *      personEmail: 'alice@example.com',\n   *      roomId: room.id\n   *    });\n   *   })\n   *   .then(function(membership) {\n   *     var assert = require('assert');\n   *     assert(membership.id);\n   *     assert(membership.roomId);\n   *     assert(membership.personId);\n   *     assert(membership.personEmail);\n   *     assert('isModerator' in membership);\n   *     assert('isMonitor' in membership);\n   *     assert(membership.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create: function create(membership) {\n    return this.request({\n      method: 'POST',\n      service: 'hydra',\n      resource: 'memberships',\n      body: membership\n    }).then(function (res) {\n      return res.body;\n    });\n  },\n\n  /**\n   * Returns a single membership.\n   * @instance\n   * @memberof Memberships\n   * @param {MembershipObject|uuid} membership\n   * @returns {Promise<MembershipObject>}\n   * @example\n   * var membership;\n   * ciscospark.rooms.create({title: 'Get Membership Example'})\n   *   .then(function(room) {\n   *     return ciscospark.memberships.create({\n   *       personEmail: 'alice@example.com',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     membership = m;\n   *     return ciscospark.memberships.get(m.id);\n   *   })\n   *   .then(function(m) {\n   *     var assert = require('assert');\n   *     assert.deepEqual(m, membership);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get: function get(membership) {\n    var id = membership.id || membership;\n    return this.request({\n      service: 'hydra',\n      resource: 'memberships/' + id\n    }).then(function (res) {\n      return res.body.items || res.body;\n    });\n  },\n\n  /**\n   * Returns a list of memberships. In most cases the results will only contain\n   * rooms that the authentiated user is a member of. You can filter the results\n   * by room to list people in a room or by person to find rooms that a\n   * specific person is a member of.\n   * @instance\n   * @memberof Memberships\n   * @param {Object} options\n   * @param {string} options.personId\n   * @param {string} options.personEmail\n   * @param {string} options.roomId\n   * @param {number} options.max\n   * @returns {Promise<Page<MembershipObject>>}\n   * @example\n   * var room;\n   * ciscospark.rooms.create({title: 'List Membership Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return ciscospark.memberships.create({\n   *      personEmail: 'alice@example.com',\n   *      roomId: room.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return ciscospark.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     var assert = require('assert');\n   *     assert.equal(memberships.length, 2);\n   *     for (var i = 0; i < memberships.length; i+= 1) {\n   *       assert.equal(memberships.items[i].roomId, room.id);\n   *     }\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list: function list(options) {\n    var _this2 = this;\n\n    return this.request({\n      service: 'hydra',\n      resource: 'memberships',\n      qs: options\n    }).then(function (res) {\n      return new _webexCore.Page(res, _this2.spark);\n    });\n  },\n\n  /**\n   * Returns a list of memberships with details about the lastSeenId for each\n   * user, allowing a client to indicate \"read status\" in a space GUI\n   *\n   * This differs from the memberships.list() function in the following ways:\n   *  -- it accepts only a room or object with a valid roomId\n   *  -- no other options, eg: max, are considered\n   *  -- results are not paginated\n   *  -- memberships in the return do not include the\n   *     \"created\", \"isRoomHidden\", fields\n   *  -- memberships in the return do include the new\n   *    \"lastSeenId\", and \"lastSeenDate\" fields\n   *     these will not exist if the member has never \"seen\" the space\n   *\n   * In general this function should be used only when the\n   * client needs to access read status info.\n   *\n   * This function may be deprecated when this info is provided in the membership\n   * objects returned in the list function.\n   *\n   *\n   * @instance\n   * @memberof Memberships\n   * @param {Object} options\n   * @param {string} options.roomId\n   * @returns {Promise<MembershipObjectList>}\n   */\n  listWithReadStatus: function listWithReadStatus(options) {\n    var _this3 = this;\n\n    var conversation = {\n      id: (0, _common.deconstructHydraId)(options.roomId).id\n    };\n    return (0, _common.ensureMyIdIsAvailable)(this.spark).then(function () {\n      return (0, _common.ensureConvoAvailability)(_this3.spark).then(function () {\n        return _this3.spark.internal.conversation.get(conversation, {\n          participantAckFilter: 'all',\n          // show lastAck info for each participant\n          activitiesLimit: 0 // don't send the whole history of activity\n\n        }).then(function (resp) {\n          try {\n            // We keep track of the last read message by each user\n            var roomUUID = resp.id;\n            var roomId = (0, _common.buildHydraRoomId)(roomUUID);\n            var particpants = resp.participants.items;\n            var lastReadInfo = {\n              items: []\n            };\n            var roomType = (0, _common.getHydraRoomType)(resp.tags);\n            var myId = _this3.spark.internal.me.id;\n            var isRoomHidden = resp.tags.includes(_common.SDK_EVENT.INTERNAL.ACTIVITY_TAG.HIDDEN);\n\n            for (var i = 0; i < particpants.length; i += 1) {\n              var participant = particpants[i];\n              var participantInfo = {\n                id: (0, _common.buildHydraMembershipId)(participant.entryUUID, roomUUID),\n                roomId: roomId,\n                personId: (0, _common.buildHydraPersonId)(participant.entryUUID),\n                personEmail: participant.entryEmailAddress || participant.entryEmail,\n                personDisplayName: participant.displayName,\n                personOrgId: (0, _common.buildHydraOrgId)(participant.orgId),\n                isMonitor: false,\n                // deprecated, but included for completeness\n                roomType: roomType // created is not available in the conversations payload\n\n              };\n\n              if (isRoomHidden && participantInfo.personId === myId) {\n                participantInfo.isRoomHidden = isRoomHidden;\n              }\n\n              if ('roomProperties' in participant) {\n                if ('lastSeenActivityDate' in participant.roomProperties) {\n                  participantInfo.lastSeenId = (0, _common.buildHydraMessageId)(participant.roomProperties.lastSeenActivityUUID);\n                  participantInfo.lastSeenDate = participant.roomProperties.lastSeenActivityDate;\n                }\n\n                if ('isModerator' in participant.roomProperties) {\n                  participantInfo.isModerator = participant.roomProperties.isModerator;\n                }\n              }\n\n              lastReadInfo.items.push(participantInfo);\n            }\n\n            return _promise2.default.resolve(lastReadInfo);\n          } catch (e) {\n            return _promise2.default.reject(e);\n          }\n        });\n      });\n    });\n  },\n\n  /**\n   * Deletes a single membership.\n   * @instance\n   * @memberof Memberships\n   * @param {MembershipObject|uuid} membership\n   * @returns {Promise}\n   * @example\n   * var membership, room;\n   * ciscospark.rooms.create({title: 'Remove Membership Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return ciscospark.memberships.create({\n   *      personEmail: 'alice@example.com',\n   *      roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     membership = m;\n   *     return ciscospark.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     var assert = require('assert');\n   *     assert.equal(memberships.length, 2);\n   *     return ciscospark.memberships.remove(membership);\n   *   })\n   *   .then(function() {\n   *     return ciscospark.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     var assert = require('assert');\n   *     assert.equal(memberships.length, 1);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  remove: function remove(membership) {\n    var id = membership.id || membership;\n    return this.request({\n      method: 'DELETE',\n      service: 'hydra',\n      resource: 'memberships/' + id\n    }).then(function (res) {\n      // Firefox has some issues with 204s and/or DELETE. This should move to\n      // http-core\n      if (res.statusCode === 204) {\n        return undefined;\n      }\n\n      return res.body;\n    });\n  },\n\n  /**\n   * Used to update a single membership's properties\n   * @instance\n   * @memberof Memberships\n   * @param {MembershipObject|uuid} membership\n   * @returns {Promise<MembershipObject>}\n   * @example\n   * var membership, room;\n   * ciscospark.rooms.create({title: 'Memberships Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return ciscospark.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     membership = memberships.items[0];\n   *     var assert = require('assert');\n   *     assert.equal(membership.isModerator, false);\n   *     membership.isModerator = true;\n   *     return ciscospark.memberships.update(membership);\n   *   })\n   *   .then(function() {\n   *     return ciscospark.memberships.get(membership.id);\n   *   })\n   *   .then(function(membership) {\n   *     var assert = require('assert');\n   *     assert.equal(membership.isModerator, true);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  update: function update(membership) {\n    var id = membership.id || membership;\n    return this.request({\n      method: 'PUT',\n      service: 'hydra',\n      resource: 'memberships/' + id,\n      body: membership\n    }).then(function (res) {\n      return res.body;\n    });\n  },\n\n  /**\n   * Updates the lastSeenId attribute of a membership\n   * @instance\n   * @memberof Mememberships\n   * @param {string} message\n   * @returns {Promise<MembershipObject>}\n   */\n  updateLastSeen: function updateLastSeen(message) {\n    var _this4 = this;\n\n    var activity = {\n      id: (0, _common.deconstructHydraId)(message.id).id\n    };\n    var conversation = {\n      id: (0, _common.deconstructHydraId)(message.roomId).id\n    };\n    return (0, _common.ensureConvoAvailability)(this.spark).then(function () {\n      return _this4.spark.internal.conversation.acknowledge(conversation, activity).then(function (ack) {\n        return {\n          lastSeenId: (0, _common.buildHydraMessageId)(ack.object.id),\n          id: (0, _common.buildHydraMembershipId)(ack.actor.entryUUID, ack.target.id),\n          personId: (0, _common.buildHydraPersonId)(ack.actor.entryUUID),\n          personEmail: ack.actor.emailAddress || ack.actor.entryEmail,\n          personDisplayName: ack.actor.displayName,\n          personOrgId: (0, _common.buildHydraOrgId)(ack.actor.orgId),\n          roomId: (0, _common.buildHydraRoomId)(ack.target.id),\n          roomType: (0, _common.getHydraRoomType)(ack.target.tags),\n          isRoomHidden: false,\n          // any activity unhides a space.\n          isMonitor: false,\n          // deprecated, returned for back compat\n          created: ack.object.published\n        };\n      });\n    });\n  },\n  version: '1.59.0'\n});\n\nexports.default = Memberships;","map":null,"metadata":{},"sourceType":"script"}