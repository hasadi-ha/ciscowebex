{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _apply = require('babel-runtime/core-js/reflect/apply');\n\nvar _apply2 = _interopRequireDefault(_apply);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _partition2 = require('lodash/partition');\n\nvar _partition3 = _interopRequireDefault(_partition2);\n\nrequire('@webex/internal-plugin-wdm');\n\nvar _webexCore = require('@webex/webex-core');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nvar Feature = _webexCore.WebexPlugin.extend({\n  namespace: 'Feature',\n\n  /**\n   * Returns the value of the requested feature toggle.\n   * @param {string} keyType <developer|user|entitlement>\n   * @param {string} key\n   * @param {Object} options\n   * @param {boolean} options.full to get full feature record including metadata.\n   * @returns {string|boolean|number|FeatureModel|null}\n   */\n  getFeature: function getFeature(keyType, key, options) {\n    if (keyType !== 'developer' && keyType !== 'user' && keyType !== 'entitlement') {\n      return _promise2.default.reject(new Error('Invalid feature keyType provided. Only `developer`, `user`, and `entitlement` feature toggles are permitted.'));\n    }\n\n    options = options || {};\n    var feature = this.webex.internal.device.features[keyType].get(key);\n\n    if (!feature) {\n      return _promise2.default.resolve(null);\n    }\n\n    if (options.full) {\n      return _promise2.default.resolve(feature.serialize());\n    }\n\n    return _promise2.default.resolve(feature.value);\n  },\n\n  /**\n   * Handles a feature toggle update from the server.\n   * @param {Object} envelope\n   * @returns {undefined}\n   */\n  handleFeatureUpdate: function handleFeatureUpdate(envelope) {\n    if (envelope && envelope.data) {\n      var feature = envelope.data.featureToggle;\n      var keyType = feature.type.toLowerCase();\n\n      if (keyType === 'user' || keyType === 'developer') {\n        this.webex.internal.device.features[keyType].add([feature], {\n          merge: true\n        });\n      }\n    }\n  },\n\n  /**\n   * Register to listen for incoming feature events\n   * @instance\n   * @returns {Promise}\n   */\n  listen: function listen() {\n    var _this = this;\n\n    return this.webex.internal.mercury.connect().then(function () {\n      _this.listenTo(_this.webex.internal.mercury, 'event:featureToggle_update', _this.handleFeatureUpdate);\n    });\n  },\n\n  /**\n   * Issues request to server to set a value for a feature toggle.\n   * @param {string} keyType <developer|user>\n   * @param {string} key\n   * @param {string} value\n   * @returns {Promise} Refreshes the local device and resolves with the features endpoint's response.\n   */\n  setFeature: function setFeature(keyType, key, value) {\n    var _this2 = this; // Limit only to developer feature toggles for now.\n\n\n    if (keyType !== 'developer' && keyType !== 'user') {\n      return _promise2.default.reject(new Error('Only `developer` and `user` feature toggles can be set.'));\n    }\n\n    return this.request({\n      method: 'POST',\n      api: 'feature',\n      resource: 'features/users/' + this.webex.internal.device.userId + '/' + keyType,\n      body: {\n        key: key,\n        mutable: true,\n        val: value\n      }\n    }).then(function (res) {\n      return _this2.webex.internal.device.features[keyType].add(res.body, {\n        merge: true\n      });\n    });\n  },\n\n  /**\n   * Issues request to server to set a value for a feature toggle.\n   * @param {array} featureList\n   * @returns {Promise} Refreshes the local device and resolves with the features endpoint`s response.\n   */\n  setBundledFeatures: function setBundledFeatures(featureList) {\n    var _this3 = this;\n\n    featureList.forEach(function (item) {\n      item.mutable = item.mutable || 'true';\n\n      if (item.type !== 'USER' && item.type !== 'DEV') {\n        item.type = 'USER';\n      }\n    });\n    return this.request({\n      method: 'POST',\n      api: 'feature',\n      resource: 'features/users/' + this.webex.internal.device.userId + '/toggles',\n      body: featureList\n    }).then(function (res) {\n      var partitionedToggles = (0, _partition3.default)(res.body.featureToggles, {\n        type: 'USER'\n      });\n\n      _this3.webex.internal.device.features.user.add(partitionedToggles[0], {\n        merge: true\n      });\n\n      _this3.webex.internal.device.features.developer.add(partitionedToggles[1], {\n        merge: true\n      });\n    });\n  },\n  initialize: function initialize() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    (0, _apply2.default)(_webexCore.WebexPlugin.prototype.initialize, this, args);\n    this.listenToAndRun(this.webex, 'change:internal.device.features.developer', this.trigger.bind(this, 'change:developer'));\n    this.listenToAndRun(this.webex, 'change:internal.device.features.entitlement', this.trigger.bind(this, 'change:entitlement'));\n    this.listenToAndRun(this.webex, 'change:internal.device.features.user', this.trigger.bind(this, 'change:user'));\n  },\n  version: '1.69.1'\n});\n\nexports.default = Feature;","map":null,"metadata":{},"sourceType":"script"}