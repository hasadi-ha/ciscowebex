{"ast":null,"code":"/*!\n * util/databuffer.js - Forge-compatible Buffer based on Node.js Buffers\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\"use strict\";\n\nvar forge = require(\"../deps/forge.js\"),\n    base64url = require(\"./base64url.js\");\n/**\n *\n */\n\n\nfunction DataBuffer(b, options) {\n  options = options || {}; // treat (views of) (Array)Buffers special\n  // NOTE: default implementation creates copies, but efficiently\n  //       wherever possible\n\n  if (Buffer.isBuffer(b)) {\n    this.data = b;\n  } else if (forge.util.isArrayBuffer(b)) {\n    b = new Uint8Array(b);\n    this.data = new Buffer(b);\n  } else if (forge.util.isArrayBufferView(b)) {\n    b = new Uint8Array(b.buffer, b.byteOffset, b.byteLength);\n    this.data = new Buffer(b);\n  }\n\n  if (this.data) {\n    this.write = this.data.length;\n    b = undefined;\n  } // setup growth rate\n\n\n  this.growSize = options.growSize || DataBuffer.DEFAULT_GROW_SIZE; // initialize pointers and data\n\n  this.write = this.write || 0;\n  this.read = this.read || 0;\n\n  if (b) {\n    this.putBytes(b);\n  } else if (!this.data) {\n    this.accommodate(0);\n  } // massage read/write pointers\n\n\n  options.readOffset = \"readOffset\" in options ? options.readOffset : this.read;\n  this.write = \"writeOffset\" in options ? options.writeOffset : this.write;\n  this.read = Math.min(options.readOffset, this.write);\n}\n\nDataBuffer.DEFAULT_GROW_SIZE = 16;\n\nDataBuffer.prototype.length = function () {\n  return this.write - this.read;\n};\n\nDataBuffer.prototype.available = function () {\n  return this.data.length - this.write;\n};\n\nDataBuffer.prototype.isEmpty = function () {\n  return this.length() <= 0;\n};\n\nDataBuffer.prototype.accommodate = function (length) {\n  if (!this.data) {\n    // initializes a new buffer\n    length = Math.max(this.write + length, this.growSize);\n    this.data = new Buffer(length);\n  } else if (this.available() < length) {\n    length = Math.max(length, this.growSize); // create a new empty buffer, and copy current one into it\n\n    var src = this.data;\n    var dst = new Buffer(src.length + length);\n    src.copy(dst, 0); // set data as the new buffer\n\n    this.data = dst;\n  } // ensure the rest is 0\n\n\n  this.data.fill(0, this.write);\n  return this;\n};\n\nDataBuffer.prototype.clear = function () {\n  this.read = this.write = 0;\n  this.data = new Buffer(0);\n  return this;\n};\n\nDataBuffer.prototype.truncate = function (count) {\n  // chop off <count> bytes from the end\n  this.write = this.read + Math.max(0, this.length() - count); // ensure the remainder is 0\n\n  this.data.fill(0, this.write);\n  return this;\n};\n\nDataBuffer.prototype.compact = function () {\n  if (this.read > 0) {\n    if (this.write === this.read) {\n      this.read = this.write = 0;\n    } else {\n      this.data.copy(this.data, 0, this.read, this.write);\n      this.write = this.write - this.read;\n      this.read = 0;\n    } // ensure remainder is 0\n\n\n    this.data.fill(0, this.write);\n  }\n\n  return this;\n};\n\nDataBuffer.prototype.copy = function () {\n  return new DataBuffer(this, {\n    readOffset: this.read,\n    writeOffset: this.write,\n    growSize: this.growSize\n  });\n};\n\nDataBuffer.prototype.equals = function (test) {\n  if (!DataBuffer.isBuffer(test)) {\n    return false;\n  }\n\n  if (test.length() !== this.length()) {\n    return false;\n  }\n\n  var rval = true,\n      delta = this.read - test.read; // constant time\n\n  for (var idx = test.read; test.write > idx; idx++) {\n    rval = rval && this.data[idx + delta] === test.data[idx];\n  }\n\n  return rval;\n};\n\nDataBuffer.prototype.at = function (idx) {\n  return this.data[this.read + idx];\n};\n\nDataBuffer.prototype.setAt = function (idx, b) {\n  this.data[this.read + idx] = b;\n  return this;\n};\n\nDataBuffer.prototype.last = function () {\n  return this.data[this.write - 1];\n};\n\nDataBuffer.prototype.bytes = function (count) {\n  var rval;\n\n  if (undefined === count) {\n    count = this.length();\n  } else if (count) {\n    count = Math.min(count, this.length());\n  }\n\n  if (0 === count) {\n    rval = \"\";\n  } else {\n    var begin = this.read,\n        end = begin + count,\n        data = this.data.slice(begin, end);\n    rval = String.fromCharCode.apply(null, data);\n  }\n\n  return rval;\n};\n\nDataBuffer.prototype.buffer = function (count) {\n  var rval;\n\n  if (undefined === count) {\n    count = this.length();\n  } else if (count) {\n    count = Math.min(count, this.length());\n  }\n\n  if (0 === count) {\n    rval = new ArrayBuffer(0);\n  } else {\n    var begin = this.read,\n        end = begin + count,\n        data = this.data.slice(begin, end);\n    rval = new Uint8Array(end - begin);\n    rval.set(data);\n  }\n\n  return rval;\n};\n\nDataBuffer.prototype.native = function (count) {\n  var rval;\n\n  if (\"undefined\" === typeof count) {\n    count = this.length();\n  } else if (count) {\n    count = Math.min(count, this.length());\n  }\n\n  if (0 === count) {\n    rval = new Buffer(0);\n  } else {\n    var begin = this.read,\n        end = begin + count;\n    rval = this.data.slice(begin, end);\n  }\n\n  return rval;\n};\n\nDataBuffer.prototype.toHex = function () {\n  return this.toString(\"hex\");\n};\n\nDataBuffer.prototype.toString = function (encoding) {\n  // short circuit empty string\n  if (0 === this.length()) {\n    return \"\";\n  }\n\n  var view = this.data.slice(this.read, this.write);\n  encoding = encoding || \"utf8\"; // special cases, then built-in support\n\n  switch (encoding) {\n    case \"raw\":\n      return view.toString(\"binary\");\n\n    case \"base64url\":\n      return base64url.encode(view);\n\n    case \"utf16\":\n      return view.toString(\"ucs2\");\n\n    default:\n      return view.toString(encoding);\n  }\n};\n\nDataBuffer.prototype.fillWithByte = function (b, n) {\n  if (!n) {\n    n = this.available();\n  }\n\n  this.accommodate(n);\n  this.data.fill(b, this.write, this.write + n);\n  this.write += n;\n  return this;\n};\n\nDataBuffer.prototype.getBuffer = function (count) {\n  var rval = this.buffer(count);\n  this.read += rval.byteLength;\n  return rval;\n};\n\nDataBuffer.prototype.putBuffer = function (bytes) {\n  return this.putBytes(bytes);\n};\n\nDataBuffer.prototype.getBytes = function (count) {\n  var rval = this.bytes(count);\n  this.read += rval.length;\n  return rval;\n};\n\nDataBuffer.prototype.putBytes = function (bytes, encoding) {\n  if (\"string\" === typeof bytes) {\n    // fixup encoding\n    encoding = encoding || \"binary\";\n\n    switch (encoding) {\n      case \"utf16\":\n        // treat as UCS-2/UTF-16BE\n        encoding = \"ucs-2\";\n        break;\n\n      case \"raw\":\n        encoding = \"binary\";\n        break;\n\n      case \"base64url\":\n        // NOTE: this returns a Buffer\n        bytes = base64url.decode(bytes);\n        break;\n    } // replace bytes with decoded Buffer (if not already)\n\n\n    if (!Buffer.isBuffer(bytes)) {\n      bytes = new Buffer(bytes, encoding);\n    }\n  }\n\n  var src, dst;\n\n  if (bytes instanceof DataBuffer) {\n    // be slightly more efficient\n    var orig = bytes;\n    bytes = orig.data.slice(orig.read, orig.write);\n    orig.read = orig.write;\n  } else if (bytes instanceof forge.util.ByteStringBuffer) {\n    bytes = bytes.getBytes();\n  } // process array\n\n\n  if (Buffer.isBuffer(bytes)) {\n    src = bytes;\n  } else if (Array.isArray(bytes)) {\n    src = new Buffer(bytes);\n  } else if (forge.util.isArrayBuffer(bytes)) {\n    src = new Uint8Array(bytes);\n    src = new Buffer(src);\n  } else if (forge.util.isArrayBufferView(bytes)) {\n    src = bytes instanceof Uint8Array ? bytes : new Uint8Array(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    src = new Buffer(src);\n  } else {\n    throw new TypeError(\"invalid source type\");\n  }\n\n  this.accommodate(src.length);\n  dst = this.data;\n  src.copy(dst, this.write);\n  this.write += src.length;\n  return this;\n};\n\nDataBuffer.prototype.getNative = function (count) {\n  var rval = this.native(count);\n  this.read += rval.length;\n  return rval;\n};\n\nDataBuffer.prototype.putNative = DataBuffer.prototype.putBuffer;\n\nDataBuffer.prototype.getByte = function () {\n  var b = this.data[this.read];\n  this.read = Math.min(this.read + 1, this.write);\n  return b;\n};\n\nDataBuffer.prototype.putByte = function (b) {\n  this.accommodate(1);\n  this.data[this.write] = b & 0xff;\n  this.write++;\n  return this;\n};\n\nDataBuffer.prototype.getInt16 = function () {\n  var n = this.data[this.read] << 8 ^ this.data[this.read + 1];\n  this.read = Math.min(this.read + 2, this.write);\n  return n;\n};\n\nDataBuffer.prototype.putInt16 = function (n) {\n  this.accommodate(2);\n  this.data[this.write] = n >>> 8 & 0xff;\n  this.data[this.write + 1] = n & 0xff;\n  this.write += 2;\n  return this;\n};\n\nDataBuffer.prototype.getInt24 = function () {\n  var n = this.data[this.read] << 16 ^ this.data[this.read + 1] << 8 ^ this.data[this.read + 2];\n  this.read = Math.min(this.read + 3, this.write);\n  return n;\n};\n\nDataBuffer.prototype.putInt24 = function (n) {\n  this.accommodate(3);\n  this.data[this.write] = n >>> 16 & 0xff;\n  this.data[this.write + 1] = n >>> 8 & 0xff;\n  this.data[this.write + 2] = n & 0xff;\n  this.write += 3;\n  return this;\n};\n\nDataBuffer.prototype.getInt32 = function () {\n  var n = this.data[this.read] << 24 ^ this.data[this.read + 1] << 16 ^ this.data[this.read + 2] << 8 ^ this.data[this.read + 3];\n  this.read = Math.min(this.read + 4, this.write);\n  return n;\n};\n\nDataBuffer.prototype.putInt32 = function (n) {\n  this.accommodate(4);\n  this.data[this.write] = n >>> 24 & 0xff;\n  this.data[this.write + 1] = n >>> 16 & 0xff;\n  this.data[this.write + 2] = n >>> 8 & 0xff;\n  this.data[this.write + 3] = n & 0xff;\n  this.write += 4;\n  return this;\n};\n\nDataBuffer.prototype.getInt16Le = function () {\n  var n = this.data[this.read + 1] << 8 ^ this.data[this.read];\n  this.read = Math.min(this.read + 2, this.write);\n  return n;\n};\n\nDataBuffer.prototype.putInt16Le = function (n) {\n  this.accommodate(2);\n  this.data[this.write + 1] = n >>> 8 & 0xff;\n  this.data[this.write] = n & 0xff;\n  this.write += 2;\n  return this;\n};\n\nDataBuffer.prototype.getInt24Le = function () {\n  var n = this.data[this.read + 2] << 16 ^ this.data[this.read + 1] << 8 ^ this.data[this.read];\n  this.read = Math.min(this.read + 3, this.write);\n  return n;\n};\n\nDataBuffer.prototype.putInt24Le = function (n) {\n  this.accommodate(3);\n  this.data[this.write + 2] = n >>> 16 & 0xff;\n  this.data[this.write + 1] = n >>> 8 & 0xff;\n  this.data[this.write] = n & 0xff;\n  this.write += 3;\n  return this;\n};\n\nDataBuffer.prototype.getInt32Le = function () {\n  var n = this.data[this.read + 3] << 24 ^ this.data[this.read + 2] << 16 ^ this.data[this.read + 1] << 8 ^ this.data[this.read];\n  this.read = Math.min(this.read + 4, this.write);\n  return n;\n};\n\nDataBuffer.prototype.putInt32Le = function (n) {\n  this.accommodate(4);\n  this.data[this.write + 3] = n >>> 24 & 0xff;\n  this.data[this.write + 2] = n >>> 16 & 0xff;\n  this.data[this.write + 1] = n >>> 8 & 0xff;\n  this.data[this.write] = n & 0xff;\n  this.write += 4;\n  return this;\n};\n\nDataBuffer.prototype.getInt = function (bits) {\n  var rval = 0;\n\n  do {\n    rval = rval << 8 | this.getByte();\n    bits -= 8;\n  } while (bits > 0);\n\n  return rval;\n};\n\nDataBuffer.prototype.putInt = function (n, bits) {\n  this.accommodate(Math.ceil(bits / 8));\n\n  do {\n    bits -= 8;\n    this.putByte(n >> bits & 0xff);\n  } while (bits > 0);\n\n  return this;\n};\n\nDataBuffer.prototype.putSignedInt = function (n, bits) {\n  if (n < 0) {\n    n += 2 << bits - 1;\n  }\n\n  return this.putInt(n, bits);\n};\n\nDataBuffer.prototype.putString = function (str) {\n  return this.putBytes(str, \"utf16\");\n};\n\nDataBuffer.isBuffer = function (test) {\n  return test instanceof DataBuffer;\n};\n\nDataBuffer.asBuffer = function (orig) {\n  return DataBuffer.isBuffer(orig) ? orig : orig ? new DataBuffer(orig) : new DataBuffer();\n};\n\nmodule.exports = forge.util.ByteBuffer = DataBuffer;","map":null,"metadata":{},"sourceType":"script"}