{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _defineProperty2 = require('babel-runtime/helpers/defineProperty');\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _deleteProperty = require('babel-runtime/core-js/reflect/delete-property');\n\nvar _deleteProperty2 = _interopRequireDefault(_deleteProperty);\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _apply = require('babel-runtime/core-js/reflect/apply');\n\nvar _apply2 = _interopRequireDefault(_apply);\n\nvar _cloneDeep2 = require('lodash/cloneDeep');\n\nvar _cloneDeep3 = _interopRequireDefault(_cloneDeep2);\n\nvar _isArray2 = require('lodash/isArray');\n\nvar _isArray3 = _interopRequireDefault(_isArray2);\n\nvar _common = require('@webex/common');\n\nvar _webexCore = require('@webex/webex-core');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nvar debug = require('debug')('messages');\n/**\n * @typedef {Object} MessageObject\n * @property {string} id - (server generated) Unique identifier for the message\n * @property {string} personId - The ID for the author of the messasge\n * @property {email} personEmail - The email for the author of the messasge\n * @property {string} roomId - The ID for the room of the message\n * @property {string} text - The message posted to the room in plain text\n * @property {string} markdown - The message posted to the room in markdown\n * @property {Array<string>} files - The source URL(s) for the message attachment(s).\n * See the {@link https://developer.webex.com/attachments.html|Message Attachments}\n * Guide for a list of supported media types.\n * @property {isoDate} created - (server generated) The date and time that the message was created\n */\n\n/**\n * Messages are how people communicate in rooms. Each message timestamped and\n * represented in Spark as a distinct block of content. Messages can contain\n * plain text and a single file attachment. See the\n * {@link https://developer.webex.com/attachments.html|Message Attachments} Guide\n * for a list of supported media types.\n * @class\n */\n\n\nvar Messages = _webexCore.SparkPlugin.extend({\n  /**\n   * Initializer\n   * @param  {...any} args\n   * @returns {undefined}\n   */\n  initialize: function initialize() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    (0, _apply2.default)(_webexCore.SparkPlugin.prototype.initialize, this, args);\n  },\n\n  /**\n   * Connect to the web socket to listen to incoming messages.\n   * @returns {Promise}\n   */\n  listen: function listen() {\n    var _this = this; // Create a common envelope that we will wrap all events in\n\n\n    return (0, _common.createEventEnvelope)(this.spark, _common.SDK_EVENT.EXTERNAL.RESOURCE.MESSAGES).then(function (envelope) {\n      _this.eventEnvelope = envelope; // Register to listen to events\n\n      return _this.spark.internal.mercury.connect().then(function () {\n        _this.listenTo(_this.spark.internal.mercury, _common.SDK_EVENT.INTERNAL.TEAMS_ACTIVITY, function (event) {\n          return _this.onWebexApiEvent(event);\n        });\n      });\n    });\n  },\n\n  /**\n   * Trigger a \"messages\" event.\n   * @param {Object} event\n   * @returns {undefined}\n   */\n  onWebexApiEvent: function onWebexApiEvent(event) {\n    var activity = event.data.activity;\n    /* eslint-disable no-case-declarations */\n\n    switch (activity.verb) {\n      case _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.SHARE:\n      case _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.POST:\n        var createdEvent = this.getMessageEvent(activity, _common.SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED);\n\n        if (createdEvent) {\n          debug('messages \"created\" payload:             ' + (0, _stringify2.default)(createdEvent));\n          this.trigger(_common.SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED, createdEvent);\n        }\n\n        break;\n\n      case _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.DELETE:\n        var deletedEvent = this.getMessageEvent(activity, _common.SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED);\n\n        if (deletedEvent) {\n          debug('messages \"deleted\" payload:             ' + (0, _stringify2.default)(deletedEvent));\n          this.trigger(_common.SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED, deletedEvent);\n        }\n\n        break;\n\n      default:\n        {\n          break;\n        }\n    }\n  },\n\n  /**\n   * Constructs the data object for an event on the messages resource,\n   * adhering to Hydra's Webehook data structure messages.\n   * @param {Object} activity from mercury\n   * @param {Object} event type of \"webhook\" event\n   * @returns {Object} constructed event\n   */\n  getMessageEvent: function getMessageEvent(activity, event) {\n    try {\n      var sdkEvent = (0, _cloneDeep3.default)(this.eventEnvelope);\n      sdkEvent.event = event;\n      sdkEvent.data.created = activity.published;\n      sdkEvent.actorId = (0, _common.constructHydraId)(_common.hydraTypes.PEOPLE, activity.actor.entryUUID);\n      sdkEvent.data.roomType = activity.target.tags.includes(_common.SDK_EVENT.INTERNAL.ACTIVITY_TAG.ONE_ON_ONE) ? _common.SDK_EVENT.EXTERNAL.SPACE_TYPE.DIRECT : _common.SDK_EVENT.EXTERNAL.SPACE_TYPE.GROUP;\n      sdkEvent.data.roomId = (0, _common.constructHydraId)(_common.hydraTypes.ROOM, activity.target.id);\n      sdkEvent.data.personId = (0, _common.constructHydraId)(_common.hydraTypes.PEOPLE, activity.actor.entryUUID);\n      sdkEvent.data.personEmail = activity.actor.emailAddress || activity.actor.entryEmail;\n\n      if (event !== _common.SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED) {\n        var files = (0, _common.getHydraFiles)(activity);\n        sdkEvent.data.id = (0, _common.constructHydraId)(_common.hydraTypes.MESSAGE, activity.id);\n        sdkEvent.data.text = activity.object.displayName;\n\n        if (files.length) {\n          sdkEvent.data.files = files;\n        }\n      } else {\n        sdkEvent.data.id = (0, _common.constructHydraId)(_common.hydraTypes.MESSAGE, activity.object.id);\n      }\n\n      return sdkEvent;\n    } catch (e) {\n      this.spark.logger.error('Unable to generate SDK event from mercury \\'socket activity for message:' + event + ' event: ' + e.message);\n      return null;\n    }\n  },\n\n  /**\n   * Post a new message and/or media content into a room.\n   * @instance\n   * @memberof Messages\n   * @param {MessageObject} message\n   * @returns {Promise<MessageObject>}\n   * @example\n   * ciscospark.rooms.create({title: 'Create Message Example'})\n   *   .then(function(room) {\n   *     return ciscospark.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(message) {\n   *     var assert = require('assert');\n   *     assert(message.id);\n   *     assert(message.personId);\n   *     assert(message.personEmail);\n   *     assert(message.roomId);\n   *     assert(message.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create: function create(message) {\n    var key = 'body';\n\n    if (message.file) {\n      this.logger.warn('Supplying a single `file` property is deprecated; please supply a `files` array');\n      message.files = [message.file];\n      (0, _deleteProperty2.default)(message, 'file');\n    }\n\n    if ((0, _isArray3.default)(message.files) && message.files.reduce(function (type, file) {\n      return type || typeof file !== 'string';\n    }, false)) {\n      key = 'formData';\n    }\n\n    var options = (0, _defineProperty3.default)({\n      method: 'POST',\n      service: 'hydra',\n      resource: 'messages'\n    }, key, message);\n    return this.request(options).then(function (res) {\n      return res.body;\n    });\n  },\n\n  /**\n   * Returns a single message.\n   * @instance\n   * @memberof Messages\n   * @param {RoomObject|string} message\n   * @returns {Promise<MessageObject>}\n   * @example\n   * var message;\n   * ciscospark.rooms.create({title: 'Get Message Example'})\n   *   .then(function(room) {\n   *     return ciscospark.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message = m;\n   *     return ciscospark.messages.get(message.id);\n   *   })\n   *   .then(function(message2) {\n   *     var assert = require('assert');\n   *     assert.deepEqual(message2, message);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get: function get(message) {\n    var id = message.id || message;\n    return this.request({\n      service: 'hydra',\n      resource: 'messages/' + id\n    }).then(function (res) {\n      return res.body.items || res.body;\n    });\n  },\n\n  /**\n   * Returns a list of messages. In most cases the results will only contain\n   * messages posted in rooms that the authentiated user is a member of.\n   * @instance\n   * @memberof Messages\n   * @param {Object} options\n   * @param {string} options.roomId\n   * @param {number} options.max\n   * @returns {Promise<Page<MessageObject>>}\n   * @example\n   * var message1, message2, room;\n   * ciscospark.rooms.create({title: 'List Messages Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return ciscospark.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message1 = m;\n   *     return ciscospark.messages.create({\n   *       text: 'How are you?',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message2 = m;\n   *     return ciscospark.messages.list({roomId: room.id});\n   *   })\n   *   .then(function(messages) {\n   *     var assert = require('assert');\n   *     assert.equal(messages.length, 2);\n   *     assert.equal(messages.items[0].id, message2.id);\n   *     assert.equal(messages.items[1].id, message1.id);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list: function list(options) {\n    var _this2 = this;\n\n    return this.request({\n      service: 'hydra',\n      resource: 'messages',\n      qs: options\n    }).then(function (res) {\n      return new _webexCore.Page(res, _this2.spark);\n    });\n  },\n\n  /**\n   * Deletes a single message. Deleting a message will notify all members of the\n   * room that the authenticated user deleted the message. Generally, users can\n   * only delete their own messages except for the case of Moderated Rooms and\n   * Org Administrators.\n   * @instance\n   * @memberof Messages\n   * @param {MessageObject|uuid} message\n   * @returns {Promise}}\n   * @example\n   * var message1, room;\n   * ciscospark.rooms.create({title: 'Messages Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return ciscospark.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message1 = m;\n   *     return ciscospark.messages.create({\n   *       text: 'How are you?',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return ciscospark.messages.remove(message1);\n   *   })\n   *   .then(function() {\n   *     return ciscospark.messages.list({roomId: room.id});\n   *   })\n   *   .then(function(messages) {\n   *     var assert = require('assert');\n   *     assert.equal(messages.items.length, 1);\n   *     assert(messages.items[0].id !== message1.id);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  remove: function remove(message) {\n    var id = message.id || message;\n    return this.request({\n      method: 'DELETE',\n      service: 'hydra',\n      resource: 'messages/' + id\n    }).then(function (res) {\n      // Firefox has some issues with 204s and/or DELETE. This should move to\n      // http-core\n      if (res.statusCode === 204) {\n        return undefined;\n      }\n\n      return res.body;\n    });\n  },\n  version: '1.59.0'\n});\n\nexports.default = Messages;","map":null,"metadata":{},"sourceType":"script"}