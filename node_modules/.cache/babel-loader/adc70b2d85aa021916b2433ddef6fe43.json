{"ast":null,"code":"function padString(input) {\n  var segmentLength = 4;\n  var stringLength = input.length;\n  var diff = stringLength % segmentLength;\n\n  if (!diff) {\n    return input;\n  }\n\n  var position = stringLength;\n  var padLength = segmentLength - diff;\n  var paddedStringLength = stringLength + padLength;\n  var buffer = Buffer.alloc(paddedStringLength);\n  buffer.write(input);\n\n  while (padLength--) {\n    buffer.write('=', position++);\n  }\n\n  return buffer.toString();\n}\n\nfunction encode(input, encoding) {\n  if (encoding === void 0) {\n    encoding = 'utf8';\n  }\n\n  if (Buffer.isBuffer(input)) {\n    return fromBase64(input.toString('base64'));\n  }\n\n  return fromBase64(Buffer.from(input, encoding).toString('base64'));\n}\n\nfunction decode(base64url, encoding) {\n  if (encoding === void 0) {\n    encoding = 'utf8';\n  }\n\n  return Buffer.from(toBase64(base64url), 'base64').toString(encoding);\n}\n\nfunction toBase64(base64url) {\n  base64url = base64url.toString();\n  return padString(base64url).replace(/\\-/g, '+').replace(/_/g, '/');\n}\n\nfunction fromBase64(base64) {\n  return base64.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n\nfunction toBuffer(base64url) {\n  return Buffer.from(toBase64(base64url), 'base64');\n}\n\nvar b64u = encode;\nb64u.encode = encode;\nb64u.decode = decode;\nb64u.toBase64 = toBase64;\nb64u.fromBase64 = fromBase64;\nb64u.toBuffer = toBuffer;\nexport default b64u;","map":null,"metadata":{},"sourceType":"module"}