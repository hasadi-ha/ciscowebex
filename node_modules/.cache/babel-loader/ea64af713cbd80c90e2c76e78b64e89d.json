{"ast":null,"code":"/*!\n * jwe/decrypt.js - Decrypt from a JWE\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\"use strict\";\n\nvar base64url = require(\"../util/base64url\"),\n    AlgConfig = require(\"../util/algconfig\"),\n    JWK = require(\"../jwk\"),\n    merge = require(\"../util/merge\"),\n    zlib = require(\"zlib\");\n\nvar DEFAULT_OPTIONS = {\n  algorithms: \"*\"\n};\n/**\n * @class JWE.Decrypter\n * @classdesc Processor of encrypted data.\n *\n * @description\n * **NOTE:** This class cannot be instantiated directly. Instead\n * call {@link JWE.createDecrypt}.\n */\n\nfunction JWEDecrypter(ks, globalOpts) {\n  var assumedKey, keystore;\n\n  if (JWK.isKey(ks)) {\n    assumedKey = ks;\n    keystore = assumedKey.keystore;\n  } else if (JWK.isKeyStore(ks)) {\n    keystore = ks;\n  } else {\n    throw new TypeError(\"Keystore must be provided\");\n  }\n\n  globalOpts = merge(DEFAULT_OPTIONS, globalOpts);\n  /**\n   * Decrypts the given input.\n   *\n   * {opts}, if provided, is used to customize this specific decrypt operation.\n   * This argument has the same semantics as {JWE.createDecrypt}, and takes\n   * precedence over those options.\n   *\n   * The returned PRomise, when fulfilled, returns an object with the\n   * following members:\n   *\n   * - `header` - The JOSE Header, combined from the relevant \"header\" and\n   *            \"protected\" fields from the original JWE object.\n   * - `protected` - An array containing the names of the protected fields\n   * - `key` - The used to decrypt the content\n   * - `payload` - The decrypted content (as a Buffer)\n   * - `plaintext` - An alias for `payload`\n   *\n   * @param {Object|String} input The encrypted content\n   * @param {Object} [opts] The options for this decryption operation.\n   * @returns {Promise} A promise for the decyprted plaintext\n   */\n\n  Object.defineProperty(this, \"decrypt\", {\n    value: function (input, opts) {\n      opts = merge({}, globalOpts, opts || {});\n      var extraHandlers = opts.handlers || {};\n      var handlerKeys = Object.keys(extraHandlers);\n      var algSpec = new AlgConfig(opts.algorithms);\n      /* eslint camelcase: [0] */\n\n      if (typeof input === \"string\") {\n        input = input.split(\".\");\n        input = {\n          protected: input[0],\n          recipients: [{\n            encrypted_key: input[1]\n          }],\n          iv: input[2],\n          ciphertext: input[3],\n          tag: input[4]\n        };\n      } else if (!input || typeof input !== \"object\") {\n        throw new Error(\"invalid input\");\n      }\n\n      if (\"encrypted_key\" in input) {\n        input.recipients = [{\n          encrypted_key: input.encrypted_key\n        }];\n      }\n\n      var promise; // ensure recipients exists\n\n      var rcptList = input.recipients || [{}];\n      promise = Promise.resolve(rcptList); //combine fields\n\n      var fields, protect;\n      promise = promise.then(function (rcptList) {\n        if (input.protected) {\n          protect = base64url.decode(input.protected).toString(\"utf8\");\n          protect = JSON.parse(protect); // verify \"crit\" field first\n\n          var crit = protect.crit;\n\n          if (crit) {\n            if (!Array.isArray(crit)) {\n              return Promise.reject(new Error(\"Invalid 'crit' header\"));\n            }\n\n            for (var idx = 0; crit.length > idx; idx++) {\n              if (-1 === handlerKeys.indexOf(crit[idx])) {\n                return Promise.reject(new Error(\"Critical extension is not supported: \" + crit[idx]));\n              }\n            }\n          }\n\n          fields = protect;\n          protect = Object.keys(protect);\n        } else {\n          fields = {};\n          protect = [];\n        }\n\n        fields = merge(input.unprotected || {}, fields);\n        rcptList = rcptList.map(function (r) {\n          var promise = Promise.resolve();\n          var header = r.header || {};\n          header = merge(header, fields);\n          r.header = header;\n          r.protected = protect; // check on allowed algorithms\n\n          if (!algSpec.match(header.alg)) {\n            promise = promise.then(function () {\n              return Promise.reject(new Error(\"Algorithm not allowed: \" + header.alg));\n            });\n          }\n\n          if (!algSpec.match(header.enc)) {\n            promise = promise.then(function () {\n              return Promise.reject(new Error(\"Algorithm not allowed: \" + header.enc));\n            });\n          }\n\n          if (header.epk) {\n            promise = promise.then(function () {\n              return JWK.asKey(header.epk);\n            });\n            promise = promise.then(function (epk) {\n              header.epk = epk.toObject(false);\n            });\n          }\n\n          return promise.then(function () {\n            return r;\n          });\n        });\n        return Promise.all(rcptList);\n      }); // decrypt with first key found\n\n      var algKey, encKey, kdata;\n      promise = promise.then(function (rcptList) {\n        var jwe = {};\n        return new Promise(function (resolve, reject) {\n          var processKey = function () {\n            var rcpt = rcptList.shift();\n\n            if (!rcpt) {\n              reject(new Error(\"no key found\"));\n              return;\n            }\n\n            var algPromise = Promise.resolve(rcpt);\n            algPromise = algPromise.then(function (rcpt) {\n              // try to unwrap encrypted key\n              var prekey = kdata = rcpt.encrypted_key || \"\";\n              prekey = base64url.decode(prekey);\n              algKey = assumedKey || keystore.get({\n                use: \"enc\",\n                alg: rcpt.header.alg,\n                kid: rcpt.header.kid\n              });\n\n              if (algKey) {\n                return algKey.unwrap(rcpt.header.alg, prekey, rcpt.header);\n              } else {\n                return Promise.reject();\n              }\n            });\n            algPromise = algPromise.then(function (key) {\n              encKey = {\n                \"kty\": \"oct\",\n                \"k\": base64url.encode(key)\n              };\n              encKey = JWK.asKey(encKey);\n              jwe.key = algKey;\n              jwe.header = rcpt.header;\n              jwe.protected = rcpt.protected;\n              resolve(jwe);\n            });\n            algPromise.catch(processKey);\n          };\n\n          processKey();\n        });\n      }); // assign decipher inputs\n\n      promise = promise.then(function (jwe) {\n        jwe.iv = input.iv;\n        jwe.tag = input.tag;\n        jwe.ciphertext = input.ciphertext;\n        return jwe;\n      }); // process any prepare-decrypt handlers\n\n      promise = promise.then(function (jwe) {\n        var processing = [];\n        handlerKeys.forEach(function (h) {\n          h = extraHandlers[h];\n          var p;\n\n          if (\"function\" === typeof h) {\n            p = h(jwe);\n          } else if (\"object\" === typeof h && \"function\" === typeof h.prepare) {\n            p = h.prepare(jwe);\n          }\n\n          if (p) {\n            processing.push(Promise.resolve(p));\n          }\n        });\n        return Promise.all(processing).then(function () {\n          // don't actually care about individual handler results\n          // assume {jwe} is updated\n          return jwe;\n        });\n      }); // prepare decrypt inputs\n\n      promise = promise.then(function (jwe) {\n        if (!Buffer.isBuffer(jwe.ciphertext)) {\n          jwe.ciphertext = base64url.decode(jwe.ciphertext);\n        }\n\n        return jwe;\n      }); // decrypt it!\n\n      promise = promise.then(function (jwe) {\n        var adata = input.protected;\n\n        if (\"aad\" in input && null != input.aad) {\n          adata += \".\" + input.aad;\n        }\n\n        var params = {\n          iv: jwe.iv,\n          adata: adata,\n          tag: jwe.tag,\n          kdata: kdata,\n          epu: jwe.epu,\n          epv: jwe.epv\n        };\n        var cdata = jwe.ciphertext;\n        delete jwe.iv;\n        delete jwe.tag;\n        delete jwe.ciphertext;\n        return encKey.then(function (enkKey) {\n          return enkKey.decrypt(jwe.header.enc, cdata, params).then(function (pdata) {\n            jwe.payload = jwe.plaintext = pdata;\n            return jwe;\n          });\n        });\n      }); // (OPTIONAL) decompress plaintext\n\n      promise = promise.then(function (jwe) {\n        if (\"DEF\" === jwe.header.zip) {\n          return new Promise(function (resolve, reject) {\n            zlib.inflateRaw(new Buffer(jwe.plaintext), function (err, data) {\n              if (err) {\n                reject(err);\n              } else {\n                jwe.payload = jwe.plaintext = data;\n                resolve(jwe);\n              }\n            });\n          });\n        }\n\n        return jwe;\n      }); // process any post-decrypt handlers\n\n      promise = promise.then(function (jwe) {\n        var processing = [];\n        handlerKeys.forEach(function (h) {\n          h = extraHandlers[h];\n          var p;\n\n          if (\"object\" === typeof h && \"function\" === typeof h.complete) {\n            p = h.complete(jwe);\n          }\n\n          if (p) {\n            processing.push(Promise.resolve(p));\n          }\n        });\n        return Promise.all(processing).then(function () {\n          // don't actually care about individual handler results\n          // assume {jwe} is updated\n          return jwe;\n        });\n      });\n      return promise;\n    }\n  });\n}\n/**\n * @description\n * Creates a new Decrypter for the given Key or KeyStore.\n *\n * {opts}, when provided, is used to customize decryption processes. The\n * following options are currently supported:\n *\n * - `handlers` - An object where each name is a JOSE header member name and\n *   the value can be a boolean, function, or an object.\n *\n * Handlers are intended to support 'crit' extensions. When a boolean value,\n * the member is expected to be processed once decryption is fully complete.\n * When a function, it is called just before the ciphertext is decrypted\n * (processed as if it were a `prepare` handler, as decribed below). When an\n * object, it can contain any of the following members:\n *\n * - `recipient` - A function called after a valid key is determined; it takes\n *   an object describing the recipient, and returns a Promise that is\n *   fulfilled once the handler's processing is complete.\n * - `prepare` - A function called just prior to decrypting the ciphertext;\n *   it takes an object describing the decryption result (but containing\n *   `ciphertext` and `tag' instead of `payload` and `plaintext`), and\n *   returns a Promise that is fulfilled once the handler's processing is\n *   complete.\n * - `complete` - A function called once decryption is complete, just prior\n *   to fulfilling the Promise returned by `decrypt()`; it takes the object\n *   that will be returned by `decrypt()`'s fulfilled Promise, and returns\n *   a Promise that is fulfilled once the handler's processing is complete.\n *\n * Note that normal processing of `decrypt()` does not continue until all\n * relevant handlers have completed. Any changes handlers make to the\n * provided objects affects `decrypt()`'s processing.\n *\n * @param {JWK.Key|JWK.KeyStore} ks The Key or KeyStore to use for decryption.\n * @param {Object} [opts] The options for this Decrypter.\n * @returns {JWE.Decrypter} The new Decrypter.\n */\n\n\nfunction createDecrypt(ks, opts) {\n  var dec = new JWEDecrypter(ks, opts);\n  return dec;\n}\n\nmodule.exports = {\n  decrypter: JWEDecrypter,\n  createDecrypt: createDecrypt\n};","map":null,"metadata":{},"sourceType":"script"}