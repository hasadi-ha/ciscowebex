{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InvalidUserCreation = exports.ConversationError = exports.ShareActivity = exports.default = undefined;\n\nvar _deleteProperty = require('babel-runtime/core-js/reflect/delete-property');\n\nvar _deleteProperty2 = _interopRequireDefault(_deleteProperty);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _has2 = require('lodash/has');\n\nvar _has3 = _interopRequireDefault(_has2);\n\nvar _get2 = require('lodash/get');\n\nvar _get3 = _interopRequireDefault(_get2);\n\nvar _capitalize2 = require('lodash/capitalize');\n\nvar _capitalize3 = _interopRequireDefault(_capitalize2);\n\nvar _conversation = require('./conversation');\n\nObject.defineProperty(exports, 'default', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_conversation).default;\n  }\n});\n\nvar _shareActivity = require('./share-activity');\n\nObject.defineProperty(exports, 'ShareActivity', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_shareActivity).default;\n  }\n});\n\nvar _convoError = require('./convo-error');\n\nObject.defineProperty(exports, 'ConversationError', {\n  enumerable: true,\n  get: function get() {\n    return _convoError.ConversationError;\n  }\n});\nObject.defineProperty(exports, 'InvalidUserCreation', {\n  enumerable: true,\n  get: function get() {\n    return _convoError.InvalidUserCreation;\n  }\n});\n\nrequire('@webex/internal-plugin-encryption');\n\nrequire('@webex/internal-plugin-user');\n\nvar _common = require('@webex/common');\n\nvar _helperHtml = require('@webex/helper-html');\n\nvar _webexCore = require('@webex/webex-core');\n\nvar _conversation2 = _interopRequireDefault(_conversation);\n\nvar _config = require('./config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _encryptionTransforms = require('./encryption-transforms');\n\nvar _decryptionTransforms = require('./decryption-transforms');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n(0, _webexCore.registerInternalPlugin)('conversation', _conversation2.default, {\n  payloadTransformer: {\n    predicates: [{\n      name: 'transformObject',\n      test: function test(ctx, optionsOrResponse) {\n        return _promise2.default.resolve((0, _has3.default)(optionsOrResponse, 'body.objectType'));\n      },\n      extract: function extract(optionsOrResponse) {\n        return _promise2.default.resolve(optionsOrResponse.body);\n      }\n    }, {\n      name: 'transformObject',\n      direction: 'inbound',\n      test: function test(ctx, event) {\n        return _promise2.default.resolve((0, _has3.default)(event, 'activity'));\n      },\n      extract: function extract(event) {\n        return _promise2.default.resolve(event.activity);\n      }\n    }, {\n      name: 'normalizeConversationListAndBindDecrypters',\n      direction: 'inbound',\n      test: function test(ctx, options) {\n        if (!(0, _has3.default)(options, 'body.items[0].objectType')) {\n          return _promise2.default.resolve(false);\n        }\n\n        if ((0, _get3.default)(options, 'options.deferDecrypt')) {\n          return _promise2.default.resolve(true);\n        }\n\n        return _promise2.default.resolve(false);\n      },\n      extract: function extract(options) {\n        return _promise2.default.resolve(options.body.items);\n      }\n    }, {\n      name: 'transformObjectArray',\n      direction: 'inbound',\n      test: function test(ctx, options) {\n        if (!(0, _has3.default)(options, 'body.items[0].objectType')) {\n          return _promise2.default.resolve(false);\n        }\n\n        if ((0, _get3.default)(options, 'options.deferDecrypt')) {\n          return _promise2.default.resolve(false);\n        }\n\n        return _promise2.default.resolve(true);\n      },\n      extract: function extract(options) {\n        return _promise2.default.resolve(options.body.items);\n      }\n    }],\n    transforms: [{\n      name: 'normalizeConversationListAndBindDecrypters',\n      fn: function fn(ctx, array) {\n        return _promise2.default.all(array.map(function (item) {\n          return ctx.transform('normalizeObject', item).then(function () {\n            item.decrypt = function decrypt() {\n              (0, _deleteProperty2.default)(item, 'decrypt');\n              return ctx.transform('decryptObject', item);\n            };\n\n            return item;\n          });\n        }));\n      }\n    }, {\n      name: 'transformObjectArray',\n      fn: function fn(ctx, array) {\n        return _promise2.default.all(array.map(function (item) {\n          return ctx.transform('transformObject', item);\n        }));\n      }\n    }, {\n      name: 'transformObject',\n      direction: 'outbound',\n      fn: function fn(ctx, object) {\n        if (!object) {\n          return _promise2.default.resolve();\n        }\n\n        if (!object.objectType) {\n          return _promise2.default.resolve();\n        }\n\n        return ctx.transform('normalizeObject', object).then(function () {\n          return ctx.transform('encryptObject', object);\n        }).then(function () {\n          return ctx.transform('encryptKmsMessage', object);\n        });\n      }\n    }, {\n      name: 'transformObject',\n      direction: 'inbound',\n      fn: function fn(ctx, object) {\n        if (!object) {\n          return _promise2.default.resolve();\n        }\n\n        if (!object.objectType) {\n          return _promise2.default.resolve();\n        }\n\n        return ctx.transform('decryptObject', object).then(function () {\n          return ctx.transform('normalizeObject', object);\n        });\n      }\n    }, {\n      name: 'normalizeObject',\n      fn: function fn(ctx, object) {\n        if (!object) {\n          return _promise2.default.resolve();\n        }\n\n        if (!object.objectType) {\n          return _promise2.default.resolve();\n        }\n\n        return _promise2.default.all([ctx.transform('normalize' + (0, _capitalize3.default)(object.objectType), object), ctx.transform('normalizePropContent', object)]);\n      }\n    }, {\n      name: 'normalizePropContent',\n      direction: 'inbound',\n      fn: function fn(ctx, object) {\n        if (!object.content) {\n          return _promise2.default.resolve();\n        }\n\n        var _ctx$spark$config$con = ctx.spark.config.conversation,\n            inboundProcessFunc = _ctx$spark$config$con.inboundProcessFunc,\n            allowedInboundTags = _ctx$spark$config$con.allowedInboundTags,\n            allowedInboundStyles = _ctx$spark$config$con.allowedInboundStyles;\n        return (0, _helperHtml.filter)(inboundProcessFunc, allowedInboundTags || {}, allowedInboundStyles, object.content).then(function (c) {\n          object.content = c;\n        });\n      }\n    }, {\n      name: 'normalizePropContent',\n      direction: 'outbound',\n      fn: function fn(ctx, object) {\n        if (!object.content) {\n          return _promise2.default.resolve();\n        }\n\n        var _ctx$spark$config$con2 = ctx.spark.config.conversation,\n            outboundProcessFunc = _ctx$spark$config$con2.outboundProcessFunc,\n            allowedOutboundTags = _ctx$spark$config$con2.allowedOutboundTags,\n            allowedOutboundStyles = _ctx$spark$config$con2.allowedOutboundStyles;\n        return (0, _helperHtml.filterEscape)(outboundProcessFunc, allowedOutboundTags || {}, allowedOutboundStyles, object.content).then(function (c) {\n          object.content = c;\n        });\n      }\n    }, {\n      name: 'normalizeConversation',\n      fn: function fn(ctx, conversation) {\n        conversation.activities = conversation.activities || {};\n        conversation.activities.items = conversation.activities.items || [];\n        conversation.participants = conversation.participants || {};\n        conversation.participants.items = conversation.participants.items || [];\n        return _promise2.default.all([_promise2.default.all(conversation.activities.items.map(function (item) {\n          return ctx.transform('normalizeObject', item);\n        })), _promise2.default.all(conversation.participants.items.map(function (item) {\n          return ctx.transform('normalizeObject', item);\n        }))]);\n      }\n    }, {\n      name: 'normalizeActivity',\n      fn: function fn(ctx, activity) {\n        return _promise2.default.all([ctx.transform('normalizeObject', activity.actor), ctx.transform('normalizeObject', activity.object), ctx.transform('normalizeObject', activity.target)]);\n      }\n    }, {\n      name: 'normalizePerson',\n      // eslint-disable-next-line complexity\n      fn: function fn(ctx, person) {\n        var email = person.entryEmail || person.emailAddress || person.id;\n        var id = person.entryUUID || person.id;\n\n        if (_common.patterns.email.test(email)) {\n          person.entryEmail = person.emailAddress = email.toLowerCase();\n        } else {\n          (0, _deleteProperty2.default)(person, 'entryEmail');\n          (0, _deleteProperty2.default)(person, 'emailAddress');\n        }\n\n        if (person.roomProperties) {\n          person.roomProperties.isModerator = Boolean(person.roomProperties.isModerator);\n        }\n\n        if (_common.patterns.uuid.test(id)) {\n          person.entryUUID = person.id = id.toLowerCase();\n          return _promise2.default.resolve(person);\n        }\n\n        if (!email) {\n          return _promise2.default.reject(new Error('cannot determine id without an `emailAddress` or `entryUUID` property'));\n        }\n\n        return ctx.spark.internal.user.asUUID(email).then(function (uuid) {\n          person.entryUUID = person.id = uuid;\n          return person;\n        });\n      }\n    }].concat(_decryptionTransforms.transforms).concat(_encryptionTransforms.transforms)\n  },\n  config: _config2.default\n});\n/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */","map":null,"metadata":{},"sourceType":"script"}